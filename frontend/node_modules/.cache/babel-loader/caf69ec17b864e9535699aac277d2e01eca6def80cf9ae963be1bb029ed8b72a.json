{"ast":null,"code":"/**\n * fileTypeUtils.js\n * \n * Comprehensive utilities for handling various file types in the application.\n * This module provides functions for file type detection, validation, visualization,\n * and processing of different file formats.\n */// Common MIME Types grouped by category\nexport const MimeTypeCategories={TEXT:['text/plain','text/csv','text/tab-separated-values','text/markdown','text/html','text/css','text/javascript','text/xml','application/json','application/ld+json','application/x-yaml','application/yaml'],DOCUMENT:['application/pdf','application/msword','application/vnd.openxmlformats-officedocument.wordprocessingml.document',// .docx\n'application/vnd.ms-excel','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',// .xlsx\n'application/vnd.ms-powerpoint','application/vnd.openxmlformats-officedocument.presentationml.presentation',// .pptx\n'application/rtf','application/vnd.oasis.opendocument.text','application/vnd.oasis.opendocument.spreadsheet','application/vnd.oasis.opendocument.presentation'],IMAGE:['image/jpeg','image/png','image/gif','image/webp','image/svg+xml','image/bmp','image/tiff','image/x-icon'],AUDIO:['audio/mpeg','audio/ogg','audio/wav','audio/webm','audio/aac','audio/flac'],VIDEO:['video/mp4','video/webm','video/ogg','video/quicktime','video/x-msvideo','video/x-ms-wmv'],ARCHIVE:['application/zip','application/x-rar-compressed','application/x-7z-compressed','application/x-tar','application/gzip','application/x-bzip','application/x-bzip2'],DATA:['text/csv','application/json','application/xml','text/xml','application/vnd.ms-excel','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','text/tab-separated-values','application/parquet','application/avro','application/octet-stream'],CODE:['text/javascript','application/javascript','text/css','text/html','application/json','text/x-python','text/x-java','text/x-c','text/x-c++','text/x-csharp','text/x-php','text/x-ruby','text/x-go','text/x-rust','text/x-typescript']};// File extensions mapped to MIME types\nexport const FileExtensionToMimeType={// Text files\n'txt':'text/plain','csv':'text/csv','tsv':'text/tab-separated-values','md':'text/markdown','html':'text/html','htm':'text/html','css':'text/css','js':'text/javascript','json':'application/json','xml':'text/xml','yaml':'application/yaml','yml':'application/yaml',// Document files\n'pdf':'application/pdf','doc':'application/msword','docx':'application/vnd.openxmlformats-officedocument.wordprocessingml.document','xls':'application/vnd.ms-excel','xlsx':'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','ppt':'application/vnd.ms-powerpoint','pptx':'application/vnd.openxmlformats-officedocument.presentationml.presentation','rtf':'application/rtf','odt':'application/vnd.oasis.opendocument.text','ods':'application/vnd.oasis.opendocument.spreadsheet','odp':'application/vnd.oasis.opendocument.presentation',// Image files\n'jpg':'image/jpeg','jpeg':'image/jpeg','png':'image/png','gif':'image/gif','webp':'image/webp','svg':'image/svg+xml','bmp':'image/bmp','tiff':'image/tiff','tif':'image/tiff','ico':'image/x-icon',// Audio files\n'mp3':'audio/mpeg','ogg':'audio/ogg','wav':'audio/wav','aac':'audio/aac','flac':'audio/flac',// Video files\n'mp4':'video/mp4','webm':'video/webm','ogv':'video/ogg','mov':'video/quicktime','avi':'video/x-msvideo','wmv':'video/x-ms-wmv',// Archive files\n'zip':'application/zip','rar':'application/x-rar-compressed','7z':'application/x-7z-compressed','tar':'application/x-tar','gz':'application/gzip','bz':'application/x-bzip','bz2':'application/x-bzip2',// Data files\n'parquet':'application/parquet','avro':'application/avro','bin':'application/octet-stream',// Code files\n'ts':'text/x-typescript','py':'text/x-python','java':'text/x-java','c':'text/x-c','cpp':'text/x-c++','cs':'text/x-csharp','php':'text/x-php','rb':'text/x-ruby','go':'text/x-go','rs':'text/x-rust'};/**\n * Gets MIME type from file extension\n * @param {string} filename - The filename or file path\n * @returns {string} The MIME type or 'application/octet-stream' if unknown\n */export const getMimeTypeFromFilename=filename=>{if(!filename)return'application/octet-stream';const extension=filename.split('.').pop().toLowerCase();return FileExtensionToMimeType[extension]||'application/octet-stream';};/**\n * Gets file extension from filename\n * @param {string} filename - The filename or file path\n * @returns {string} The file extension (without the dot) or empty string if none\n */export const getFileExtension=filename=>{if(!filename)return'';const parts=filename.split('.');return parts.length>1?parts.pop().toLowerCase():'';};/**\n * Checks if a file is of a specific category based on its MIME type\n * @param {string} mimeType - The MIME type to check\n * @param {string} category - The category to check against (TEXT, DOCUMENT, IMAGE, etc.)\n * @returns {boolean} True if the file is of the specified category\n */export const isFileCategory=(mimeType,category)=>{if(!mimeType||!category||!MimeTypeCategories[category])return false;return MimeTypeCategories[category].includes(mimeType);};/**\n * Gets the file category for a given MIME type\n * @param {string} mimeType - The MIME type\n * @returns {string} The category name or 'OTHER' if unknown\n */export const getFileCategory=mimeType=>{if(!mimeType)return'OTHER';for(const[category,types]of Object.entries(MimeTypeCategories)){if(types.includes(mimeType)){return category;}}return'OTHER';};/**\n * Gets a readable file type description from MIME type\n * @param {string} mimeType - The MIME type\n * @returns {string} A human-readable description of the file type\n */export const getFileTypeDescription=mimeType=>{if(!mimeType)return'Unknown File';// Common descriptions for specific MIME types\nconst specificMimeTypes={'text/plain':'Text File','text/csv':'CSV File','text/tab-separated-values':'TSV File','text/markdown':'Markdown File','text/html':'HTML File','application/json':'JSON File','application/xml':'XML File','text/xml':'XML File','application/pdf':'PDF Document','application/msword':'Word Document','application/vnd.openxmlformats-officedocument.wordprocessingml.document':'Word Document','application/vnd.ms-excel':'Excel Spreadsheet','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':'Excel Spreadsheet','image/jpeg':'JPEG Image','image/png':'PNG Image','image/gif':'GIF Image','image/svg+xml':'SVG Image','audio/mpeg':'MP3 Audio','video/mp4':'MP4 Video','application/zip':'ZIP Archive','application/x-tar':'TAR Archive','application/gzip':'GZIP Archive'};if(specificMimeTypes[mimeType]){return specificMimeTypes[mimeType];}// General descriptions based on MIME type category\nconst category=getFileCategory(mimeType);switch(category){case'TEXT':return'Text File';case'DOCUMENT':return'Document';case'IMAGE':return'Image';case'AUDIO':return'Audio File';case'VIDEO':return'Video File';case'ARCHIVE':return'Archive';case'DATA':return'Data File';case'CODE':return'Source Code';default:return'Binary File';}};/**\n * Gets appropriate Material UI icon for file type\n * @param {string} mimeType - The MIME type\n * @returns {string} The name of the Material UI icon to use\n */export const getFileTypeIcon=mimeType=>{if(!mimeType)return'InsertDriveFile';const category=getFileCategory(mimeType);switch(category){case'TEXT':if(mimeType==='text/csv'||mimeType==='text/tab-separated-values'){return'TableChart';}if(mimeType==='application/json'){return'Code';}return'Description';case'DOCUMENT':if(mimeType==='application/pdf'){return'PictureAsPdf';}if(mimeType.includes('spreadsheet')||mimeType.includes('excel')){return'GridOn';}if(mimeType.includes('presentation')||mimeType.includes('powerpoint')){return'Slideshow';}return'Description';case'IMAGE':return'Image';case'AUDIO':return'AudioFile';case'VIDEO':return'VideoFile';case'ARCHIVE':return'FolderZip';case'DATA':if(mimeType==='text/csv'||mimeType==='text/tab-separated-values'){return'TableChart';}return'Storage';case'CODE':return'Code';default:return'InsertDriveFile';}};/**\n * Gets color for file type icon\n * @param {string} mimeType - The MIME type\n * @returns {string} Material UI color to use for the icon\n */export const getFileTypeColor=mimeType=>{if(!mimeType)return'action.active';const category=getFileCategory(mimeType);switch(category){case'TEXT':return'info.main';case'DOCUMENT':if(mimeType==='application/pdf'){return'error.main';}if(mimeType.includes('spreadsheet')||mimeType.includes('excel')){return'success.main';}if(mimeType.includes('presentation')||mimeType.includes('powerpoint')){return'warning.main';}return'primary.main';case'IMAGE':return'success.main';case'AUDIO':return'secondary.main';case'VIDEO':return'error.main';case'ARCHIVE':return'warning.dark';case'DATA':return'info.dark';case'CODE':return'secondary.dark';default:return'text.secondary';}};/**\n * Checks if a file type is supported for preview\n * @param {string} mimeType - The MIME type\n * @returns {boolean} True if the file type is supported for preview\n */export const isPreviewSupported=mimeType=>{if(!mimeType)return false;// List of supported MIME types for preview\nconst supportedMimeTypes=[// Text files\n'text/plain','text/csv','text/tab-separated-values','text/markdown','text/html','text/css','text/javascript','application/json','application/xml','text/xml','application/yaml',// Images\n'image/jpeg','image/png','image/gif','image/webp','image/svg+xml','image/bmp',// PDFs\n'application/pdf',// Special code types we can syntax highlight\n'text/x-python','text/x-java','text/javascript','application/javascript','text/x-typescript'];return supportedMimeTypes.includes(mimeType);};/**\n * Gets the appropriate preview component type for a file\n * @param {string} mimeType - The MIME type\n * @returns {string} The preview type: 'text', 'image', 'pdf', 'code', or 'none'\n */export const getPreviewType=mimeType=>{if(!isPreviewSupported(mimeType))return'none';if(mimeType.startsWith('image/')){return'image';}if(mimeType==='application/pdf'){return'pdf';}if(MimeTypeCategories.CODE.includes(mimeType)){return'code';}if(MimeTypeCategories.TEXT.includes(mimeType)||mimeType==='application/json'||mimeType==='application/xml'||mimeType==='text/xml'){return'text';}return'none';};/**\n * Gets the appropriate syntax highlighting language for code preview\n * @param {string} mimeType - The MIME type\n * @returns {string} The syntax highlighting language\n */export const getSyntaxHighlightLanguage=mimeType=>{const mimeToLanguage={'text/javascript':'javascript','application/javascript':'javascript','text/x-typescript':'typescript','text/x-python':'python','text/x-java':'java','text/x-c':'c','text/x-c++':'cpp','text/x-csharp':'csharp','text/x-php':'php','text/x-ruby':'ruby','text/x-go':'go','text/x-rust':'rust','text/css':'css','text/html':'html','application/json':'json','application/ld+json':'json','application/xml':'xml','text/xml':'xml','application/yaml':'yaml','text/markdown':'markdown','text/csv':'csv','text/tab-separated-values':'tsv'};return mimeToLanguage[mimeType]||'plaintext';};/**\n * Generates simplified metadata for a file\n * @param {Object} file - The file object or file info\n * @returns {Object} Simplified metadata object with useful properties\n */export const generateFileMetadata=file=>{if(!file)return null;// Extract filename from path if needed\nconst filename=file.name||file.filename||(file.path?file.path.split('/').pop():'unknown');// Determine MIME type\nconst mimeType=file.contentType||file.type||getMimeTypeFromFilename(filename);// Get file extension\nconst extension=getFileExtension(filename);return{filename,mimeType,extension,size:file.size||file.contentLength||0,lastModified:file.lastModified||file.modifiedDate||new Date().toISOString(),category:getFileCategory(mimeType),description:getFileTypeDescription(mimeType),icon:getFileTypeIcon(mimeType),color:getFileTypeColor(mimeType),isPreviewable:isPreviewSupported(mimeType),previewType:getPreviewType(mimeType)};};","map":{"version":3,"names":["MimeTypeCategories","TEXT","DOCUMENT","IMAGE","AUDIO","VIDEO","ARCHIVE","DATA","CODE","FileExtensionToMimeType","getMimeTypeFromFilename","filename","extension","split","pop","toLowerCase","getFileExtension","parts","length","isFileCategory","mimeType","category","includes","getFileCategory","types","Object","entries","getFileTypeDescription","specificMimeTypes","getFileTypeIcon","getFileTypeColor","isPreviewSupported","supportedMimeTypes","getPreviewType","startsWith","getSyntaxHighlightLanguage","mimeToLanguage","generateFileMetadata","file","name","path","contentType","type","size","contentLength","lastModified","modifiedDate","Date","toISOString","description","icon","color","isPreviewable","previewType"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/utils/fileTypeUtils.js"],"sourcesContent":["/**\n * fileTypeUtils.js\n * \n * Comprehensive utilities for handling various file types in the application.\n * This module provides functions for file type detection, validation, visualization,\n * and processing of different file formats.\n */\n\n// Common MIME Types grouped by category\nexport const MimeTypeCategories = {\n  TEXT: [\n    'text/plain', \n    'text/csv', \n    'text/tab-separated-values',\n    'text/markdown',\n    'text/html',\n    'text/css',\n    'text/javascript',\n    'text/xml',\n    'application/json',\n    'application/ld+json',\n    'application/x-yaml',\n    'application/yaml'\n  ],\n  \n  DOCUMENT: [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document', // .docx\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation', // .pptx\n    'application/rtf',\n    'application/vnd.oasis.opendocument.text',\n    'application/vnd.oasis.opendocument.spreadsheet',\n    'application/vnd.oasis.opendocument.presentation'\n  ],\n  \n  IMAGE: [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/svg+xml',\n    'image/bmp',\n    'image/tiff',\n    'image/x-icon'\n  ],\n  \n  AUDIO: [\n    'audio/mpeg',\n    'audio/ogg',\n    'audio/wav',\n    'audio/webm',\n    'audio/aac',\n    'audio/flac'\n  ],\n  \n  VIDEO: [\n    'video/mp4',\n    'video/webm',\n    'video/ogg',\n    'video/quicktime',\n    'video/x-msvideo',\n    'video/x-ms-wmv'\n  ],\n  \n  ARCHIVE: [\n    'application/zip',\n    'application/x-rar-compressed',\n    'application/x-7z-compressed',\n    'application/x-tar',\n    'application/gzip',\n    'application/x-bzip',\n    'application/x-bzip2'\n  ],\n  \n  DATA: [\n    'text/csv',\n    'application/json',\n    'application/xml',\n    'text/xml',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'text/tab-separated-values',\n    'application/parquet',\n    'application/avro',\n    'application/octet-stream'\n  ],\n  \n  CODE: [\n    'text/javascript',\n    'application/javascript',\n    'text/css',\n    'text/html',\n    'application/json',\n    'text/x-python',\n    'text/x-java',\n    'text/x-c',\n    'text/x-c++',\n    'text/x-csharp',\n    'text/x-php',\n    'text/x-ruby',\n    'text/x-go',\n    'text/x-rust',\n    'text/x-typescript'\n  ]\n};\n\n// File extensions mapped to MIME types\nexport const FileExtensionToMimeType = {\n  // Text files\n  'txt': 'text/plain',\n  'csv': 'text/csv',\n  'tsv': 'text/tab-separated-values',\n  'md': 'text/markdown',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'css': 'text/css',\n  'js': 'text/javascript',\n  'json': 'application/json',\n  'xml': 'text/xml',\n  'yaml': 'application/yaml',\n  'yml': 'application/yaml',\n  \n  // Document files\n  'pdf': 'application/pdf',\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'rtf': 'application/rtf',\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  \n  // Image files\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'png': 'image/png',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'tiff': 'image/tiff',\n  'tif': 'image/tiff',\n  'ico': 'image/x-icon',\n  \n  // Audio files\n  'mp3': 'audio/mpeg',\n  'ogg': 'audio/ogg',\n  'wav': 'audio/wav',\n  'aac': 'audio/aac',\n  'flac': 'audio/flac',\n  \n  // Video files\n  'mp4': 'video/mp4',\n  'webm': 'video/webm',\n  'ogv': 'video/ogg',\n  'mov': 'video/quicktime',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  \n  // Archive files\n  'zip': 'application/zip',\n  'rar': 'application/x-rar-compressed',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz': 'application/x-bzip',\n  'bz2': 'application/x-bzip2',\n  \n  // Data files\n  'parquet': 'application/parquet',\n  'avro': 'application/avro',\n  'bin': 'application/octet-stream',\n  \n  // Code files\n  'ts': 'text/x-typescript',\n  'py': 'text/x-python',\n  'java': 'text/x-java',\n  'c': 'text/x-c',\n  'cpp': 'text/x-c++',\n  'cs': 'text/x-csharp',\n  'php': 'text/x-php',\n  'rb': 'text/x-ruby',\n  'go': 'text/x-go',\n  'rs': 'text/x-rust'\n};\n\n/**\n * Gets MIME type from file extension\n * @param {string} filename - The filename or file path\n * @returns {string} The MIME type or 'application/octet-stream' if unknown\n */\nexport const getMimeTypeFromFilename = (filename) => {\n  if (!filename) return 'application/octet-stream';\n  \n  const extension = filename.split('.').pop().toLowerCase();\n  return FileExtensionToMimeType[extension] || 'application/octet-stream';\n};\n\n/**\n * Gets file extension from filename\n * @param {string} filename - The filename or file path\n * @returns {string} The file extension (without the dot) or empty string if none\n */\nexport const getFileExtension = (filename) => {\n  if (!filename) return '';\n  \n  const parts = filename.split('.');\n  return parts.length > 1 ? parts.pop().toLowerCase() : '';\n};\n\n/**\n * Checks if a file is of a specific category based on its MIME type\n * @param {string} mimeType - The MIME type to check\n * @param {string} category - The category to check against (TEXT, DOCUMENT, IMAGE, etc.)\n * @returns {boolean} True if the file is of the specified category\n */\nexport const isFileCategory = (mimeType, category) => {\n  if (!mimeType || !category || !MimeTypeCategories[category]) return false;\n  return MimeTypeCategories[category].includes(mimeType);\n};\n\n/**\n * Gets the file category for a given MIME type\n * @param {string} mimeType - The MIME type\n * @returns {string} The category name or 'OTHER' if unknown\n */\nexport const getFileCategory = (mimeType) => {\n  if (!mimeType) return 'OTHER';\n  \n  for (const [category, types] of Object.entries(MimeTypeCategories)) {\n    if (types.includes(mimeType)) {\n      return category;\n    }\n  }\n  \n  return 'OTHER';\n};\n\n/**\n * Gets a readable file type description from MIME type\n * @param {string} mimeType - The MIME type\n * @returns {string} A human-readable description of the file type\n */\nexport const getFileTypeDescription = (mimeType) => {\n  if (!mimeType) return 'Unknown File';\n  \n  // Common descriptions for specific MIME types\n  const specificMimeTypes = {\n    'text/plain': 'Text File',\n    'text/csv': 'CSV File',\n    'text/tab-separated-values': 'TSV File',\n    'text/markdown': 'Markdown File',\n    'text/html': 'HTML File',\n    'application/json': 'JSON File',\n    'application/xml': 'XML File', \n    'text/xml': 'XML File',\n    'application/pdf': 'PDF Document',\n    'application/msword': 'Word Document',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Word Document',\n    'application/vnd.ms-excel': 'Excel Spreadsheet',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Excel Spreadsheet',\n    'image/jpeg': 'JPEG Image',\n    'image/png': 'PNG Image',\n    'image/gif': 'GIF Image',\n    'image/svg+xml': 'SVG Image',\n    'audio/mpeg': 'MP3 Audio',\n    'video/mp4': 'MP4 Video',\n    'application/zip': 'ZIP Archive',\n    'application/x-tar': 'TAR Archive',\n    'application/gzip': 'GZIP Archive'\n  };\n  \n  if (specificMimeTypes[mimeType]) {\n    return specificMimeTypes[mimeType];\n  }\n  \n  // General descriptions based on MIME type category\n  const category = getFileCategory(mimeType);\n  switch (category) {\n    case 'TEXT':\n      return 'Text File';\n    case 'DOCUMENT':\n      return 'Document';\n    case 'IMAGE':\n      return 'Image';\n    case 'AUDIO':\n      return 'Audio File';\n    case 'VIDEO':\n      return 'Video File';\n    case 'ARCHIVE':\n      return 'Archive';\n    case 'DATA':\n      return 'Data File';\n    case 'CODE':\n      return 'Source Code';\n    default:\n      return 'Binary File';\n  }\n};\n\n/**\n * Gets appropriate Material UI icon for file type\n * @param {string} mimeType - The MIME type\n * @returns {string} The name of the Material UI icon to use\n */\nexport const getFileTypeIcon = (mimeType) => {\n  if (!mimeType) return 'InsertDriveFile';\n  \n  const category = getFileCategory(mimeType);\n  \n  switch (category) {\n    case 'TEXT':\n      if (mimeType === 'text/csv' || mimeType === 'text/tab-separated-values') {\n        return 'TableChart';\n      }\n      if (mimeType === 'application/json') {\n        return 'Code';\n      }\n      return 'Description';\n      \n    case 'DOCUMENT':\n      if (mimeType === 'application/pdf') {\n        return 'PictureAsPdf';\n      }\n      if (mimeType.includes('spreadsheet') || mimeType.includes('excel')) {\n        return 'GridOn';\n      }\n      if (mimeType.includes('presentation') || mimeType.includes('powerpoint')) {\n        return 'Slideshow';\n      }\n      return 'Description';\n      \n    case 'IMAGE':\n      return 'Image';\n      \n    case 'AUDIO':\n      return 'AudioFile';\n      \n    case 'VIDEO':\n      return 'VideoFile';\n      \n    case 'ARCHIVE':\n      return 'FolderZip';\n      \n    case 'DATA':\n      if (mimeType === 'text/csv' || mimeType === 'text/tab-separated-values') {\n        return 'TableChart';\n      }\n      return 'Storage';\n      \n    case 'CODE':\n      return 'Code';\n      \n    default:\n      return 'InsertDriveFile';\n  }\n};\n\n/**\n * Gets color for file type icon\n * @param {string} mimeType - The MIME type\n * @returns {string} Material UI color to use for the icon\n */\nexport const getFileTypeColor = (mimeType) => {\n  if (!mimeType) return 'action.active';\n  \n  const category = getFileCategory(mimeType);\n  \n  switch (category) {\n    case 'TEXT':\n      return 'info.main';\n      \n    case 'DOCUMENT':\n      if (mimeType === 'application/pdf') {\n        return 'error.main';\n      }\n      if (mimeType.includes('spreadsheet') || mimeType.includes('excel')) {\n        return 'success.main';\n      }\n      if (mimeType.includes('presentation') || mimeType.includes('powerpoint')) {\n        return 'warning.main';\n      }\n      return 'primary.main';\n      \n    case 'IMAGE':\n      return 'success.main';\n      \n    case 'AUDIO':\n      return 'secondary.main';\n      \n    case 'VIDEO':\n      return 'error.main';\n      \n    case 'ARCHIVE':\n      return 'warning.dark';\n      \n    case 'DATA':\n      return 'info.dark';\n      \n    case 'CODE':\n      return 'secondary.dark';\n      \n    default:\n      return 'text.secondary';\n  }\n};\n\n/**\n * Checks if a file type is supported for preview\n * @param {string} mimeType - The MIME type\n * @returns {boolean} True if the file type is supported for preview\n */\nexport const isPreviewSupported = (mimeType) => {\n  if (!mimeType) return false;\n  \n  // List of supported MIME types for preview\n  const supportedMimeTypes = [\n    // Text files\n    'text/plain',\n    'text/csv',\n    'text/tab-separated-values',\n    'text/markdown',\n    'text/html',\n    'text/css',\n    'text/javascript',\n    'application/json',\n    'application/xml',\n    'text/xml',\n    'application/yaml',\n    \n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/svg+xml',\n    'image/bmp',\n    \n    // PDFs\n    'application/pdf',\n    \n    // Special code types we can syntax highlight\n    'text/x-python',\n    'text/x-java',\n    'text/javascript',\n    'application/javascript',\n    'text/x-typescript'\n  ];\n  \n  return supportedMimeTypes.includes(mimeType);\n};\n\n/**\n * Gets the appropriate preview component type for a file\n * @param {string} mimeType - The MIME type\n * @returns {string} The preview type: 'text', 'image', 'pdf', 'code', or 'none'\n */\nexport const getPreviewType = (mimeType) => {\n  if (!isPreviewSupported(mimeType)) return 'none';\n  \n  if (mimeType.startsWith('image/')) {\n    return 'image';\n  }\n  \n  if (mimeType === 'application/pdf') {\n    return 'pdf';\n  }\n  \n  if (MimeTypeCategories.CODE.includes(mimeType)) {\n    return 'code';\n  }\n  \n  if (MimeTypeCategories.TEXT.includes(mimeType) || \n      mimeType === 'application/json' || \n      mimeType === 'application/xml' ||\n      mimeType === 'text/xml') {\n    return 'text';\n  }\n  \n  return 'none';\n};\n\n/**\n * Gets the appropriate syntax highlighting language for code preview\n * @param {string} mimeType - The MIME type\n * @returns {string} The syntax highlighting language\n */\nexport const getSyntaxHighlightLanguage = (mimeType) => {\n  const mimeToLanguage = {\n    'text/javascript': 'javascript',\n    'application/javascript': 'javascript',\n    'text/x-typescript': 'typescript',\n    'text/x-python': 'python',\n    'text/x-java': 'java',\n    'text/x-c': 'c',\n    'text/x-c++': 'cpp',\n    'text/x-csharp': 'csharp',\n    'text/x-php': 'php',\n    'text/x-ruby': 'ruby',\n    'text/x-go': 'go',\n    'text/x-rust': 'rust',\n    'text/css': 'css',\n    'text/html': 'html',\n    'application/json': 'json',\n    'application/ld+json': 'json',\n    'application/xml': 'xml',\n    'text/xml': 'xml',\n    'application/yaml': 'yaml',\n    'text/markdown': 'markdown',\n    'text/csv': 'csv',\n    'text/tab-separated-values': 'tsv'\n  };\n  \n  return mimeToLanguage[mimeType] || 'plaintext';\n};\n\n/**\n * Generates simplified metadata for a file\n * @param {Object} file - The file object or file info\n * @returns {Object} Simplified metadata object with useful properties\n */\nexport const generateFileMetadata = (file) => {\n  if (!file) return null;\n  \n  // Extract filename from path if needed\n  const filename = file.name || file.filename || \n                   (file.path ? file.path.split('/').pop() : 'unknown');\n  \n  // Determine MIME type\n  const mimeType = file.contentType || file.type || \n                   getMimeTypeFromFilename(filename);\n  \n  // Get file extension\n  const extension = getFileExtension(filename);\n  \n  return {\n    filename,\n    mimeType,\n    extension,\n    size: file.size || file.contentLength || 0,\n    lastModified: file.lastModified || file.modifiedDate || new Date().toISOString(),\n    category: getFileCategory(mimeType),\n    description: getFileTypeDescription(mimeType),\n    icon: getFileTypeIcon(mimeType),\n    color: getFileTypeColor(mimeType),\n    isPreviewable: isPreviewSupported(mimeType),\n    previewType: getPreviewType(mimeType)\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}