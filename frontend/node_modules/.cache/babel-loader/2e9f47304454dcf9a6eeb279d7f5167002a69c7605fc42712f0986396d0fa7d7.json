{"ast":null,"code":"/**\n * Contextual Help Hook\n * \n * A custom hook for working with contextual help and guided tours.\n * Provides an easy-to-use interface for implementing help features across components.\n */\n\nimport { useCallback } from 'react';\nimport { useHelp } from \"../contexts/HelpContext\";\n\n/**\n * Custom hook for implementing contextual help and guided tours\n * \n * @param {string} section - The section identifier (e.g., 'integration', 'transformation')\n * @returns {Object} Helper functions and data for implementing contextual help\n */\nconst useContextualHelp = section => {\n  const {\n    helpContent,\n    tours,\n    startTour,\n    addHelpContent,\n    getHelpContent,\n    helpPreferences,\n    handleTourComplete\n  } = useHelp();\n\n  /**\n   * Get help content for a specific feature in this section\n   * \n   * @param {string} key - The key for the specific feature\n   * @returns {Object|null} The help content or null if not found\n   */\n  const getHelp = useCallback(key => getHelpContent(section, key), [section, getHelpContent]);\n\n  /**\n   * Add new help content for this section\n   * \n   * @param {string} key - The key for the specific feature\n   * @param {Object} content - The help content to add\n   */\n  const addHelp = useCallback((key, content) => addHelpContent(section, key, content), [section, addHelpContent]);\n\n  /**\n   * Check if help is enabled\n   * \n   * @returns {boolean} Whether help is enabled\n   */\n  const isHelpEnabled = helpPreferences.showHelp;\n\n  /**\n   * Get all tours related to this section\n   * \n   * @returns {Array} Tours related to this section\n   */\n  const getSectionTours = useCallback(() => tours.filter(tour => tour.id.startsWith(`${section}-`)), [section, tours]);\n\n  /**\n   * Start a tour specific to this section\n   * \n   * @param {string} tourId - The ID of the tour to start\n   */\n  const startSectionTour = useCallback(tourId => {\n    const fullTourId = tourId.includes('-') ? tourId : `${section}-${tourId}`;\n    startTour(fullTourId);\n  }, [section, startTour]);\n\n  /**\n   * Check if a tour has been completed\n   * \n   * @param {string} tourId - The ID of the tour to check\n   * @returns {boolean} Whether the tour has been completed\n   */\n  const isTourCompleted = useCallback(tourId => {\n    const fullTourId = tourId.includes('-') ? tourId : `${section}-${tourId}`;\n    return helpPreferences.completedTours.includes(fullTourId);\n  }, [section, helpPreferences.completedTours]);\n  return {\n    getHelp,\n    addHelp,\n    isHelpEnabled,\n    tours,\n    getSectionTours,\n    startTour: startSectionTour,\n    isTourCompleted,\n    completeTour: handleTourComplete\n  };\n};\nexport default useContextualHelp;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}