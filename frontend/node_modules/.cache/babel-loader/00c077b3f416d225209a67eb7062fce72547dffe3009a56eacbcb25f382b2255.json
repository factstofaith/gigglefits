{"ast":null,"code":"// authService.js\n// -----------------------------------------------------------------------------\n// Authentication service supporting Office 365 and Gmail authentication\n\nconst AUTH_TOKEN_KEY = 'auth_token';\nconst USER_INFO_KEY = 'user_info';\n\n// Mock authentication endpoints - in a real app these would point to your backend\nconst API_ENDPOINTS = {\n  login: '/api/auth/login',\n  logout: '/api/auth/logout',\n  office365: '/api/auth/office365',\n  gmail: '/api/auth/gmail',\n  userInfo: '/api/auth/user',\n  refreshToken: '/api/auth/refresh'\n};\n\n// Mock implementation for local development\n// In a real app, these would make API calls to your backend\nexport const authService = {\n  // Initialize auth on app start\n  initialize: () => {\n    const token = localStorage.getItem(AUTH_TOKEN_KEY);\n    const userInfo = JSON.parse(localStorage.getItem(USER_INFO_KEY) || 'null');\n    return {\n      token,\n      userInfo\n    };\n  },\n  // Login with username and password\n  login: async (username, password) => {\n    // Mock successful login\n    const token = 'mock_token_' + Math.random().toString(36).substring(2);\n    const userInfo = {\n      id: 'user_1',\n      username,\n      email: `${username}@example.com`,\n      name: username.charAt(0).toUpperCase() + username.slice(1),\n      role: username === 'admin' ? 'admin' : 'user'\n    };\n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n    return {\n      token,\n      userInfo\n    };\n  },\n  // Logout\n  logout: async () => {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_INFO_KEY);\n    return true;\n  },\n  // Office 365 authentication\n  loginWithOffice365: async () => {\n    // In a real app, this would redirect to Microsoft's OAuth endpoint\n    window.alert('Redirecting to Office 365 login...');\n\n    // Mock successful login after OAuth flow\n    const token = 'mock_o365_token_' + Math.random().toString(36).substring(2);\n    const userInfo = {\n      id: 'o365_user_1',\n      username: 'o365user',\n      email: 'user@company.onmicrosoft.com',\n      name: 'Office 365 User',\n      role: 'user',\n      provider: 'office365'\n    };\n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n    return {\n      token,\n      userInfo\n    };\n  },\n  // Gmail authentication\n  loginWithGmail: async () => {\n    // In a real app, this would redirect to Google's OAuth endpoint\n    window.alert('Redirecting to Gmail login...');\n\n    // Mock successful login after OAuth flow\n    const token = 'mock_gmail_token_' + Math.random().toString(36).substring(2);\n    const userInfo = {\n      id: 'gmail_user_1',\n      username: 'gmailuser',\n      email: 'user@gmail.com',\n      name: 'Gmail User',\n      role: 'user',\n      provider: 'gmail'\n    };\n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n    return {\n      token,\n      userInfo\n    };\n  },\n  // Get current user info\n  getCurrentUser: async () => {\n    const userInfo = JSON.parse(localStorage.getItem(USER_INFO_KEY) || 'null');\n    return userInfo;\n  },\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    return !!localStorage.getItem(AUTH_TOKEN_KEY);\n  },\n  // Check if user is an admin\n  isAdmin: async () => {\n    const userInfo = JSON.parse(localStorage.getItem(USER_INFO_KEY) || 'null');\n    return (userInfo === null || userInfo === void 0 ? void 0 : userInfo.role) === 'admin';\n  },\n  // Refresh token\n  refreshToken: async () => {\n    // In a real app, this would send the refresh token to get a new access token\n    const token = 'refreshed_token_' + Math.random().toString(36).substring(2);\n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    return token;\n  }\n};\nexport default authService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}