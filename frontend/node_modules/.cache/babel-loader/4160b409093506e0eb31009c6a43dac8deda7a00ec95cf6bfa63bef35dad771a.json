{"ast":null,"code":"/**\n * Accessibility Announcement Hook\n * \n * A custom hook for managing accessibility announcements for screen readers.\n * Part of the zero technical debt accessibility implementation.\n * \n * @module hooks/a11y/useA11yAnnouncement\n */import{useState,useCallback,useEffect,useRef}from'react';/**\n * Enum for announcement politeness levels\n */export const PolitenessLevel={POLITE:'polite',ASSERTIVE:'assertive'};/**\n * Custom hook for managing screen reader announcements\n * \n * @param {Object} options - Configuration options\n * @param {number} [options.maxQueue=10] - Maximum queue size\n * @param {boolean} [options.clearOnUnmount=true] - Whether to clear announcements on unmount\n * @returns {Object} Object containing announcement functions and state\n */const useA11yAnnouncement=function(){let{maxQueue=10,clearOnUnmount=true}=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};// Store announcements in a queue\nconst[announcements,setAnnouncements]=useState([]);// Track whether the component is mounted\nconst isMounted=useRef(true);// Store announcement elements for direct access\nconst politeAnnouncementRef=useRef(null);const assertiveAnnouncementRef=useRef(null);/**\n   * Create a unique ID for announcement elements\n   */const getUniqueId=useCallback(()=>{return`announcement-${Math.random().toString(36).substring(2,11)}`;},[]);/**\n   * Generate the announcement element IDs if not already set\n   */const politeAnnouncementId=useRef(getUniqueId());const assertiveAnnouncementId=useRef(getUniqueId());/**\n   * Add an announcement to the queue\n   */const announce=useCallback(function(message){let politeness=arguments.length>1&&arguments[1]!==undefined?arguments[1]:PolitenessLevel.POLITE;if(!message||typeof message!=='string')return;setAnnouncements(prev=>{// Add new announcement to the queue\nconst newQueue=[...prev,{id:getUniqueId(),message,politeness,timestamp:new Date().getTime()}];// Limit queue size\nreturn newQueue.slice(-maxQueue);});},[maxQueue,getUniqueId]);/**\n   * Convenience method for polite announcements\n   */const announcePolite=useCallback(message=>{announce(message,PolitenessLevel.POLITE);},[announce]);/**\n   * Convenience method for assertive announcements\n   */const announceAssertive=useCallback(message=>{announce(message,PolitenessLevel.ASSERTIVE);},[announce]);/**\n   * Process the announcement queue\n   */useEffect(()=>{if(announcements.length===0)return;// Get the latest announcement\nconst latestAnnouncement=announcements[announcements.length-1];// Find the appropriate element\nconst element=latestAnnouncement.politeness===PolitenessLevel.ASSERTIVE?assertiveAnnouncementRef.current:politeAnnouncementRef.current;// Update the announcement text\nif(element){// Clear first, then set (required for some screen readers)\nelement.textContent='';// Use a timeout to ensure screen readers recognize the change\nsetTimeout(()=>{if(isMounted.current&&element){element.textContent=latestAnnouncement.message;}},50);}},[announcements]);/**\n   * Create the announcement elements if they don't exist\n   */useEffect(()=>{// Create elements if they don't exist\nif(!politeAnnouncementRef.current){const politeElement=document.getElementById(politeAnnouncementId.current);if(politeElement){politeAnnouncementRef.current=politeElement;}else{const newElement=document.createElement('div');newElement.id=politeAnnouncementId.current;newElement.className='sr-only';newElement.setAttribute('aria-live','polite');newElement.setAttribute('aria-atomic','true');document.body.appendChild(newElement);politeAnnouncementRef.current=newElement;}}if(!assertiveAnnouncementRef.current){const assertiveElement=document.getElementById(assertiveAnnouncementId.current);if(assertiveElement){assertiveAnnouncementRef.current=assertiveElement;}else{const newElement=document.createElement('div');newElement.id=assertiveAnnouncementId.current;newElement.className='sr-only';newElement.setAttribute('aria-live','assertive');newElement.setAttribute('aria-atomic','true');document.body.appendChild(newElement);assertiveAnnouncementRef.current=newElement;}}return()=>{isMounted.current=false;// Clean up announcement elements if clearOnUnmount is true\nif(clearOnUnmount){if(politeAnnouncementRef.current){politeAnnouncementRef.current.textContent='';}if(assertiveAnnouncementRef.current){assertiveAnnouncementRef.current.textContent='';}}};},[clearOnUnmount,politeAnnouncementId,assertiveAnnouncementId]);/**\n   * Clear all announcements\n   */const clearAnnouncements=useCallback(()=>{setAnnouncements([]);if(politeAnnouncementRef.current){politeAnnouncementRef.current.textContent='';}if(assertiveAnnouncementRef.current){assertiveAnnouncementRef.current.textContent='';}},[]);return{announce,announcePolite,announceAssertive,clearAnnouncements,announcements,politeAnnouncementId:politeAnnouncementId.current,assertiveAnnouncementId:assertiveAnnouncementId.current};};export default useA11yAnnouncement;","map":{"version":3,"names":["useState","useCallback","useEffect","useRef","PolitenessLevel","POLITE","ASSERTIVE","useA11yAnnouncement","maxQueue","clearOnUnmount","arguments","length","undefined","announcements","setAnnouncements","isMounted","politeAnnouncementRef","assertiveAnnouncementRef","getUniqueId","Math","random","toString","substring","politeAnnouncementId","assertiveAnnouncementId","announce","message","politeness","prev","newQueue","id","timestamp","Date","getTime","slice","announcePolite","announceAssertive","latestAnnouncement","element","current","textContent","setTimeout","politeElement","document","getElementById","newElement","createElement","className","setAttribute","body","appendChild","assertiveElement","clearAnnouncements"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/hooks/a11y/useA11yAnnouncement.js"],"sourcesContent":["/**\n * Accessibility Announcement Hook\n * \n * A custom hook for managing accessibility announcements for screen readers.\n * Part of the zero technical debt accessibility implementation.\n * \n * @module hooks/a11y/useA11yAnnouncement\n */\n\nimport { useState, useCallback, useEffect, useRef } from 'react';\n\n/**\n * Enum for announcement politeness levels\n */\nexport const PolitenessLevel = {\n  POLITE: 'polite',\n  ASSERTIVE: 'assertive'\n};\n\n/**\n * Custom hook for managing screen reader announcements\n * \n * @param {Object} options - Configuration options\n * @param {number} [options.maxQueue=10] - Maximum queue size\n * @param {boolean} [options.clearOnUnmount=true] - Whether to clear announcements on unmount\n * @returns {Object} Object containing announcement functions and state\n */\nconst useA11yAnnouncement = ({\n  maxQueue = 10,\n  clearOnUnmount = true\n} = {}) => {\n  // Store announcements in a queue\n  const [announcements, setAnnouncements] = useState([]);\n  \n  // Track whether the component is mounted\n  const isMounted = useRef(true);\n\n  // Store announcement elements for direct access\n  const politeAnnouncementRef = useRef(null);\n  const assertiveAnnouncementRef = useRef(null);\n\n  /**\n   * Create a unique ID for announcement elements\n   */\n  const getUniqueId = useCallback(() => {\n    return `announcement-${Math.random().toString(36).substring(2, 11)}`;\n  }, []);\n\n  /**\n   * Generate the announcement element IDs if not already set\n   */\n  const politeAnnouncementId = useRef(getUniqueId());\n  const assertiveAnnouncementId = useRef(getUniqueId());\n\n  /**\n   * Add an announcement to the queue\n   */\n  const announce = useCallback((message, politeness = PolitenessLevel.POLITE) => {\n    if (!message || typeof message !== 'string') return;\n\n    setAnnouncements(prev => {\n      // Add new announcement to the queue\n      const newQueue = [\n        ...prev,\n        {\n          id: getUniqueId(),\n          message,\n          politeness,\n          timestamp: new Date().getTime()\n        }\n      ];\n\n      // Limit queue size\n      return newQueue.slice(-maxQueue);\n    });\n  }, [maxQueue, getUniqueId]);\n\n  /**\n   * Convenience method for polite announcements\n   */\n  const announcePolite = useCallback((message) => {\n    announce(message, PolitenessLevel.POLITE);\n  }, [announce]);\n\n  /**\n   * Convenience method for assertive announcements\n   */\n  const announceAssertive = useCallback((message) => {\n    announce(message, PolitenessLevel.ASSERTIVE);\n  }, [announce]);\n\n  /**\n   * Process the announcement queue\n   */\n  useEffect(() => {\n    if (announcements.length === 0) return;\n\n    // Get the latest announcement\n    const latestAnnouncement = announcements[announcements.length - 1];\n    \n    // Find the appropriate element\n    const element = latestAnnouncement.politeness === PolitenessLevel.ASSERTIVE\n      ? assertiveAnnouncementRef.current\n      : politeAnnouncementRef.current;\n    \n    // Update the announcement text\n    if (element) {\n      // Clear first, then set (required for some screen readers)\n      element.textContent = '';\n\n      // Use a timeout to ensure screen readers recognize the change\n      setTimeout(() => {\n        if (isMounted.current && element) {\n          element.textContent = latestAnnouncement.message;\n        }\n      }, 50);\n    }\n  }, [announcements]);\n\n  /**\n   * Create the announcement elements if they don't exist\n   */\n  useEffect(() => {\n    // Create elements if they don't exist\n    if (!politeAnnouncementRef.current) {\n      const politeElement = document.getElementById(politeAnnouncementId.current);\n      \n      if (politeElement) {\n        politeAnnouncementRef.current = politeElement;\n      } else {\n        const newElement = document.createElement('div');\n        newElement.id = politeAnnouncementId.current;\n        newElement.className = 'sr-only';\n        newElement.setAttribute('aria-live', 'polite');\n        newElement.setAttribute('aria-atomic', 'true');\n        document.body.appendChild(newElement);\n        politeAnnouncementRef.current = newElement;\n      }\n    }\n    \n    if (!assertiveAnnouncementRef.current) {\n      const assertiveElement = document.getElementById(assertiveAnnouncementId.current);\n      \n      if (assertiveElement) {\n        assertiveAnnouncementRef.current = assertiveElement;\n      } else {\n        const newElement = document.createElement('div');\n        newElement.id = assertiveAnnouncementId.current;\n        newElement.className = 'sr-only';\n        newElement.setAttribute('aria-live', 'assertive');\n        newElement.setAttribute('aria-atomic', 'true');\n        document.body.appendChild(newElement);\n        assertiveAnnouncementRef.current = newElement;\n      }\n    }\n    \n    return () => {\n      isMounted.current = false;\n      \n      // Clean up announcement elements if clearOnUnmount is true\n      if (clearOnUnmount) {\n        if (politeAnnouncementRef.current) {\n          politeAnnouncementRef.current.textContent = '';\n        }\n        \n        if (assertiveAnnouncementRef.current) {\n          assertiveAnnouncementRef.current.textContent = '';\n        }\n      }\n    };\n  }, [clearOnUnmount, politeAnnouncementId, assertiveAnnouncementId]);\n\n  /**\n   * Clear all announcements\n   */\n  const clearAnnouncements = useCallback(() => {\n    setAnnouncements([]);\n    \n    if (politeAnnouncementRef.current) {\n      politeAnnouncementRef.current.textContent = '';\n    }\n    \n    if (assertiveAnnouncementRef.current) {\n      assertiveAnnouncementRef.current.textContent = '';\n    }\n  }, []);\n\n  return {\n    announce,\n    announcePolite,\n    announceAssertive,\n    clearAnnouncements,\n    announcements,\n    politeAnnouncementId: politeAnnouncementId.current,\n    assertiveAnnouncementId: assertiveAnnouncementId.current\n  };\n};\n\nexport default useA11yAnnouncement;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}