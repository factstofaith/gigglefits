{"ast":null,"code":"/**\n * Guided Tour Component\n * \n * A component that provides step-by-step guided tours through different features of the application.\n * Tours can be configured with multiple steps, highlighting specific UI elements with descriptions.\n * \n * @component\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Button, Typography, Paper, Fade, IconButton, Backdrop, Portal, Tooltip, Dialog, DialogTitle, DialogContent, DialogActions, LinearProgress } from '@mui/material';\nimport { Close as CloseIcon, NavigateNext as NextIcon, NavigateBefore as PrevIcon, Info as InfoIcon, CheckCircle as CheckCircleIcon, Cancel as CancelIcon } from '@mui/icons-material';\n\n// Store tour state in localStorage to resume interrupted tours\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst STORAGE_KEY = 'tap_guided_tours';\n\n/**\n * Calculate position for the tour spotlight\n * @param {HTMLElement} element - DOM element to highlight\n * @returns {Object} Position object with coordinates and dimensions\n */\nconst calculateElementPosition = element => {\n  if (!element) return null;\n  const rect = element.getBoundingClientRect();\n  const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n  const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n  return {\n    top: rect.top + scrollTop,\n    left: rect.left + scrollLeft,\n    width: rect.width,\n    height: rect.height,\n    bottom: rect.bottom + scrollTop,\n    right: rect.right + scrollLeft,\n    centerX: rect.left + scrollLeft + rect.width / 2,\n    centerY: rect.top + scrollTop + rect.height / 2\n  };\n};\n\n/**\n * Calculate the best position for the tooltip based on element position\n * @param {Object} elementPosition - Element position object\n * @param {number} tooltipWidth - Width of the tooltip\n * @param {number} tooltipHeight - Height of the tooltip\n * @returns {Object} Position object for the tooltip\n */\nconst calculateTooltipPosition = function (elementPosition) {\n  let tooltipWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 320;\n  let tooltipHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;\n  if (!elementPosition) return {\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)'\n  };\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n\n  // Try to position below the element first\n  let position = {\n    top: elementPosition.bottom + 10,\n    left: elementPosition.centerX - tooltipWidth / 2\n  };\n\n  // Check if tooltip would go off-screen to the right\n  if (position.left + tooltipWidth > windowWidth - 20) {\n    position.left = windowWidth - tooltipWidth - 20;\n  }\n\n  // Check if tooltip would go off-screen to the left\n  if (position.left < 20) {\n    position.left = 20;\n  }\n\n  // If positioning below would go off-screen, try above\n  if (position.top + tooltipHeight > windowHeight - 20) {\n    position = {\n      top: elementPosition.top - tooltipHeight - 10,\n      left: position.left\n    };\n\n    // If still doesn't fit, position to the right or left of the element\n    if (position.top < 20) {\n      // Try right first\n      if (elementPosition.right + tooltipWidth < windowWidth - 20) {\n        position = {\n          top: elementPosition.centerY - tooltipHeight / 2,\n          left: elementPosition.right + 10\n        };\n      }\n      // Try left if right doesn't work\n      else if (elementPosition.left - tooltipWidth > 20) {\n        position = {\n          top: elementPosition.centerY - tooltipHeight / 2,\n          left: elementPosition.left - tooltipWidth - 10\n        };\n      }\n      // Default to center of screen if all else fails\n      else {\n        position = {\n          top: windowHeight / 2 - tooltipHeight / 2,\n          left: windowWidth / 2 - tooltipWidth / 2\n        };\n      }\n    }\n  }\n  return position;\n};\n\n/**\n * Tour Spotlight component to highlight UI elements\n * @param {Object} props - Component props \n * @returns {JSX.Element} Tour spotlight component\n */\nconst TourSpotlight = _ref => {\n  let {\n    elementSelector,\n    visible,\n    pulse\n  } = _ref;\n  const [position, setPosition] = useState(null);\n  useEffect(() => {\n    if (!visible) return;\n    const updatePosition = () => {\n      const element = document.querySelector(elementSelector);\n      if (element) {\n        setPosition(calculateElementPosition(element));\n\n        // Scroll element into view if needed\n        const rect = element.getBoundingClientRect();\n        const isInViewport = rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n        if (!isInViewport) {\n          element.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n        }\n      }\n    };\n    updatePosition();\n\n    // Update position on window resize\n    window.addEventListener('resize', updatePosition);\n    return () => {\n      window.removeEventListener('resize', updatePosition);\n    };\n  }, [elementSelector, visible]);\n  if (!visible || !position) return null;\n  return /*#__PURE__*/_jsx(Box, {\n    sx: {\n      position: 'absolute',\n      top: position.top,\n      left: position.left,\n      width: position.width,\n      height: position.height,\n      boxShadow: '0 0 0 9999px rgba(0,0,0,0.7)',\n      borderRadius: '4px',\n      zIndex: 9998,\n      pointerEvents: 'none',\n      '&::after': pulse ? {\n        content: '\"\"',\n        position: 'absolute',\n        top: -4,\n        left: -4,\n        right: -4,\n        bottom: -4,\n        border: '2px solid',\n        borderColor: 'primary.main',\n        borderRadius: '6px',\n        animation: 'pulse 1.5s infinite'\n      } : {}\n    }\n  });\n};\n\n/**\n * Tour Tooltip component to display step information\n * @param {Object} props - Component props\n * @returns {JSX.Element} Tour tooltip component\n */\nconst TourTooltip = _ref2 => {\n  let {\n    step,\n    totalSteps,\n    title,\n    content,\n    position,\n    onNext,\n    onPrev,\n    onClose,\n    onSkip\n  } = _ref2;\n  return /*#__PURE__*/_jsxs(Paper, {\n    elevation: 4,\n    sx: {\n      position: 'absolute',\n      top: (position === null || position === void 0 ? void 0 : position.top) || '50%',\n      left: (position === null || position === void 0 ? void 0 : position.left) || '50%',\n      width: 320,\n      maxWidth: 'calc(100vw - 40px)',\n      transform: position ? 'none' : 'translate(-50%, -50%)',\n      zIndex: 9999,\n      overflow: 'hidden',\n      borderRadius: 2\n    },\n    children: [/*#__PURE__*/_jsxs(Box, {\n      sx: {\n        bgcolor: 'primary.main',\n        color: 'primary.contrastText',\n        p: 1.5,\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"subtitle1\",\n        sx: {\n          fontWeight: 'medium'\n        },\n        children: title || 'Guided Tour'\n      }), /*#__PURE__*/_jsx(Box, {\n        children: /*#__PURE__*/_jsx(IconButton, {\n          size: \"small\",\n          color: \"inherit\",\n          onClick: onClose,\n          \"aria-label\": \"Close tour\",\n          children: /*#__PURE__*/_jsx(CloseIcon, {\n            fontSize: \"small\"\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Box, {\n      sx: {\n        p: 2,\n        pb: 1\n      },\n      children: /*#__PURE__*/_jsx(Typography, {\n        variant: \"body2\",\n        children: content\n      })\n    }), /*#__PURE__*/_jsx(Box, {\n      sx: {\n        px: 1,\n        py: 0.5\n      },\n      children: /*#__PURE__*/_jsx(LinearProgress, {\n        variant: \"determinate\",\n        value: step / totalSteps * 100,\n        sx: {\n          height: 4,\n          mb: 1\n        }\n      })\n    }), /*#__PURE__*/_jsxs(Box, {\n      sx: {\n        p: 1.5,\n        display: 'flex',\n        justifyContent: 'space-between',\n        borderTop: '1px solid',\n        borderColor: 'divider'\n      },\n      children: [/*#__PURE__*/_jsx(Button, {\n        onClick: onSkip,\n        size: \"small\",\n        sx: {\n          minWidth: 'auto'\n        },\n        children: \"Skip\"\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          gap: 1\n        },\n        children: [step > 1 && /*#__PURE__*/_jsx(Button, {\n          onClick: onPrev,\n          variant: \"outlined\",\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsx(PrevIcon, {}),\n          children: \"Back\"\n        }), /*#__PURE__*/_jsx(Button, {\n          onClick: onNext,\n          variant: \"contained\",\n          color: \"primary\",\n          size: \"small\",\n          endIcon: step < totalSteps ? /*#__PURE__*/_jsx(NextIcon, {}) : /*#__PURE__*/_jsx(CheckCircleIcon, {}),\n          children: step < totalSteps ? 'Next' : 'Finish'\n        })]\n      })]\n    })]\n  });\n};\n\n/**\n * Tour selection dialog component\n * @param {Object} props - Component props\n * @returns {JSX.Element} Tour selection dialog\n */\nconst TourSelectionDialog = _ref3 => {\n  let {\n    open,\n    onClose,\n    tours,\n    onSelectTour\n  } = _ref3;\n  return /*#__PURE__*/_jsxs(Dialog, {\n    open: open,\n    onClose: onClose,\n    maxWidth: \"sm\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxs(DialogTitle, {\n      children: [\"Available Guided Tours\", /*#__PURE__*/_jsx(IconButton, {\n        \"aria-label\": \"close\",\n        onClick: onClose,\n        sx: {\n          position: 'absolute',\n          right: 8,\n          top: 8,\n          color: theme => theme.palette.grey[500]\n        },\n        children: /*#__PURE__*/_jsx(CloseIcon, {})\n      })]\n    }), /*#__PURE__*/_jsxs(DialogContent, {\n      dividers: true,\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"body2\",\n        paragraph: true,\n        children: \"Select a guided tour to learn about different features of the application.\"\n      }), tours.map(tour => /*#__PURE__*/_jsxs(Paper, {\n        elevation: 0,\n        sx: {\n          p: 2,\n          mb: 2,\n          border: '1px solid',\n          borderColor: 'divider',\n          borderRadius: 1,\n          cursor: 'pointer',\n          transition: 'all 0.2s',\n          '&:hover': {\n            bgcolor: 'action.hover',\n            borderColor: 'primary.light'\n          }\n        },\n        onClick: () => onSelectTour(tour.id),\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle1\",\n          sx: {\n            mb: 0.5\n          },\n          children: tour.title\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: tour.description\n        }), /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            mt: 1,\n            color: 'text.secondary',\n            fontSize: '0.75rem'\n          },\n          children: [/*#__PURE__*/_jsx(InfoIcon, {\n            sx: {\n              fontSize: '0.875rem',\n              mr: 0.5\n            }\n          }), tour.steps.length, \" steps \\u2022 \", tour.duration, \" min\"]\n        })]\n      }, tour.id))]\n    }), /*#__PURE__*/_jsx(DialogActions, {\n      children: /*#__PURE__*/_jsx(Button, {\n        onClick: onClose,\n        children: \"Close\"\n      })\n    })]\n  });\n};\n\n/**\n * GuidedTour component\n * @param {Object} props - Component props\n * @returns {JSX.Element} The GuidedTour component\n */\nconst GuidedTour = _ref4 => {\n  let {\n    tours,\n    activeTourId,\n    onTourComplete,\n    onTourSkip,\n    autoStart = false\n  } = _ref4;\n  const [isActive, setIsActive] = useState(false);\n  const [currentTourId, setCurrentTourId] = useState(null);\n  const [currentStep, setCurrentStep] = useState(1);\n  const [tooltipPosition, setTooltipPosition] = useState(null);\n  const [showTourSelector, setShowTourSelector] = useState(false);\n  const [completedTours, setCompletedTours] = useState([]);\n\n  // Find current tour data\n  const currentTour = tours.find(tour => tour.id === currentTourId);\n  const currentStepData = currentTour === null || currentTour === void 0 ? void 0 : currentTour.steps[currentStep - 1];\n\n  // Load completed tours from localStorage\n  useEffect(() => {\n    try {\n      const storedData = localStorage.getItem(STORAGE_KEY);\n      if (storedData) {\n        const parsedData = JSON.parse(storedData);\n        setCompletedTours(parsedData.completedTours || []);\n\n        // Check for interrupted tour\n        if (parsedData.interrupted && autoStart) {\n          setCurrentTourId(parsedData.tourId);\n          setCurrentStep(parsedData.step);\n          setIsActive(true);\n        }\n      }\n    } catch (error) {\n      console.error('Error loading tour data:', error);\n    }\n  }, [autoStart]);\n\n  // Save tour state to localStorage\n  const saveTourState = useCallback(function (tourId, step) {\n    let interrupted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify({\n        tourId,\n        step,\n        interrupted,\n        completedTours\n      }));\n    } catch (error) {\n      console.error('Error saving tour state:', error);\n    }\n  }, [completedTours]);\n\n  // Start a tour\n  const startTour = useCallback(tourId => {\n    const tour = tours.find(t => t.id === tourId);\n    if (!tour) return;\n    setCurrentTourId(tourId);\n    setCurrentStep(1);\n    setIsActive(true);\n    saveTourState(tourId, 1, true);\n    setShowTourSelector(false);\n  }, [tours, saveTourState]);\n\n  // Move to next step\n  const nextStep = useCallback(() => {\n    if (!currentTour) return;\n    if (currentStep < currentTour.steps.length) {\n      const newStep = currentStep + 1;\n      setCurrentStep(newStep);\n      saveTourState(currentTourId, newStep, true);\n    } else {\n      // Tour complete\n      const newCompletedTours = [...completedTours, currentTourId];\n      setCompletedTours(newCompletedTours);\n      setIsActive(false);\n      saveTourState(null, 1, false);\n      if (onTourComplete) {\n        onTourComplete(currentTourId);\n      }\n    }\n  }, [currentTour, currentStep, currentTourId, completedTours, saveTourState, onTourComplete]);\n\n  // Move to previous step\n  const prevStep = useCallback(() => {\n    if (currentStep > 1) {\n      const newStep = currentStep - 1;\n      setCurrentStep(newStep);\n      saveTourState(currentTourId, newStep, true);\n    }\n  }, [currentStep, currentTourId, saveTourState]);\n\n  // Close the tour\n  const closeTour = useCallback(() => {\n    setIsActive(false);\n    saveTourState(null, 1, false);\n  }, [saveTourState]);\n\n  // Skip the tour\n  const skipTour = useCallback(() => {\n    setIsActive(false);\n    saveTourState(null, 1, false);\n    if (onTourSkip) {\n      onTourSkip(currentTourId, currentStep);\n    }\n  }, [currentTourId, currentStep, saveTourState, onTourSkip]);\n\n  // Open tour selector\n  const openTourSelector = useCallback(() => {\n    setShowTourSelector(true);\n  }, []);\n\n  // Update element position when step changes\n  useEffect(() => {\n    if (!isActive || !currentStepData) return;\n    const updateTooltipPosition = () => {\n      if (currentStepData.elementSelector) {\n        const element = document.querySelector(currentStepData.elementSelector);\n        if (element) {\n          const elementPosition = calculateElementPosition(element);\n          const position = calculateTooltipPosition(elementPosition, 320, 200);\n          setTooltipPosition(position);\n        } else {\n          // Element not found, use default position\n          setTooltipPosition({\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)'\n          });\n        }\n      } else {\n        // No element to highlight, use default position\n        setTooltipPosition({\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)'\n        });\n      }\n    };\n\n    // Update position after a short delay to allow for DOM updates\n    const timer = setTimeout(updateTooltipPosition, 100);\n    return () => clearTimeout(timer);\n  }, [isActive, currentStepData, currentStep]);\n\n  // Auto start tour if specified\n  useEffect(() => {\n    if (activeTourId && !isActive && autoStart) {\n      startTour(activeTourId);\n    }\n  }, [activeTourId, isActive, autoStart, startTour]);\n\n  // Render the tour components when active\n  if (isActive && currentTour && currentStepData) {\n    return /*#__PURE__*/_jsxs(Portal, {\n      children: [currentStepData.overlay && /*#__PURE__*/_jsx(Backdrop, {\n        open: true,\n        sx: {\n          zIndex: 9997,\n          bgcolor: 'rgba(0,0,0,0.7)'\n        },\n        onClick: currentStepData.clickThrough ? null : e => e.stopPropagation()\n      }), currentStepData.elementSelector && /*#__PURE__*/_jsx(TourSpotlight, {\n        elementSelector: currentStepData.elementSelector,\n        visible: isActive,\n        pulse: currentStepData.pulse\n      }), /*#__PURE__*/_jsx(Fade, {\n        in: isActive,\n        children: /*#__PURE__*/_jsx(TourTooltip, {\n          step: currentStep,\n          totalSteps: currentTour.steps.length,\n          title: currentTour.title,\n          content: currentStepData.content,\n          position: tooltipPosition,\n          onNext: nextStep,\n          onPrev: prevStep,\n          onClose: closeTour,\n          onSkip: skipTour\n        })\n      })]\n    });\n  }\n\n  // Tour selection dialog\n  return /*#__PURE__*/_jsx(TourSelectionDialog, {\n    open: showTourSelector,\n    onClose: () => setShowTourSelector(false),\n    tours: tours,\n    onSelectTour: startTour\n  });\n};\n// Add custom CSS for animations\nconst styleEl = document.createElement('style');\nstyleEl.textContent = `\n  @keyframes pulse {\n    0% {\n      opacity: 1;\n      transform: scale(1);\n    }\n    50% {\n      opacity: 0.6;\n      transform: scale(1.05);\n    }\n    100% {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n`;\ndocument.head.appendChild(styleEl);\nexport default GuidedTour;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}