{"ast":null,"code":"// App.jsx\n// -----------------------------------------------------------------------------\n// Main application component with routing and context providers\n// Enhanced with accessibility features and standardized layouts\n\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Box, CircularProgress, ThemeProvider, KeyboardArrowUpIcon } from \"./design-system/optimized\";\n\n// Common components\nimport { NotificationProvider } from \"./contexts/NotificationContext\";\nimport KeyboardShortcutsHelp from \"./components/common/KeyboardShortcutsHelp\";\nimport HelpButton from \"./components/common/HelpButton\";\n\n// Context providers\nimport { UserProvider } from \"./contexts/UserContext\";\nimport { SettingsProvider } from \"./contexts/SettingsContext\";\nimport { IntegrationProvider } from \"./contexts/IntegrationContext\";\nimport { EarningsProvider } from \"./contexts/EarningsContext\";\nimport { ResourceProvider } from \"./contexts/ResourceContext\";\nimport { WebhookProvider } from \"./contexts/WebhookContext\";\nimport { BreadcrumbProvider } from \"./contexts/BreadcrumbContext\";\nimport { KeyboardShortcutsProvider } from \"./contexts/KeyboardShortcutsContext\";\nimport { HelpProvider } from \"./contexts/HelpContext\";\n\n// Centralized routes with lazy loading\nimport AppRoutes from \"./AppRoutes\";\n\n// Common components\nimport Navigation from \"./components/common/Navigation\";\n\n// Accessibility utilities\nimport { useSkipNav } from \"./utils/accessibilityUtils\";\n\n/**\n * Scroll to top component for long pages\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction ScrollToTop() {\n  ScrollToTop.displayName = 'ScrollToTop';\n  const [visible, setVisible] = useState(false);\n\n  // Handle scroll events\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollY = window.scrollY;\n      if (scrollY > 100) {\n        setVisible(true);\n      } else {\n        setVisible(false);\n      }\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  const handleClick = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n  if (!visible) return null;\n  return /*#__PURE__*/_jsx(Box, {\n    onClick: handleClick,\n    role: \"presentation\",\n    position: \"fixed\",\n    bottom: 16,\n    right: 16,\n    zIndex: 1000,\n    style: {\n      opacity: visible ? 1 : 0,\n      transition: 'opacity 0.3s',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: 40,\n      height: 40,\n      borderRadius: '50%',\n      backgroundColor: 'primary',\n      color: 'white',\n      cursor: 'pointer',\n      boxShadow: '0 2px 10px rgba(0,0,0,0.2)'\n    },\n    \"aria-label\": \"scroll back to top\",\n    children: /*#__PURE__*/_jsx(KeyboardArrowUpIcon, {})\n  });\n}\nfunction App() {\n  App.displayName = 'App';\n\n  // Add skip navigation functionality\n  useSkipNav('main-content');\n\n  // Set page title and lang attribute on mount\n  useEffect(() => {\n    // Set application language (can be dynamic based on user preferences)\n    document.documentElement.lang = 'en';\n\n    // Set default page title (can be updated by page components)\n    document.title = 'TAP Integration Platform';\n\n    // Initialize modal root div for portals if not exists\n    if (!document.getElementById('modal-root')) {\n      const modalRoot = document.createElement('div');\n      modalRoot.id = 'modal-root';\n      document.body.appendChild(modalRoot);\n    }\n\n    // Create screen reader announcer if it doesn't exist\n    if (!document.getElementById('sr-announcer')) {\n      const announcer = document.createElement('div');\n      announcer.id = 'sr-announcer';\n      announcer.setAttribute('aria-live', 'polite');\n      announcer.setAttribute('aria-atomic', 'true');\n      announcer.setAttribute('role', 'status');\n      announcer.style.position = 'absolute';\n      announcer.style.width = '1px';\n      announcer.style.height = '1px';\n      announcer.style.overflow = 'hidden';\n      announcer.style.clip = 'rect(0, 0, 0, 0)';\n      announcer.style.whiteSpace = 'nowrap';\n      document.body.appendChild(announcer);\n    }\n    return () => {\n      // Cleanup is not strictly necessary here since App is the root,\n      // but included for completeness\n      const modalRoot = document.getElementById('modal-root');\n      const announcer = document.getElementById('sr-announcer');\n      if (modalRoot) document.body.removeChild(modalRoot);\n      if (announcer) document.body.removeChild(announcer);\n    };\n  }, []);\n  return /*#__PURE__*/_jsx(ThemeProvider, {\n    initialMode: \"light\",\n    children: /*#__PURE__*/_jsx(SettingsProvider, {\n      children: /*#__PURE__*/_jsx(UserProvider, {\n        children: /*#__PURE__*/_jsx(NotificationProvider, {\n          children: /*#__PURE__*/_jsx(KeyboardShortcutsProvider, {\n            children: /*#__PURE__*/_jsx(IntegrationProvider, {\n              children: /*#__PURE__*/_jsx(EarningsProvider, {\n                children: /*#__PURE__*/_jsx(ResourceProvider, {\n                  children: /*#__PURE__*/_jsx(WebhookProvider, {\n                    children: /*#__PURE__*/_jsx(HelpProvider, {\n                      children: /*#__PURE__*/_jsx(Router, {\n                        children: /*#__PURE__*/_jsxs(BreadcrumbProvider, {\n                          children: [/*#__PURE__*/_jsx(\"a\", {\n                            href: \"#main-content\",\n                            className: \"skip-nav\",\n                            style: {\n                              position: 'absolute',\n                              top: '-40px',\n                              left: 0,\n                              backgroundColor: 'primary',\n                              color: 'white',\n                              padding: '8px',\n                              zIndex: 2000,\n                              transition: 'top 0.2s'\n                            },\n                            onFocus: e => {\n                              e.target.style.top = '0';\n                            },\n                            onBlur: e => {\n                              e.target.style.top = '-40px';\n                            },\n                            children: \"Skip to main content\"\n                          }), /*#__PURE__*/_jsx(Navigation, {}), /*#__PURE__*/_jsx(Box, {\n                            component: \"main\",\n                            id: \"main-content\",\n                            tabIndex: \"-1\",\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            minHeight: \"calc(100vh - 64px)\" // Accounting for app bar height\n                            ,\n                            style: {\n                              outline: 'none' // Remove focus outline for tabIndex\n                            },\n                            children: /*#__PURE__*/_jsx(AppRoutes, {})\n                          }), /*#__PURE__*/_jsx(KeyboardShortcutsHelp, {}), /*#__PURE__*/_jsx(ScrollToTop, {}), /*#__PURE__*/_jsx(HelpButton, {})]\n                        })\n                      })\n                    })\n                  })\n                })\n              })\n            })\n          })\n        })\n      })\n    })\n  });\n}\nexport default App;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}