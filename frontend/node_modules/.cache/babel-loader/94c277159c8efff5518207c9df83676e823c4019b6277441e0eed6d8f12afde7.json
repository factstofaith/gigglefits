{"ast":null,"code":"/**\n * S3 Configuration Component\n *\n * A comprehensive component for configuring Amazon S3 as a data source.\n * Includes credential management, bucket browsing, and S3 object selection.\n * \n * @component\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Button, Card, CardContent, CardHeader, CircularProgress, Divider, Grid, IconButton, Paper, TextField, Tooltip, Typography, Alert, Stack, Chip, Accordion, AccordionSummary, AccordionDetails } from '@mui/material';\n\n// Icons\nimport { ExpandMore as ExpandMoreIcon, Refresh as RefreshIcon, CloudDone as CloudDoneIcon, Info as InfoIcon, Error as ErrorIcon, CheckCircle as CheckCircleIcon, Storage as StorageIcon, InsertDriveFile as FileIcon } from '@mui/icons-material';\n\n// Components\nimport S3CredentialManager from \"./s3/S3CredentialManager\";\nimport S3BucketBrowser from \"./s3/S3BucketBrowser\";\n\n// Utils\nimport { generateFileMetadata } from \"../../utils/fileTypeUtils\";\n\n/**\n * Format file size to human-readable format\n * @param {number} bytes - Size in bytes\n * @returns {string} Formatted size string\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n/**\n * Format date to readable string\n * @param {string} dateString - ISO date string\n * @returns {string} Formatted date string\n */\nconst formatDate = dateString => {\n  if (!dateString) return 'Unknown';\n  const date = new Date(dateString);\n  return date.toLocaleString();\n};\n\n/**\n * S3Configuration component for configuring S3 as a data source\n * \n * @param {Object} props - Component props\n * @returns {JSX.Element} The S3Configuration component\n */\nconst S3Configuration = _ref => {\n  let {\n    onChange,\n    value,\n    readOnly = false\n  } = _ref;\n  // State for configuration\n  const [config, setConfig] = useState({\n    credentials: null,\n    region: 'us-east-1',\n    bucket: '',\n    path: '',\n    selectedObject: null\n  });\n\n  // Browser visibility state\n  const [showBrowser, setShowBrowser] = useState(false);\n\n  // Loading state\n  const [loading, setLoading] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState(null);\n\n  // Error state\n  const [error, setError] = useState(null);\n\n  // Initialize config from props\n  useEffect(() => {\n    if (value) {\n      setConfig(prevConfig => ({\n        ...prevConfig,\n        ...value\n      }));\n    }\n  }, [value]);\n\n  /**\n   * Handle credentials change from the credential manager\n   */\n  const handleCredentialsChange = useCallback(credentials => {\n    setConfig(prev => {\n      const updated = {\n        ...prev,\n        credentials,\n        region: (credentials === null || credentials === void 0 ? void 0 : credentials.region) || prev.region\n      };\n      if (onChange) {\n        onChange(updated);\n      }\n      return updated;\n    });\n\n    // Show the browser when credentials are saved\n    if (credentials) {\n      setShowBrowser(true);\n    }\n  }, [onChange]);\n\n  /**\n   * Handle bucket selection from the browser\n   */\n  const handleBucketSelect = useCallback(bucketName => {\n    setConfig(prev => {\n      const updated = {\n        ...prev,\n        bucket: bucketName,\n        path: '',\n        selectedObject: null\n      };\n      if (onChange) {\n        onChange(updated);\n      }\n      return updated;\n    });\n  }, [onChange]);\n\n  /**\n   * Handle object selection from the browser\n   */\n  const handleObjectSelect = useCallback(objectInfo => {\n    setConfig(prev => {\n      const updated = {\n        ...prev,\n        bucket: objectInfo.bucketName,\n        path: objectInfo.key,\n        selectedObject: objectInfo\n      };\n      if (onChange) {\n        onChange(updated);\n      }\n      return updated;\n    });\n  }, [onChange]);\n\n  /**\n   * Test the S3 connection\n   */\n  const testConnection = useCallback(async () => {\n    if (!config.credentials || !config.bucket) {\n      setError('Credentials and bucket are required to test connection');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    setConnectionStatus(null);\n    try {\n      // Simulate API call for development environment\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Simulated successful response\n      const success = Math.random() > 0.2; // 80% chance of success\n\n      if (success) {\n        setConnectionStatus({\n          success: true,\n          message: 'Successfully connected to S3 bucket',\n          details: {\n            bucket: config.bucket,\n            region: config.region,\n            objectsCount: Math.floor(Math.random() * 100) + 1,\n            lastAccessed: new Date().toISOString()\n          }\n        });\n      } else {\n        // Simulated error\n        const errorTypes = ['Access Denied', 'Bucket Not Found', 'Network Error', 'Configuration Error'];\n        const errorType = errorTypes[Math.floor(Math.random() * errorTypes.length)];\n        setConnectionStatus({\n          success: false,\n          message: `Failed to connect to S3 bucket: ${errorType}`,\n          details: {\n            error: errorType,\n            code: `S3Error${errorType.replace(/\\s/g, '')}`\n          }\n        });\n        setError(`Failed to connect to S3 bucket: ${errorType}`);\n      }\n    } catch (err) {\n      console.error('Error testing S3 connection:', err);\n      setError(err.message || 'An unexpected error occurred during connection test');\n      setConnectionStatus({\n        success: false,\n        message: 'Connection test failed',\n        details: {\n          error: err.message\n        }\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [config.bucket, config.credentials, config.region]);\n\n  // Prepare the browser config from the credentials\n  const browserConfig = {\n    region: config.region,\n    credentials: config.credentials\n  };\n  return /*#__PURE__*/_jsxs(Box, {\n    children: [/*#__PURE__*/_jsx(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Amazon S3 Configuration\"\n    }), /*#__PURE__*/_jsx(Alert, {\n      severity: \"info\",\n      sx: {\n        mb: 3\n      },\n      children: \"Configure connection to Amazon S3 for accessing and using S3 objects as data sources. First, set up your AWS credentials, then browse and select a bucket or specific object.\"\n    }), /*#__PURE__*/_jsxs(Accordion, {\n      defaultExpanded: true,\n      children: [/*#__PURE__*/_jsx(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsx(ExpandMoreIcon, {}),\n        \"aria-controls\": \"credentials-content\",\n        id: \"credentials-header\",\n        children: /*#__PURE__*/_jsxs(Typography, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsx(StorageIcon, {\n            sx: {\n              mr: 1\n            }\n          }), \"Step 1: Configure AWS Credentials\"]\n        })\n      }), /*#__PURE__*/_jsx(AccordionDetails, {\n        children: /*#__PURE__*/_jsx(S3CredentialManager, {\n          onCredentialsSaved: handleCredentialsChange,\n          onCredentialsLoaded: handleCredentialsChange,\n          readOnly: readOnly,\n          showSaveControls: true,\n          initialVisible: true\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Accordion, {\n      expanded: showBrowser,\n      onChange: () => setShowBrowser(!showBrowser),\n      disabled: !config.credentials,\n      children: [/*#__PURE__*/_jsx(AccordionSummary, {\n        expandIcon: /*#__PURE__*/_jsx(ExpandMoreIcon, {}),\n        \"aria-controls\": \"browser-content\",\n        id: \"browser-header\",\n        children: /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            width: '100%',\n            mr: 2\n          },\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsx(FileIcon, {\n              sx: {\n                mr: 1\n              }\n            }), \"Step 2: Select S3 Bucket or Object\"]\n          }), config.bucket && /*#__PURE__*/_jsx(Chip, {\n            label: config.bucket,\n            color: \"primary\",\n            size: \"small\",\n            variant: \"outlined\",\n            onClick: e => {\n              e.stopPropagation();\n              setShowBrowser(true);\n            }\n          })]\n        })\n      }), /*#__PURE__*/_jsx(AccordionDetails, {\n        children: config.credentials ? /*#__PURE__*/_jsx(S3BucketBrowser, {\n          config: browserConfig,\n          onSelectBucket: handleBucketSelect,\n          onSelectObject: handleObjectSelect,\n          readOnly: readOnly,\n          selectedBucket: config.bucket,\n          selectedPrefix: config.path ? config.path.substring(0, config.path.lastIndexOf('/') + 1) : ''\n        }) : /*#__PURE__*/_jsx(Alert, {\n          severity: \"warning\",\n          children: \"You need to configure and save AWS credentials first.\"\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Card, {\n      variant: \"outlined\",\n      sx: {\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsx(CardHeader, {\n        title: \"Configuration Summary\",\n        action: /*#__PURE__*/_jsx(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          disabled: !config.credentials || !config.bucket || loading || readOnly,\n          onClick: testConnection,\n          startIcon: loading ? /*#__PURE__*/_jsx(CircularProgress, {\n            size: 20\n          }) : /*#__PURE__*/_jsx(RefreshIcon, {}),\n          size: \"small\",\n          children: \"Test Connection\"\n        })\n      }), /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsxs(CardContent, {\n        children: [/*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxs(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: [/*#__PURE__*/_jsxs(Box, {\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"AWS Region\"\n              }), /*#__PURE__*/_jsx(Typography, {\n                variant: \"body2\",\n                children: config.region || 'Not configured'\n              })]\n            }), /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"S3 Bucket\"\n              }), /*#__PURE__*/_jsx(Typography, {\n                variant: \"body2\",\n                children: config.bucket || 'No bucket selected'\n              })]\n            }), /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Object Path\"\n              }), /*#__PURE__*/_jsx(Typography, {\n                variant: \"body2\",\n                children: config.path || 'No specific object selected'\n              })]\n            }), /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Credentials Status\"\n              }), /*#__PURE__*/_jsx(Chip, {\n                label: config.credentials ? \"Configured\" : \"Not Configured\",\n                color: config.credentials ? \"success\" : \"default\",\n                size: \"small\",\n                icon: config.credentials ? /*#__PURE__*/_jsx(CheckCircleIcon, {}) : /*#__PURE__*/_jsx(InfoIcon, {})\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(Grid, {\n            item: true,\n            xs: 12,\n            md: 6,\n            children: [config.selectedObject && /*#__PURE__*/_jsxs(Box, {\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Selected Object\"\n              }), /*#__PURE__*/_jsx(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: (() => {\n                  const FileCard = require(\"../common/FileCard\").default;\n\n                  // Create a file-like object from the S3 object info\n                  const fileObj = {\n                    name: config.selectedObject.key.split('/').pop(),\n                    type: config.selectedObject.contentType || '',\n                    size: config.selectedObject.size || 0,\n                    lastModified: config.selectedObject.lastModified || new Date().toISOString()\n                  };\n\n                  // Generate metadata\n                  const metadata = generateFileMetadata(fileObj);\n                  return /*#__PURE__*/_jsx(FileCard, {\n                    file: fileObj,\n                    metadata: metadata,\n                    showPreview: false,\n                    variant: \"outlined\"\n                  });\n                })()\n              })]\n            }), connectionStatus && /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Connection Test Result\"\n              }), /*#__PURE__*/_jsxs(Alert, {\n                severity: connectionStatus.success ? \"success\" : \"error\",\n                icon: connectionStatus.success ? /*#__PURE__*/_jsx(CloudDoneIcon, {}) : /*#__PURE__*/_jsx(ErrorIcon, {}),\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"body2\",\n                  children: connectionStatus.message\n                }), connectionStatus.details && connectionStatus.success && /*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    mt: 1,\n                    fontSize: '0.875rem'\n                  },\n                  children: [/*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body2\",\n                    component: \"div\",\n                    children: [/*#__PURE__*/_jsx(\"strong\", {\n                      children: \"Bucket:\"\n                    }), \" \", connectionStatus.details.bucket]\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body2\",\n                    component: \"div\",\n                    children: [/*#__PURE__*/_jsx(\"strong\", {\n                      children: \"Region:\"\n                    }), \" \", connectionStatus.details.region]\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body2\",\n                    component: \"div\",\n                    children: [/*#__PURE__*/_jsx(\"strong\", {\n                      children: \"Objects:\"\n                    }), \" \", connectionStatus.details.objectsCount]\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body2\",\n                    component: \"div\",\n                    children: [/*#__PURE__*/_jsx(\"strong\", {\n                      children: \"Last Accessed:\"\n                    }), \" \", formatDate(connectionStatus.details.lastAccessed)]\n                  })]\n                })]\n              })]\n            })]\n          })]\n        }), error && /*#__PURE__*/_jsx(Alert, {\n          severity: \"error\",\n          sx: {\n            mt: 2\n          },\n          children: error\n        })]\n      })]\n    })]\n  });\n};\nexport default S3Configuration;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}