{"ast":null,"code":"/**\n * Flow Canvas Component\n *\n * A drag-and-drop canvas for building integration flows using React Flow.\n * This component provides the foundation for the flow-based integration\n * interface, allowing users to add, connect, and configure nodes visually.\n *\n * @component\n */import React,{useState,useRef,useCallback,useEffect}from'react';import ReactFlow,{Background,Controls,MiniMap,addEdge,applyEdgeChanges,applyNodeChanges,isNode,isEdge,ReactFlowProvider,useReactFlow}from'reactflow';import'reactflow/dist/style.css';import{Box,Paper,Toolbar,IconButton,Tooltip,Divider,Button,Menu,MenuItem,Typography,Snackbar,Alert}from'@mui/material';import{ZoomIn as ZoomInIcon,ZoomOut as ZoomOutIcon,Add as AddIcon,Delete as DeleteIcon,SaveAlt as SaveIcon,Undo as UndoIcon,Redo as RedoIcon,FitScreen as FitScreenIcon,Lock as LockIcon,LockOpen as LockOpenIcon,Create as CreateIcon,PlayArrow as PlayIcon,Settings as SettingsIcon,MoreVert as MoreVertIcon}from'@mui/icons-material';// Node types will be imported and registered here\nimport SourceNode from\"./nodes/SourceNode\";import DestinationNode from\"./nodes/DestinationNode\";import TransformationNode from\"./nodes/TransformationNode\";import FilterNode from\"./nodes/FilterNode\";// Custom edge\nimport FlowEdge from\"./edges/FlowEdge\";// Import validation utilities\nimport{validateConnection,validateFlow,validateFlowForExecution}from\"./validation/connection-validation\";// Default flow styling\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const defaultFlowStyle={background:'#f7f7f7'};// Register custom node types\nconst nodeTypes={sourceNode:SourceNode,destinationNode:DestinationNode,transformationNode:TransformationNode,filterNode:FilterNode};// Register custom edge types\nconst edgeTypes={flowEdge:FlowEdge};// Default node configuration\nconst DEFAULT_NODE={sourceNode:{type:'sourceNode',data:{label:'Source',sourceType:'default',config:{}}},destinationNode:{type:'destinationNode',data:{label:'Destination',destinationType:'default',config:{}}},transformationNode:{type:'transformationNode',data:{label:'Transform',transformationType:'default',config:{}}},filterNode:{type:'filterNode',data:{label:'Filter',filterType:'default',config:{}}}};/**\n * Flow Canvas component\n *\n * @param {Object} props - Component props\n * @param {Array} props.initialElements - Initial flow elements (nodes and edges)\n * @param {boolean} props.readOnly - Whether the canvas is read-only\n * @param {Function} props.onChange - Callback when flow elements change\n * @param {Function} props.onSave - Callback when flow is saved\n * @param {Function} props.onNodeSelect - Callback when a node is selected\n * @param {Function} props.onEdgeSelect - Callback when an edge is selected\n * @param {Function} props.onValidate - Callback to validate the flow\n * @param {Object} props.validationErrors - Validation errors for elements\n * @returns {JSX.Element} The FlowCanvas component\n */const FlowCanvasContent=_ref=>{let{initialElements=[],readOnly=false,onChange,onSave,onNodeSelect,onEdgeSelect,onValidate,validationErrors={}}=_ref;// Separate state for nodes and edges\nconst[nodes,setNodes]=useState(initialElements.filter(el=>isNode(el)));const[edges,setEdges]=useState(initialElements.filter(el=>isEdge(el)));// State for selected elements\nconst[selectedElements,setSelectedElements]=useState([]);// History for undo/redo\nconst[historyIndex,setHistoryIndex]=useState(0);const[history,setHistory]=useState([{nodes:initialElements.filter(el=>isNode(el)),edges:initialElements.filter(el=>isEdge(el)),timestamp:new Date().toISOString(),action:'Initial state'}]);// State for node menu\nconst[nodeMenuAnchorEl,setNodeMenuAnchorEl]=useState(null);const[nodeMenuPosition,setNodeMenuPosition]=useState({x:0,y:0});// State for notifications\nconst[notification,setNotification]=useState({open:false,message:'',severity:'info'});// Reference to the flow wrapper for calculating drop positions\nconst reactFlowWrapper=useRef(null);// Get reactFlow instance helpers\nconst reactFlowInstance=useReactFlow();// Combine nodes and edges for backward compatibility\nconst elements=[...nodes,...edges];// Update history when nodes or edges change\nuseEffect(()=>{if(onChange){onChange([...nodes,...edges]);}},[nodes,edges,onChange]);/**\n   * Add a new state to the history with a descriptive action name\n   * @param {Array} currentNodes - The current nodes state\n   * @param {Array} currentEdges - The current edges state\n   * @param {string} actionName - Description of the action\n   */const addToHistory=useCallback((currentNodes,currentEdges,actionName)=>{// Create a history record with metadata\nconst historyRecord={nodes:[...currentNodes],edges:[...currentEdges],timestamp:new Date().toISOString(),action:actionName||'Unknown action'};// Update history by removing any future history entries (if we're not at the end)\nconst newHistory=history.slice(0,historyIndex+1);newHistory.push(historyRecord);// Limit history size to prevent memory issues (keep last 50 states)\nconst trimmedHistory=newHistory.length>50?newHistory.slice(newHistory.length-50):newHistory;setHistory(trimmedHistory);setHistoryIndex(trimmedHistory.length-1);// For debugging\nconsole.log(`History: ${actionName} (${trimmedHistory.length} states)`);},[history,historyIndex]);/**\n   * Add a new element to the flow and update history\n   * @param {Object} newElement - The new element to add\n   */const addElement=useCallback(newElement=>{if(isNode(newElement)){setNodes(nds=>{const newNodes=[...nds,newElement];// Add to history\naddToHistory(newNodes,edges,`Added ${newElement.type}`);return newNodes;});}else if(isEdge(newElement)){setEdges(edgs=>{const newEdges=[...edgs,newElement];// Add to history\naddToHistory(nodes,newEdges,`Added connection`);return newEdges;});}},[addToHistory,nodes,edges]);/**\n   * Handle undo operation\n   */const handleUndo=useCallback(()=>{if(historyIndex>0){const newIndex=historyIndex-1;const historyRecord=history[newIndex];if(historyRecord&&historyRecord.nodes&&historyRecord.edges){setHistoryIndex(newIndex);setNodes(historyRecord.nodes);setEdges(historyRecord.edges);setNotification({open:true,message:`Undo: ${historyRecord.action}`,severity:'info'});}else{console.error('History record is invalid',historyRecord);}}},[history,historyIndex]);/**\n   * Handle redo operation\n   */const handleRedo=useCallback(()=>{if(historyIndex<history.length-1){const newIndex=historyIndex+1;const historyRecord=history[newIndex];if(historyRecord&&historyRecord.nodes&&historyRecord.edges){setHistoryIndex(newIndex);setNodes(historyRecord.nodes);setEdges(historyRecord.edges);setNotification({open:true,message:`Redo: ${historyRecord.action}`,severity:'info'});}else{console.error('History record is invalid',historyRecord);}}},[history,historyIndex]);/**\n   * Handle flow element selection\n   * @param {Object} event - The selection event\n   */const onElementsSelect=useCallback(event=>{setSelectedElements(event);// Call appropriate callbacks based on element type\nif(event.length===1){const selected=event[0];if(isNode(selected)&&onNodeSelect){onNodeSelect(selected);}else if(isEdge(selected)&&onEdgeSelect){onEdgeSelect(selected);}}},[onNodeSelect,onEdgeSelect]);/**\n   * Handle element removal (nodes or edges)\n   */const onElementsRemove=useCallback(elementsToRemove=>{// Separate nodes and edges to remove\nconst nodesToRemove=elementsToRemove.filter(el=>isNode(el));const edgesToRemove=elementsToRemove.filter(el=>isEdge(el));// Generate meaningful action name for history\nconst actionName=elementsToRemove.length===1?`Removed ${isNode(elementsToRemove[0])?'node':'edge'} ${elementsToRemove[0].id}`:`Removed ${elementsToRemove.length} elements`;// Create changes object for each node to remove\nif(nodesToRemove.length>0){const nodeChanges=nodesToRemove.map(node=>({id:node.id,type:'remove'}));setNodes(nds=>{const updatedNodes=applyNodeChanges(nodeChanges,nds);// If we're also removing edges, we'll add to history after that\nif(edgesToRemove.length===0){addToHistory(updatedNodes,edges,actionName);}return updatedNodes;});}// Create changes object for each edge to remove\nif(edgesToRemove.length>0){const edgeChanges=edgesToRemove.map(edge=>({id:edge.id,type:'remove'}));setEdges(edgs=>{const updatedEdges=applyEdgeChanges(edgeChanges,edgs);// Add to history after both nodes and edges are removed\nif(nodesToRemove.length>0){// We need to use the latest nodes state\nconst updatedNodes=nodes.filter(node=>!nodesToRemove.some(nodeToRemove=>nodeToRemove.id===node.id));addToHistory(updatedNodes,updatedEdges,actionName);}else{addToHistory(nodes,updatedEdges,actionName);}return updatedEdges;});}},[nodes,edges,addToHistory]);/**\n   * Handle connection (edge) creation\n   * @param {Object} params - Connection parameters\n   */const onConnect=useCallback(params=>{// Get source and target nodes to validate connection\nconst sourceNode=nodes.find(node=>node.id===params.source);const targetNode=nodes.find(node=>node.id===params.target);if(!sourceNode||!targetNode){setNotification({open:true,message:'Cannot create connection: Source or target node not found',severity:'error'});return;}// Create connection object for validation\nconst newConnection={...params,id:`edge-${params.source}-${params.target}-${Date.now()}`,source:params.source,target:params.target,sourceHandle:params.sourceHandle,targetHandle:params.targetHandle};// Validate the connection\nconst validation=validateConnection(newConnection,nodes,edges);// Create a custom edge with a unique ID and validation result\nconst connection={...params,id:`edge-${params.source}-${params.target}-${Date.now()}`,type:'flowEdge',animated:true,data:{label:'Connection',validation:validation,connectionType:'DATA',// Default to data connection type\nonDelete:edgeId=>{const edgeToRemove=edges.find(el=>el.id===edgeId);if(edgeToRemove){onElementsRemove([edgeToRemove]);}},onLabelEdit:edgeId=>{// Implementation will be added for label editing\nconsole.log('Edit label for',edgeId);},onConnectionTypeChange:(edgeId,connectionType)=>{// Implementation for changing connection type\nsetEdges(edgs=>{const newEdges=edgs.map(edge=>{if(edge.id===edgeId){return{...edge,animated:connectionType==='DATA',data:{...edge.data,connectionType}};}return edge;});// Add to history\naddToHistory(nodes,newEdges,`Changed connection type to ${connectionType}`);return newEdges;});},onPriorityChange:(edgeId,priority)=>{// Implementation for changing priority\nsetEdges(edgs=>{const newEdges=edgs.map(edge=>{if(edge.id===edgeId){return{...edge,data:{...edge.data,priority}};}return edge;});// Add to history\naddToHistory(nodes,newEdges,`Changed connection priority to ${priority}`);return newEdges;});},onTest:edgeId=>{// Implementation for testing connection\nsetNotification({open:true,message:'Testing connection...',severity:'info'});},onAddBreakpoint:edgeId=>{// Implementation for adding breakpoint\nsetEdges(edgs=>{const newEdges=edgs.map(edge=>{if(edge.id===edgeId){var _edge$data;const hasBreakpoint=!!((_edge$data=edge.data)!==null&&_edge$data!==void 0&&_edge$data.breakpoint);return{...edge,data:{...edge.data,breakpoint:!hasBreakpoint// Toggle breakpoint\n}};}return edge;});// Add to history\naddToHistory(nodes,newEdges,`Toggled breakpoint on connection ${edgeId}`);return newEdges;});},onValidate:params=>{// Implementation for validating connection\nreturn validateConnection(params,nodes,edges);}}};// Set notification based on validation\nif(!validation.isValid){setNotification({open:true,message:validation.message,severity:validation.hasError?'error':'warning'});// If it's a warning, allow the connection; if it's an error, prevent it\nif(validation.hasError){return;}}// Add the new edge\nsetEdges(edgs=>{var _sourceNode$data,_targetNode$data;const newEdges=addEdge(connection,edgs);// Get source and target node labels for the history\nconst sourceLabel=(sourceNode===null||sourceNode===void 0?void 0:(_sourceNode$data=sourceNode.data)===null||_sourceNode$data===void 0?void 0:_sourceNode$data.label)||params.source;const targetLabel=(targetNode===null||targetNode===void 0?void 0:(_targetNode$data=targetNode.data)===null||_targetNode$data===void 0?void 0:_targetNode$data.label)||params.target;// Add to history\naddToHistory(nodes,newEdges,`Connected ${sourceLabel} to ${targetLabel}`);return newEdges;});},[nodes,edges,addToHistory,onElementsRemove]);/**\n   * Handle node dragging\n   * @param {Event} event - The drag event\n   */const onDragOver=useCallback(event=>{event.preventDefault();event.dataTransfer.dropEffect='move';},[]);/**\n   * Handle node dropping onto the canvas\n   * @param {Event} event - The drop event\n   */const onDrop=useCallback(event=>{event.preventDefault();// Get the drop position in the canvas coordinates\nconst reactFlowBounds=reactFlowWrapper.current.getBoundingClientRect();const nodeType=event.dataTransfer.getData('application/reactflow/type');// Check if we have this node type\nif(typeof nodeType==='undefined'||!nodeType||!DEFAULT_NODE[nodeType]){return;}// Calculate the position where the node was dropped\nconst position=reactFlowInstance.screenToFlowPosition({x:event.clientX-reactFlowBounds.left,y:event.clientY-reactFlowBounds.top});// Get node template based on the type\nconst newNode={...DEFAULT_NODE[nodeType],position,id:`${nodeType}-${Date.now()}`};// Add the new node\naddElement(newNode);// Show notification\nsetNotification({open:true,message:`Added new ${nodeType.replace('Node','')} node`,severity:'success'});},[reactFlowInstance,addElement]);/**\n   * Handle saving the flow\n   */const handleSave=useCallback(()=>{if(onSave){// Combine nodes and edges for backward compatibility\nonSave([...nodes,...edges]);// Show notification\nsetNotification({open:true,message:'Flow saved successfully',severity:'success'});}},[nodes,edges,onSave]);/**\n   * Handle validating the flow\n   */const handleValidate=useCallback(()=>{// Run flow validation\nconst validationResult=validateFlow(nodes,edges);// Update notifications with validation results\nif(validationResult.isValid){setNotification({open:true,message:'Flow validation passed successfully',severity:'success'});}else{// Get the first error or warning message to display\nconst message=validationResult.hasErrors?validationResult.errors[0]:validationResult.hasWarnings?validationResult.warnings[0]:'Flow validation failed';setNotification({open:true,message,severity:validationResult.hasErrors?'error':'warning'});}// Update node styles with validation results\nsetNodes(nds=>{return nds.map(node=>{// Apply validation results to nodes\nif(validationResult.nodeValidation[node.id]){return{...node,data:{...node.data,validation:validationResult.nodeValidation[node.id]}};}return node;});});// Update edge styles with validation results\nsetEdges(edgs=>{return edgs.map(edge=>{// Apply validation results to edges\nif(validationResult.edgeValidation[edge.id]){return{...edge,data:{...edge.data,validation:validationResult.edgeValidation[edge.id]}};}return edge;});});// If there's an external validation handler, call it with the result\nif(onValidate){onValidate([...nodes,...edges],validationResult);}return validationResult.isValid;},[nodes,edges,onValidate]);/**\n   * Delete selected elements\n   */const handleDelete=useCallback(()=>{if(selectedElements.length>0){onElementsRemove(selectedElements);setSelectedElements([]);// Show notification\nsetNotification({open:true,message:`Deleted ${selectedElements.length} element(s)`,severity:'info'});}},[selectedElements,onElementsRemove]);/**\n   * Show node menu at canvas position\n   * @param {Event} event - The context menu event\n   */const handleContextMenu=useCallback(event=>{event.preventDefault();// Calculate position relative to canvas\nconst reactFlowBounds=reactFlowWrapper.current.getBoundingClientRect();const position=reactFlowInstance.screenToFlowPosition({x:event.clientX-reactFlowBounds.left,y:event.clientY-reactFlowBounds.top});setNodeMenuPosition(position);setNodeMenuAnchorEl(event.currentTarget);},[reactFlowInstance]);/**\n   * Close node menu\n   */const handleCloseNodeMenu=useCallback(()=>{setNodeMenuAnchorEl(null);},[]);/**\n   * Add a new node from the context menu\n   * @param {string} nodeType - Type of node to add\n   */const handleAddNode=useCallback(nodeType=>{// Check if we have this node type\nif(!DEFAULT_NODE[nodeType]){return;}// Create a new node at the menu position\nconst newNode={...DEFAULT_NODE[nodeType],position:nodeMenuPosition,id:`${nodeType}-${Date.now()}`};// Add the new node\naddElement(newNode);// Close menu\nhandleCloseNodeMenu();// Show notification\nsetNotification({open:true,message:`Added new ${nodeType.replace('Node','')} node`,severity:'success'});},[nodeMenuPosition,addElement,handleCloseNodeMenu]);/**\n   * Close notification\n   */const handleCloseNotification=useCallback(()=>{setNotification({...notification,open:false});},[notification]);return/*#__PURE__*/_jsxs(Box,{sx:{height:'100%',width:'100%',display:'flex',flexDirection:'column'},children:[/*#__PURE__*/_jsx(Paper,{elevation:1,sx:{width:'100%'},children:/*#__PURE__*/_jsxs(Toolbar,{variant:\"dense\",children:[/*#__PURE__*/_jsx(Tooltip,{title:\"Add Node\",children:/*#__PURE__*/_jsx(IconButton,{onClick:e=>setNodeMenuAnchorEl(e.currentTarget),disabled:readOnly,children:/*#__PURE__*/_jsx(AddIcon,{})})}),/*#__PURE__*/_jsx(Tooltip,{title:\"Delete Selected\",children:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(IconButton,{onClick:handleDelete,disabled:readOnly||selectedElements.length===0,children:/*#__PURE__*/_jsx(DeleteIcon,{})})})}),/*#__PURE__*/_jsx(Divider,{orientation:\"vertical\",flexItem:true,sx:{mx:1}}),/*#__PURE__*/_jsx(Tooltip,{title:\"Undo\",children:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(IconButton,{onClick:handleUndo,disabled:readOnly||historyIndex===0,children:/*#__PURE__*/_jsx(UndoIcon,{})})})}),/*#__PURE__*/_jsx(Tooltip,{title:\"Redo\",children:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(IconButton,{onClick:handleRedo,disabled:readOnly||historyIndex===history.length-1,children:/*#__PURE__*/_jsx(RedoIcon,{})})})}),/*#__PURE__*/_jsx(Divider,{orientation:\"vertical\",flexItem:true,sx:{mx:1}}),/*#__PURE__*/_jsx(Tooltip,{title:\"Save Flow\",children:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsx(IconButton,{onClick:handleSave,disabled:readOnly,color:\"primary\",children:/*#__PURE__*/_jsx(SaveIcon,{})})})}),/*#__PURE__*/_jsx(Tooltip,{title:\"Validate Flow\",children:/*#__PURE__*/_jsx(IconButton,{onClick:handleValidate,color:\"secondary\",children:/*#__PURE__*/_jsx(PlayIcon,{})})}),/*#__PURE__*/_jsx(Box,{sx:{flexGrow:1}}),/*#__PURE__*/_jsx(Tooltip,{title:readOnly?\"Read Only Mode\":\"Edit Mode\",children:/*#__PURE__*/_jsx(IconButton,{color:readOnly?\"error\":\"success\",children:readOnly?/*#__PURE__*/_jsx(LockIcon,{}):/*#__PURE__*/_jsx(LockOpenIcon,{})})}),/*#__PURE__*/_jsx(Tooltip,{title:\"Flow Settings\",children:/*#__PURE__*/_jsx(IconButton,{children:/*#__PURE__*/_jsx(SettingsIcon,{})})})]})}),/*#__PURE__*/_jsx(Box,{ref:reactFlowWrapper,sx:{flexGrow:1,width:'100%',height:'calc(100% - 48px)','& .react-flow__node':{cursor:readOnly?'default':'move'}},children:/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodes,edges:edges,nodeTypes:nodeTypes,edgeTypes:edgeTypes,onNodesChange:changes=>{setNodes(nds=>{const updatedNodes=applyNodeChanges(changes,nds);return updatedNodes;});},onEdgesChange:changes=>{setEdges(edgs=>{const updatedEdges=applyEdgeChanges(changes,edgs);return updatedEdges;});},onConnect:onConnect,onSelectionChange:onElementsSelect,deleteKeyCode:46// Delete key\n,onInit:instance=>{// Center the graph after loading\ninstance.fitView({padding:0.2});},onDragOver:onDragOver,onDrop:onDrop,onContextMenu:handleContextMenu,snapToGrid:true,snapGrid:[15,15],defaultZoom:1,minZoom:0.1,maxZoom:1.5,style:defaultFlowStyle,selectionOnDrag:false,multiSelectionKeyCode:\"Control\",selectionMode:1,elementsSelectable:!readOnly,nodesDraggable:!readOnly,nodesConnectable:!readOnly,children:[/*#__PURE__*/_jsx(Background,{variant:\"dots\",gap:12,size:1}),/*#__PURE__*/_jsx(Controls,{showInteractive:false}),/*#__PURE__*/_jsx(MiniMap,{nodeColor:node=>{// Color nodes based on their type\nif(node.type==='sourceNode')return'#00c853';if(node.type==='destinationNode')return'#2196f3';if(node.type==='transformationNode')return'#ff9800';if(node.type==='filterNode')return'#9c27b0';return'#999';}})]})}),/*#__PURE__*/_jsxs(Menu,{anchorEl:nodeMenuAnchorEl,open:Boolean(nodeMenuAnchorEl),onClose:handleCloseNodeMenu,children:[/*#__PURE__*/_jsx(MenuItem,{onClick:()=>handleAddNode('sourceNode'),children:\"Add Source\"}),/*#__PURE__*/_jsx(MenuItem,{onClick:()=>handleAddNode('destinationNode'),children:\"Add Destination\"}),/*#__PURE__*/_jsx(MenuItem,{onClick:()=>handleAddNode('transformationNode'),children:\"Add Transformation\"}),/*#__PURE__*/_jsx(MenuItem,{onClick:()=>handleAddNode('filterNode'),children:\"Add Filter\"})]}),/*#__PURE__*/_jsx(Snackbar,{open:notification.open,autoHideDuration:4000,onClose:handleCloseNotification,anchorOrigin:{vertical:'bottom',horizontal:'left'},children:/*#__PURE__*/_jsx(Alert,{onClose:handleCloseNotification,severity:notification.severity,variant:\"filled\",children:notification.message})})]});};/**\n * Flow Canvas wrapper with ReactFlowProvider\n */const FlowCanvas=props=>{return/*#__PURE__*/_jsx(ReactFlowProvider,{children:/*#__PURE__*/_jsx(FlowCanvasContent,{...props})});};export default FlowCanvas;","map":{"version":3,"names":["React","useState","useRef","useCallback","useEffect","ReactFlow","Background","Controls","MiniMap","addEdge","applyEdgeChanges","applyNodeChanges","isNode","isEdge","ReactFlowProvider","useReactFlow","Box","Paper","Toolbar","IconButton","Tooltip","Divider","Button","Menu","MenuItem","Typography","Snackbar","Alert","ZoomIn","ZoomInIcon","ZoomOut","ZoomOutIcon","Add","AddIcon","Delete","DeleteIcon","SaveAlt","SaveIcon","Undo","UndoIcon","Redo","RedoIcon","FitScreen","FitScreenIcon","Lock","LockIcon","LockOpen","LockOpenIcon","Create","CreateIcon","PlayArrow","PlayIcon","Settings","SettingsIcon","MoreVert","MoreVertIcon","SourceNode","DestinationNode","TransformationNode","FilterNode","FlowEdge","validateConnection","validateFlow","validateFlowForExecution","jsx","_jsx","jsxs","_jsxs","defaultFlowStyle","background","nodeTypes","sourceNode","destinationNode","transformationNode","filterNode","edgeTypes","flowEdge","DEFAULT_NODE","type","data","label","sourceType","config","destinationType","transformationType","filterType","FlowCanvasContent","_ref","initialElements","readOnly","onChange","onSave","onNodeSelect","onEdgeSelect","onValidate","validationErrors","nodes","setNodes","filter","el","edges","setEdges","selectedElements","setSelectedElements","historyIndex","setHistoryIndex","history","setHistory","timestamp","Date","toISOString","action","nodeMenuAnchorEl","setNodeMenuAnchorEl","nodeMenuPosition","setNodeMenuPosition","x","y","notification","setNotification","open","message","severity","reactFlowWrapper","reactFlowInstance","elements","addToHistory","currentNodes","currentEdges","actionName","historyRecord","newHistory","slice","push","trimmedHistory","length","console","log","addElement","newElement","nds","newNodes","edgs","newEdges","handleUndo","newIndex","error","handleRedo","onElementsSelect","event","selected","onElementsRemove","elementsToRemove","nodesToRemove","edgesToRemove","id","nodeChanges","map","node","updatedNodes","edgeChanges","edge","updatedEdges","some","nodeToRemove","onConnect","params","find","source","targetNode","target","newConnection","now","sourceHandle","targetHandle","validation","connection","animated","connectionType","onDelete","edgeId","edgeToRemove","onLabelEdit","onConnectionTypeChange","onPriorityChange","priority","onTest","onAddBreakpoint","_edge$data","hasBreakpoint","breakpoint","isValid","hasError","_sourceNode$data","_targetNode$data","sourceLabel","targetLabel","onDragOver","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","nodeType","getData","position","screenToFlowPosition","clientX","left","clientY","top","newNode","replace","handleSave","handleValidate","validationResult","hasErrors","errors","hasWarnings","warnings","nodeValidation","edgeValidation","handleDelete","handleContextMenu","currentTarget","handleCloseNodeMenu","handleAddNode","handleCloseNotification","sx","height","width","display","flexDirection","children","elevation","variant","title","onClick","e","disabled","orientation","flexItem","mx","color","flexGrow","ref","cursor","onNodesChange","changes","onEdgesChange","onSelectionChange","deleteKeyCode","onInit","instance","fitView","padding","onContextMenu","snapToGrid","snapGrid","defaultZoom","minZoom","maxZoom","style","selectionOnDrag","multiSelectionKeyCode","selectionMode","elementsSelectable","nodesDraggable","nodesConnectable","gap","size","showInteractive","nodeColor","anchorEl","Boolean","onClose","autoHideDuration","anchorOrigin","vertical","horizontal","FlowCanvas","props"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/components/integration/flow/FlowCanvas.jsx"],"sourcesContent":["/**\n * Flow Canvas Component\n *\n * A drag-and-drop canvas for building integration flows using React Flow.\n * This component provides the foundation for the flow-based integration\n * interface, allowing users to add, connect, and configure nodes visually.\n *\n * @component\n */\n\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactFlow, {\n  Background,\n  Controls,\n  MiniMap,\n  addEdge,\n  applyEdgeChanges,\n  applyNodeChanges,\n  isNode,\n  isEdge,\n  ReactFlowProvider,\n  useReactFlow,\n} from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { \n  Box, \n  Paper, \n  Toolbar, \n  IconButton, \n  Tooltip, \n  Divider,\n  Button,\n  Menu,\n  MenuItem,\n  Typography,\n  Snackbar,\n  Alert,\n} from '@mui/material';\nimport {\n  ZoomIn as ZoomInIcon,\n  ZoomOut as ZoomOutIcon,\n  Add as AddIcon,\n  Delete as DeleteIcon,\n  SaveAlt as SaveIcon,\n  Undo as UndoIcon,\n  Redo as RedoIcon,\n  FitScreen as FitScreenIcon,\n  Lock as LockIcon,\n  LockOpen as LockOpenIcon,\n  Create as CreateIcon,\n  PlayArrow as PlayIcon,\n  Settings as SettingsIcon,\n  MoreVert as MoreVertIcon,\n} from '@mui/icons-material';\n\n// Node types will be imported and registered here\nimport SourceNode from './nodes/SourceNode';\nimport DestinationNode from './nodes/DestinationNode';\nimport TransformationNode from './nodes/TransformationNode';\nimport FilterNode from './nodes/FilterNode';\n\n// Custom edge\nimport FlowEdge from './edges/FlowEdge';\n\n// Import validation utilities\nimport { \n  validateConnection, \n  validateFlow, \n  validateFlowForExecution \n} from './validation/connection-validation';\n\n// Default flow styling\nconst defaultFlowStyle = {\n  background: '#f7f7f7',\n};\n\n// Register custom node types\nconst nodeTypes = {\n  sourceNode: SourceNode,\n  destinationNode: DestinationNode,\n  transformationNode: TransformationNode,\n  filterNode: FilterNode,\n};\n\n// Register custom edge types\nconst edgeTypes = {\n  flowEdge: FlowEdge,\n};\n\n// Default node configuration\nconst DEFAULT_NODE = {\n  sourceNode: {\n    type: 'sourceNode',\n    data: { \n      label: 'Source',\n      sourceType: 'default',\n      config: {},\n    },\n  },\n  destinationNode: {\n    type: 'destinationNode',\n    data: { \n      label: 'Destination',\n      destinationType: 'default',\n      config: {},\n    },\n  },\n  transformationNode: {\n    type: 'transformationNode',\n    data: { \n      label: 'Transform',\n      transformationType: 'default',\n      config: {},\n    },\n  },\n  filterNode: {\n    type: 'filterNode',\n    data: { \n      label: 'Filter',\n      filterType: 'default',\n      config: {},\n    },\n  },\n};\n\n/**\n * Flow Canvas component\n *\n * @param {Object} props - Component props\n * @param {Array} props.initialElements - Initial flow elements (nodes and edges)\n * @param {boolean} props.readOnly - Whether the canvas is read-only\n * @param {Function} props.onChange - Callback when flow elements change\n * @param {Function} props.onSave - Callback when flow is saved\n * @param {Function} props.onNodeSelect - Callback when a node is selected\n * @param {Function} props.onEdgeSelect - Callback when an edge is selected\n * @param {Function} props.onValidate - Callback to validate the flow\n * @param {Object} props.validationErrors - Validation errors for elements\n * @returns {JSX.Element} The FlowCanvas component\n */\nconst FlowCanvasContent = ({\n  initialElements = [],\n  readOnly = false,\n  onChange,\n  onSave,\n  onNodeSelect,\n  onEdgeSelect,\n  onValidate,\n  validationErrors = {},\n}) => {\n  // Separate state for nodes and edges\n  const [nodes, setNodes] = useState(initialElements.filter(el => isNode(el)));\n  const [edges, setEdges] = useState(initialElements.filter(el => isEdge(el)));\n  \n  // State for selected elements\n  const [selectedElements, setSelectedElements] = useState([]);\n  \n  // History for undo/redo\n  const [historyIndex, setHistoryIndex] = useState(0);\n  const [history, setHistory] = useState([{\n    nodes: initialElements.filter(el => isNode(el)),\n    edges: initialElements.filter(el => isEdge(el)),\n    timestamp: new Date().toISOString(),\n    action: 'Initial state',\n  }]);\n  \n  // State for node menu\n  const [nodeMenuAnchorEl, setNodeMenuAnchorEl] = useState(null);\n  const [nodeMenuPosition, setNodeMenuPosition] = useState({ x: 0, y: 0 });\n  \n  // State for notifications\n  const [notification, setNotification] = useState({ open: false, message: '', severity: 'info' });\n  \n  // Reference to the flow wrapper for calculating drop positions\n  const reactFlowWrapper = useRef(null);\n  \n  // Get reactFlow instance helpers\n  const reactFlowInstance = useReactFlow();\n  \n  // Combine nodes and edges for backward compatibility\n  const elements = [...nodes, ...edges];\n  \n  // Update history when nodes or edges change\n  useEffect(() => {\n    if (onChange) {\n      onChange([...nodes, ...edges]);\n    }\n  }, [nodes, edges, onChange]);\n  \n  /**\n   * Add a new state to the history with a descriptive action name\n   * @param {Array} currentNodes - The current nodes state\n   * @param {Array} currentEdges - The current edges state\n   * @param {string} actionName - Description of the action\n   */\n  const addToHistory = useCallback((currentNodes, currentEdges, actionName) => {\n    // Create a history record with metadata\n    const historyRecord = {\n      nodes: [...currentNodes],\n      edges: [...currentEdges],\n      timestamp: new Date().toISOString(),\n      action: actionName || 'Unknown action',\n    };\n    \n    // Update history by removing any future history entries (if we're not at the end)\n    const newHistory = history.slice(0, historyIndex + 1);\n    newHistory.push(historyRecord);\n    \n    // Limit history size to prevent memory issues (keep last 50 states)\n    const trimmedHistory = newHistory.length > 50 \n      ? newHistory.slice(newHistory.length - 50) \n      : newHistory;\n    \n    setHistory(trimmedHistory);\n    setHistoryIndex(trimmedHistory.length - 1);\n    \n    // For debugging\n    console.log(`History: ${actionName} (${trimmedHistory.length} states)`);\n  }, [history, historyIndex]);\n  \n  /**\n   * Add a new element to the flow and update history\n   * @param {Object} newElement - The new element to add\n   */\n  const addElement = useCallback((newElement) => {\n    if (isNode(newElement)) {\n      setNodes((nds) => {\n        const newNodes = [...nds, newElement];\n        // Add to history\n        addToHistory(newNodes, edges, `Added ${newElement.type}`);\n        return newNodes;\n      });\n    } else if (isEdge(newElement)) {\n      setEdges((edgs) => {\n        const newEdges = [...edgs, newElement];\n        // Add to history\n        addToHistory(nodes, newEdges, `Added connection`);\n        return newEdges;\n      });\n    }\n  }, [addToHistory, nodes, edges]);\n  \n  /**\n   * Handle undo operation\n   */\n  const handleUndo = useCallback(() => {\n    if (historyIndex > 0) {\n      const newIndex = historyIndex - 1;\n      const historyRecord = history[newIndex];\n      \n      if (historyRecord && historyRecord.nodes && historyRecord.edges) {\n        setHistoryIndex(newIndex);\n        setNodes(historyRecord.nodes);\n        setEdges(historyRecord.edges);\n        \n        setNotification({\n          open: true,\n          message: `Undo: ${historyRecord.action}`,\n          severity: 'info',\n        });\n      } else {\n        console.error('History record is invalid', historyRecord);\n      }\n    }\n  }, [history, historyIndex]);\n  \n  /**\n   * Handle redo operation\n   */\n  const handleRedo = useCallback(() => {\n    if (historyIndex < history.length - 1) {\n      const newIndex = historyIndex + 1;\n      const historyRecord = history[newIndex];\n      \n      if (historyRecord && historyRecord.nodes && historyRecord.edges) {\n        setHistoryIndex(newIndex);\n        setNodes(historyRecord.nodes);\n        setEdges(historyRecord.edges);\n        \n        setNotification({\n          open: true,\n          message: `Redo: ${historyRecord.action}`,\n          severity: 'info',\n        });\n      } else {\n        console.error('History record is invalid', historyRecord);\n      }\n    }\n  }, [history, historyIndex]);\n  \n  /**\n   * Handle flow element selection\n   * @param {Object} event - The selection event\n   */\n  const onElementsSelect = useCallback((event) => {\n    setSelectedElements(event);\n    \n    // Call appropriate callbacks based on element type\n    if (event.length === 1) {\n      const selected = event[0];\n      if (isNode(selected) && onNodeSelect) {\n        onNodeSelect(selected);\n      } else if (isEdge(selected) && onEdgeSelect) {\n        onEdgeSelect(selected);\n      }\n    }\n  }, [onNodeSelect, onEdgeSelect]);\n  \n  /**\n   * Handle element removal (nodes or edges)\n   */\n  const onElementsRemove = useCallback((elementsToRemove) => {\n    // Separate nodes and edges to remove\n    const nodesToRemove = elementsToRemove.filter(el => isNode(el));\n    const edgesToRemove = elementsToRemove.filter(el => isEdge(el));\n    \n    // Generate meaningful action name for history\n    const actionName = elementsToRemove.length === 1 \n      ? `Removed ${isNode(elementsToRemove[0]) ? 'node' : 'edge'} ${elementsToRemove[0].id}`\n      : `Removed ${elementsToRemove.length} elements`;\n    \n    // Create changes object for each node to remove\n    if (nodesToRemove.length > 0) {\n      const nodeChanges = nodesToRemove.map(node => ({\n        id: node.id,\n        type: 'remove',\n      }));\n      \n      setNodes(nds => {\n        const updatedNodes = applyNodeChanges(nodeChanges, nds);\n        \n        // If we're also removing edges, we'll add to history after that\n        if (edgesToRemove.length === 0) {\n          addToHistory(updatedNodes, edges, actionName);\n        }\n        \n        return updatedNodes;\n      });\n    }\n    \n    // Create changes object for each edge to remove\n    if (edgesToRemove.length > 0) {\n      const edgeChanges = edgesToRemove.map(edge => ({\n        id: edge.id,\n        type: 'remove',\n      }));\n      \n      setEdges(edgs => {\n        const updatedEdges = applyEdgeChanges(edgeChanges, edgs);\n        \n        // Add to history after both nodes and edges are removed\n        if (nodesToRemove.length > 0) {\n          // We need to use the latest nodes state\n          const updatedNodes = nodes.filter(node => \n            !nodesToRemove.some(nodeToRemove => nodeToRemove.id === node.id)\n          );\n          addToHistory(updatedNodes, updatedEdges, actionName);\n        } else {\n          addToHistory(nodes, updatedEdges, actionName);\n        }\n        \n        return updatedEdges;\n      });\n    }\n  }, [nodes, edges, addToHistory]);\n  \n  /**\n   * Handle connection (edge) creation\n   * @param {Object} params - Connection parameters\n   */\n  const onConnect = useCallback((params) => {\n    // Get source and target nodes to validate connection\n    const sourceNode = nodes.find(node => node.id === params.source);\n    const targetNode = nodes.find(node => node.id === params.target);\n    \n    if (!sourceNode || !targetNode) {\n      setNotification({\n        open: true,\n        message: 'Cannot create connection: Source or target node not found',\n        severity: 'error',\n      });\n      return;\n    }\n    \n    // Create connection object for validation\n    const newConnection = {\n      ...params,\n      id: `edge-${params.source}-${params.target}-${Date.now()}`,\n      source: params.source,\n      target: params.target,\n      sourceHandle: params.sourceHandle,\n      targetHandle: params.targetHandle,\n    };\n    \n    // Validate the connection\n    const validation = validateConnection(newConnection, nodes, edges);\n    \n    // Create a custom edge with a unique ID and validation result\n    const connection = {\n      ...params,\n      id: `edge-${params.source}-${params.target}-${Date.now()}`,\n      type: 'flowEdge',\n      animated: true,\n      data: { \n        label: 'Connection', \n        validation: validation,\n        connectionType: 'DATA', // Default to data connection type\n        onDelete: (edgeId) => {\n          const edgeToRemove = edges.find(el => el.id === edgeId);\n          if (edgeToRemove) {\n            onElementsRemove([edgeToRemove]);\n          }\n        },\n        onLabelEdit: (edgeId) => {\n          // Implementation will be added for label editing\n          console.log('Edit label for', edgeId);\n        },\n        onConnectionTypeChange: (edgeId, connectionType) => {\n          // Implementation for changing connection type\n          setEdges(edgs => {\n            const newEdges = edgs.map(edge => {\n              if (edge.id === edgeId) {\n                return {\n                  ...edge,\n                  animated: connectionType === 'DATA',\n                  data: {\n                    ...edge.data,\n                    connectionType,\n                  }\n                };\n              }\n              return edge;\n            });\n            \n            // Add to history\n            addToHistory(nodes, newEdges, `Changed connection type to ${connectionType}`);\n            \n            return newEdges;\n          });\n        },\n        onPriorityChange: (edgeId, priority) => {\n          // Implementation for changing priority\n          setEdges(edgs => {\n            const newEdges = edgs.map(edge => {\n              if (edge.id === edgeId) {\n                return {\n                  ...edge,\n                  data: {\n                    ...edge.data,\n                    priority,\n                  }\n                };\n              }\n              return edge;\n            });\n            \n            // Add to history\n            addToHistory(nodes, newEdges, `Changed connection priority to ${priority}`);\n            \n            return newEdges;\n          });\n        },\n        onTest: (edgeId) => {\n          // Implementation for testing connection\n          setNotification({\n            open: true,\n            message: 'Testing connection...',\n            severity: 'info',\n          });\n        },\n        onAddBreakpoint: (edgeId) => {\n          // Implementation for adding breakpoint\n          setEdges(edgs => {\n            const newEdges = edgs.map(edge => {\n              if (edge.id === edgeId) {\n                const hasBreakpoint = !!edge.data?.breakpoint;\n                return {\n                  ...edge,\n                  data: {\n                    ...edge.data,\n                    breakpoint: !hasBreakpoint, // Toggle breakpoint\n                  }\n                };\n              }\n              return edge;\n            });\n            \n            // Add to history\n            addToHistory(nodes, newEdges, `Toggled breakpoint on connection ${edgeId}`);\n            \n            return newEdges;\n          });\n        },\n        onValidate: (params) => {\n          // Implementation for validating connection\n          return validateConnection(params, nodes, edges);\n        }\n      },\n    };\n    \n    // Set notification based on validation\n    if (!validation.isValid) {\n      setNotification({\n        open: true,\n        message: validation.message,\n        severity: validation.hasError ? 'error' : 'warning',\n      });\n      \n      // If it's a warning, allow the connection; if it's an error, prevent it\n      if (validation.hasError) {\n        return;\n      }\n    }\n    \n    // Add the new edge\n    setEdges(edgs => {\n      const newEdges = addEdge(connection, edgs);\n      \n      // Get source and target node labels for the history\n      const sourceLabel = sourceNode?.data?.label || params.source;\n      const targetLabel = targetNode?.data?.label || params.target;\n      \n      // Add to history\n      addToHistory(nodes, newEdges, `Connected ${sourceLabel} to ${targetLabel}`);\n      \n      return newEdges;\n    });\n  }, [nodes, edges, addToHistory, onElementsRemove]);\n  \n  /**\n   * Handle node dragging\n   * @param {Event} event - The drag event\n   */\n  const onDragOver = useCallback((event) => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  \n  /**\n   * Handle node dropping onto the canvas\n   * @param {Event} event - The drop event\n   */\n  const onDrop = useCallback((event) => {\n    event.preventDefault();\n    \n    // Get the drop position in the canvas coordinates\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const nodeType = event.dataTransfer.getData('application/reactflow/type');\n    \n    // Check if we have this node type\n    if (typeof nodeType === 'undefined' || !nodeType || !DEFAULT_NODE[nodeType]) {\n      return;\n    }\n    \n    // Calculate the position where the node was dropped\n    const position = reactFlowInstance.screenToFlowPosition({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    });\n    \n    // Get node template based on the type\n    const newNode = {\n      ...DEFAULT_NODE[nodeType],\n      position,\n      id: `${nodeType}-${Date.now()}`,\n    };\n    \n    // Add the new node\n    addElement(newNode);\n    \n    // Show notification\n    setNotification({\n      open: true,\n      message: `Added new ${nodeType.replace('Node', '')} node`,\n      severity: 'success',\n    });\n    \n  }, [reactFlowInstance, addElement]);\n  \n  /**\n   * Handle saving the flow\n   */\n  const handleSave = useCallback(() => {\n    if (onSave) {\n      // Combine nodes and edges for backward compatibility\n      onSave([...nodes, ...edges]);\n      \n      // Show notification\n      setNotification({\n        open: true,\n        message: 'Flow saved successfully',\n        severity: 'success',\n      });\n    }\n  }, [nodes, edges, onSave]);\n  \n  /**\n   * Handle validating the flow\n   */\n  const handleValidate = useCallback(() => {\n    // Run flow validation\n    const validationResult = validateFlow(nodes, edges);\n    \n    // Update notifications with validation results\n    if (validationResult.isValid) {\n      setNotification({\n        open: true,\n        message: 'Flow validation passed successfully',\n        severity: 'success',\n      });\n    } else {\n      // Get the first error or warning message to display\n      const message = validationResult.hasErrors\n        ? validationResult.errors[0]\n        : validationResult.hasWarnings\n          ? validationResult.warnings[0]\n          : 'Flow validation failed';\n          \n      setNotification({\n        open: true,\n        message,\n        severity: validationResult.hasErrors ? 'error' : 'warning',\n      });\n    }\n    \n    // Update node styles with validation results\n    setNodes(nds => {\n      return nds.map(node => {\n        // Apply validation results to nodes\n        if (validationResult.nodeValidation[node.id]) {\n          return {\n            ...node,\n            data: {\n              ...node.data,\n              validation: validationResult.nodeValidation[node.id],\n            }\n          };\n        }\n        return node;\n      });\n    });\n    \n    // Update edge styles with validation results\n    setEdges(edgs => {\n      return edgs.map(edge => {\n        // Apply validation results to edges\n        if (validationResult.edgeValidation[edge.id]) {\n          return {\n            ...edge,\n            data: {\n              ...edge.data,\n              validation: validationResult.edgeValidation[edge.id],\n            }\n          };\n        }\n        return edge;\n      });\n    });\n    \n    // If there's an external validation handler, call it with the result\n    if (onValidate) {\n      onValidate([...nodes, ...edges], validationResult);\n    }\n    \n    return validationResult.isValid;\n  }, [nodes, edges, onValidate]);\n  \n  /**\n   * Delete selected elements\n   */\n  const handleDelete = useCallback(() => {\n    if (selectedElements.length > 0) {\n      onElementsRemove(selectedElements);\n      setSelectedElements([]);\n      \n      // Show notification\n      setNotification({\n        open: true,\n        message: `Deleted ${selectedElements.length} element(s)`,\n        severity: 'info',\n      });\n    }\n  }, [selectedElements, onElementsRemove]);\n  \n  /**\n   * Show node menu at canvas position\n   * @param {Event} event - The context menu event\n   */\n  const handleContextMenu = useCallback((event) => {\n    event.preventDefault();\n    \n    // Calculate position relative to canvas\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const position = reactFlowInstance.screenToFlowPosition({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top,\n    });\n    \n    setNodeMenuPosition(position);\n    setNodeMenuAnchorEl(event.currentTarget);\n  }, [reactFlowInstance]);\n  \n  /**\n   * Close node menu\n   */\n  const handleCloseNodeMenu = useCallback(() => {\n    setNodeMenuAnchorEl(null);\n  }, []);\n  \n  /**\n   * Add a new node from the context menu\n   * @param {string} nodeType - Type of node to add\n   */\n  const handleAddNode = useCallback((nodeType) => {\n    // Check if we have this node type\n    if (!DEFAULT_NODE[nodeType]) {\n      return;\n    }\n    \n    // Create a new node at the menu position\n    const newNode = {\n      ...DEFAULT_NODE[nodeType],\n      position: nodeMenuPosition,\n      id: `${nodeType}-${Date.now()}`,\n    };\n    \n    // Add the new node\n    addElement(newNode);\n    \n    // Close menu\n    handleCloseNodeMenu();\n    \n    // Show notification\n    setNotification({\n      open: true,\n      message: `Added new ${nodeType.replace('Node', '')} node`,\n      severity: 'success',\n    });\n  }, [nodeMenuPosition, addElement, handleCloseNodeMenu]);\n  \n  /**\n   * Close notification\n   */\n  const handleCloseNotification = useCallback(() => {\n    setNotification({\n      ...notification,\n      open: false,\n    });\n  }, [notification]);\n  \n  return (\n    <Box sx={{ height: '100%', width: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Flow Canvas Toolbar */}\n      <Paper elevation={1} sx={{ width: '100%' }}>\n        <Toolbar variant=\"dense\">\n          <Tooltip title=\"Add Node\">\n            <IconButton \n              onClick={(e) => setNodeMenuAnchorEl(e.currentTarget)}\n              disabled={readOnly}\n            >\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Tooltip title=\"Delete Selected\">\n            <span>\n              <IconButton \n                onClick={handleDelete}\n                disabled={readOnly || selectedElements.length === 0}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </span>\n          </Tooltip>\n          \n          <Divider orientation=\"vertical\" flexItem sx={{ mx: 1 }} />\n          \n          <Tooltip title=\"Undo\">\n            <span>\n              <IconButton \n                onClick={handleUndo}\n                disabled={readOnly || historyIndex === 0}\n              >\n                <UndoIcon />\n              </IconButton>\n            </span>\n          </Tooltip>\n          \n          <Tooltip title=\"Redo\">\n            <span>\n              <IconButton \n                onClick={handleRedo}\n                disabled={readOnly || historyIndex === history.length - 1}\n              >\n                <RedoIcon />\n              </IconButton>\n            </span>\n          </Tooltip>\n          \n          <Divider orientation=\"vertical\" flexItem sx={{ mx: 1 }} />\n          \n          <Tooltip title=\"Save Flow\">\n            <span>\n              <IconButton \n                onClick={handleSave}\n                disabled={readOnly}\n                color=\"primary\"\n              >\n                <SaveIcon />\n              </IconButton>\n            </span>\n          </Tooltip>\n          \n          <Tooltip title=\"Validate Flow\">\n            <IconButton \n              onClick={handleValidate}\n              color=\"secondary\"\n            >\n              <PlayIcon />\n            </IconButton>\n          </Tooltip>\n          \n          <Box sx={{ flexGrow: 1 }} />\n          \n          <Tooltip title={readOnly ? \"Read Only Mode\" : \"Edit Mode\"}>\n            <IconButton color={readOnly ? \"error\" : \"success\"}>\n              {readOnly ? <LockIcon /> : <LockOpenIcon />}\n            </IconButton>\n          </Tooltip>\n          \n          <Tooltip title=\"Flow Settings\">\n            <IconButton>\n              <SettingsIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </Paper>\n      \n      {/* Flow Canvas */}\n      <Box \n        ref={reactFlowWrapper} \n        sx={{ \n          flexGrow: 1, \n          width: '100%', \n          height: 'calc(100% - 48px)',\n          '& .react-flow__node': {\n            cursor: readOnly ? 'default' : 'move',\n          },\n        }}\n      >\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          nodeTypes={nodeTypes}\n          edgeTypes={edgeTypes}\n          onNodesChange={(changes) => {\n            setNodes(nds => {\n              const updatedNodes = applyNodeChanges(changes, nds);\n              return updatedNodes;\n            });\n          }}\n          onEdgesChange={(changes) => {\n            setEdges(edgs => {\n              const updatedEdges = applyEdgeChanges(changes, edgs);\n              return updatedEdges;\n            });\n          }}\n          onConnect={onConnect}\n          onSelectionChange={onElementsSelect}\n          deleteKeyCode={46} // Delete key\n          onInit={(instance) => {\n            // Center the graph after loading\n            instance.fitView({ padding: 0.2 });\n          }}\n          onDragOver={onDragOver}\n          onDrop={onDrop}\n          onContextMenu={handleContextMenu}\n          snapToGrid={true}\n          snapGrid={[15, 15]}\n          defaultZoom={1}\n          minZoom={0.1}\n          maxZoom={1.5}\n          style={defaultFlowStyle}\n          selectionOnDrag={false}\n          multiSelectionKeyCode=\"Control\"\n          selectionMode={1}\n          elementsSelectable={!readOnly}\n          nodesDraggable={!readOnly}\n          nodesConnectable={!readOnly}\n        >\n          <Background\n            variant=\"dots\"\n            gap={12}\n            size={1}\n          />\n          <Controls\n            showInteractive={false}\n          />\n          <MiniMap\n            nodeColor={(node) => {\n              // Color nodes based on their type\n              if (node.type === 'sourceNode') return '#00c853';\n              if (node.type === 'destinationNode') return '#2196f3';\n              if (node.type === 'transformationNode') return '#ff9800';\n              if (node.type === 'filterNode') return '#9c27b0';\n              return '#999';\n            }}\n          />\n        </ReactFlow>\n      </Box>\n      \n      {/* Node Menu */}\n      <Menu\n        anchorEl={nodeMenuAnchorEl}\n        open={Boolean(nodeMenuAnchorEl)}\n        onClose={handleCloseNodeMenu}\n      >\n        <MenuItem onClick={() => handleAddNode('sourceNode')}>Add Source</MenuItem>\n        <MenuItem onClick={() => handleAddNode('destinationNode')}>Add Destination</MenuItem>\n        <MenuItem onClick={() => handleAddNode('transformationNode')}>Add Transformation</MenuItem>\n        <MenuItem onClick={() => handleAddNode('filterNode')}>Add Filter</MenuItem>\n      </Menu>\n      \n      {/* Notification */}\n      <Snackbar \n        open={notification.open} \n        autoHideDuration={4000} \n        onClose={handleCloseNotification}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\n      >\n        <Alert \n          onClose={handleCloseNotification} \n          severity={notification.severity}\n          variant=\"filled\"\n        >\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nFlowCanvasContent.propTypes = {\n  initialElements: PropTypes.array,\n  readOnly: PropTypes.bool,\n  onChange: PropTypes.func,\n  onSave: PropTypes.func,\n  onNodeSelect: PropTypes.func,\n  onEdgeSelect: PropTypes.func,\n  onValidate: PropTypes.func,\n  validationErrors: PropTypes.object,\n};\n\n/**\n * Flow Canvas wrapper with ReactFlowProvider\n */\nconst FlowCanvas = (props) => {\n  return (\n    <ReactFlowProvider>\n      <FlowCanvasContent {...props} />\n    </ReactFlowProvider>\n  );\n};\n\nexport default FlowCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}