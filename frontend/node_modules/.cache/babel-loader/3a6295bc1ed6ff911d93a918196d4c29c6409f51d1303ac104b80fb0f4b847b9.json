{"ast":null,"code":"/**\n * Accessibility Motion Preference Hook\n * \n * A custom hook for detecting and respecting the user's motion preferences.\n * Part of the zero technical debt accessibility implementation.\n * \n * @module hooks/a11y/useA11yPrefersReducedMotion\n */\n\nimport { useState, useEffect } from 'react';\n\n/**\n * Hook to detect and respond to the user's motion preference\n * \n * @param {Object} options - Configuration options\n * @param {boolean} [options.defaultValue=false] - Default value if media query isn't supported\n * @param {boolean} [options.respectOverride=true] - Whether to respect app-specific overrides\n * @returns {boolean} Whether reduced motion is preferred\n */\nconst useA11yPrefersReducedMotion = function () {\n  let {\n    defaultValue = false,\n    respectOverride = true\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Check for app-specific override in localStorage\n  const getInitialValue = () => {\n    if (respectOverride) {\n      try {\n        const storedPreference = localStorage.getItem('a11y-reduced-motion');\n        if (storedPreference !== null) {\n          return storedPreference === 'true';\n        }\n      } catch (error) {\n        // localStorage might be unavailable (e.g., in private browsing)\n        console.warn('Failed to access localStorage for motion preference:', error);\n      }\n    }\n\n    // Use system preference if available\n    if (typeof window !== 'undefined' && 'matchMedia' in window) {\n      return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    }\n\n    // Fall back to default value\n    return defaultValue;\n  };\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(getInitialValue);\n\n  // Update preference when system settings change\n  useEffect(() => {\n    if (typeof window === 'undefined' || !('matchMedia' in window)) {\n      return;\n    }\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    const handleChange = () => {\n      // Only update if we don't have an override\n      if (respectOverride) {\n        try {\n          const storedPreference = localStorage.getItem('a11y-reduced-motion');\n          if (storedPreference !== null) {\n            // Override exists, don't update based on system preference\n            return;\n          }\n        } catch (error) {\n          // Ignore localStorage errors\n        }\n      }\n      setPrefersReducedMotion(mediaQuery.matches);\n    };\n\n    // Set initial value\n    handleChange();\n\n    // Add listener for changes in media query\n    if (mediaQuery.addEventListener) {\n      mediaQuery.addEventListener('change', handleChange);\n    } else {\n      // Older browsers support\n      mediaQuery.addListener(handleChange);\n    }\n\n    // Clean up\n    return () => {\n      if (mediaQuery.removeEventListener) {\n        mediaQuery.removeEventListener('change', handleChange);\n      } else {\n        // Older browsers support\n        mediaQuery.removeListener(handleChange);\n      }\n    };\n  }, [respectOverride]);\n\n  /**\n   * Override the motion preference\n   * @param {boolean|null} value - New preference value (null to clear override)\n   */\n  const setMotionPreference = value => {\n    if (!respectOverride) return;\n    try {\n      if (value === null) {\n        // Clear override\n        localStorage.removeItem('a11y-reduced-motion');\n        // Reset to system preference\n        if (typeof window !== 'undefined' && 'matchMedia' in window) {\n          setPrefersReducedMotion(window.matchMedia('(prefers-reduced-motion: reduce)').matches);\n        } else {\n          setPrefersReducedMotion(defaultValue);\n        }\n      } else {\n        // Set override\n        localStorage.setItem('a11y-reduced-motion', String(Boolean(value)));\n        setPrefersReducedMotion(Boolean(value));\n      }\n    } catch (error) {\n      console.warn('Failed to save motion preference to localStorage:', error);\n    }\n  };\n\n  /**\n   * Clear any override and use system preference\n   */\n  const resetToSystemPreference = () => {\n    setMotionPreference(null);\n  };\n  return {\n    prefersReducedMotion,\n    setMotionPreference,\n    resetToSystemPreference,\n    // Helper animation properties\n    animations: {\n      transition: prefersReducedMotion ? 'none' : undefined,\n      animation: prefersReducedMotion ? 'none' : undefined\n    },\n    // Duration helper - returns 0 if reduced motion is preferred, otherwise the provided duration\n    duration: ms => prefersReducedMotion ? 0 : ms\n  };\n};\nexport default useA11yPrefersReducedMotion;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}