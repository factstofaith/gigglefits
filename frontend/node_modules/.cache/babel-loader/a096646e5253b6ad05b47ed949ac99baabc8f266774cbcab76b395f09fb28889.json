{"ast":null,"code":"/**\n * FileCard Component\n * \n * A reusable card component for displaying file metadata with preview capabilities.\n * Supports various file types with appropriate icons and actions.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, Card, CardActionArea, CardActions, CardContent, CardMedia, Chip, Dialog, IconButton, Tooltip, Typography } from '@mui/material';\n\n// Icons\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport InsertDriveFileOutlinedIcon from '@mui/icons-material/InsertDriveFileOutlined';\nimport DescriptionOutlinedIcon from '@mui/icons-material/DescriptionOutlined';\nimport ImageOutlinedIcon from '@mui/icons-material/ImageOutlined';\nimport PictureAsPdfOutlinedIcon from '@mui/icons-material/PictureAsPdfOutlined';\nimport AudioFileOutlinedIcon from '@mui/icons-material/AudioFileOutlined';\nimport VideocamOutlinedIcon from '@mui/icons-material/VideocamOutlined';\nimport CodeOutlinedIcon from '@mui/icons-material/CodeOutlined';\nimport StorageOutlinedIcon from '@mui/icons-material/StorageOutlined';\nimport FolderZipOutlinedIcon from '@mui/icons-material/FolderZipOutlined';\nimport TableChartOutlinedIcon from '@mui/icons-material/TableChartOutlined';\n\n// File type utilities\nimport { getFileTypeIcon, getFileTypeColor, getFileTypeDescription, generateFileMetadata } from \"../../utils/fileTypeUtils\";\n\n// File preview component\nimport FilePreview from \"./FilePreview\";\n\n/**\n * FileCard component for displaying file information\n * @component\n */\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nconst FileCard = _ref => {\n  let {\n    file,\n    url,\n    name,\n    size,\n    type,\n    lastModified,\n    onPreview,\n    onDownload,\n    onDelete,\n    showActions = true,\n    showPreview = true,\n    compact = false,\n    variant = 'outlined'\n  } = _ref;\n  const [previewOpen, setPreviewOpen] = useState(false);\n  const [fileMetadata, setFileMetadata] = useState(null);\n  useEffect(() => {\n    // Create file metadata object\n    const fileObj = file || {\n      name: name,\n      size: size,\n      type: type,\n      lastModified: lastModified\n    };\n    setFileMetadata(generateFileMetadata(fileObj));\n  }, [file, name, size, type, lastModified]);\n  if (!fileMetadata) {\n    return null;\n  }\n\n  // Format file size\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // Format last modified date\n  const formatDate = dateString => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleString();\n  };\n\n  // Get file icon component based on file type\n  const getFileIconComponent = iconName => {\n    const iconProps = {\n      fontSize: compact ? 'medium' : 'large',\n      sx: {\n        color: getFileTypeColor(fileMetadata.mimeType)\n      }\n    };\n    switch (iconName) {\n      case 'Description':\n        return /*#__PURE__*/_jsx(DescriptionOutlinedIcon, {\n          ...iconProps\n        });\n      case 'Image':\n        return /*#__PURE__*/_jsx(ImageOutlinedIcon, {\n          ...iconProps\n        });\n      case 'PictureAsPdf':\n        return /*#__PURE__*/_jsx(PictureAsPdfOutlinedIcon, {\n          ...iconProps\n        });\n      case 'AudioFile':\n        return /*#__PURE__*/_jsx(AudioFileOutlinedIcon, {\n          ...iconProps\n        });\n      case 'VideoFile':\n        return /*#__PURE__*/_jsx(VideocamOutlinedIcon, {\n          ...iconProps\n        });\n      case 'Code':\n        return /*#__PURE__*/_jsx(CodeOutlinedIcon, {\n          ...iconProps\n        });\n      case 'Storage':\n        return /*#__PURE__*/_jsx(StorageOutlinedIcon, {\n          ...iconProps\n        });\n      case 'FolderZip':\n        return /*#__PURE__*/_jsx(FolderZipOutlinedIcon, {\n          ...iconProps\n        });\n      case 'TableChart':\n        return /*#__PURE__*/_jsx(TableChartOutlinedIcon, {\n          ...iconProps\n        });\n      default:\n        return /*#__PURE__*/_jsx(InsertDriveFileOutlinedIcon, {\n          ...iconProps\n        });\n    }\n  };\n\n  // Handle preview click\n  const handlePreviewClick = () => {\n    if (onPreview) {\n      onPreview(fileMetadata);\n    } else {\n      setPreviewOpen(true);\n    }\n  };\n\n  // Handle download click\n  const handleDownloadClick = e => {\n    e.stopPropagation();\n    if (onDownload) {\n      onDownload(fileMetadata);\n    }\n  };\n\n  // Handle delete click\n  const handleDeleteClick = e => {\n    e.stopPropagation();\n    if (onDelete) {\n      onDelete(fileMetadata);\n    }\n  };\n\n  // Close preview dialog\n  const handleClosePreview = () => {\n    setPreviewOpen(false);\n  };\n\n  // Determine if we have a thumbnail URL for images\n  const thumbnailUrl = fileMetadata.mimeType.startsWith('image/') && url ? url : null;\n\n  // For compact cards\n  if (compact) {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Card, {\n        variant: variant,\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          width: '100%',\n          height: '48px',\n          '&:hover': {\n            bgcolor: 'action.hover'\n          }\n        },\n        children: [/*#__PURE__*/_jsxs(CardActionArea, {\n          onClick: handlePreviewClick,\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            height: '100%',\n            justifyContent: 'flex-start',\n            px: 1\n          },\n          children: [/*#__PURE__*/_jsx(Box, {\n            sx: {\n              mr: 1\n            },\n            children: getFileIconComponent(getFileTypeIcon(fileMetadata.mimeType))\n          }), /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              flex: 1,\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n              overflow: 'hidden',\n              pr: showActions ? 5 : 1\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"body2\",\n              noWrap: true,\n              sx: {\n                overflow: 'hidden',\n                textOverflow: 'ellipsis',\n                maxWidth: '60%'\n              },\n              children: fileMetadata.filename\n            }), /*#__PURE__*/_jsx(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              noWrap: true,\n              children: formatFileSize(fileMetadata.size)\n            })]\n          })]\n        }), showActions && /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            position: 'absolute',\n            right: 8,\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [onPreview && fileMetadata.isPreviewable && /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Preview\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              size: \"small\",\n              onClick: handlePreviewClick,\n              color: \"primary\",\n              children: /*#__PURE__*/_jsx(VisibilityIcon, {\n                fontSize: \"small\"\n              })\n            })\n          }), onDownload && /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Download\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              size: \"small\",\n              onClick: handleDownloadClick,\n              children: /*#__PURE__*/_jsx(DownloadIcon, {\n                fontSize: \"small\"\n              })\n            })\n          }), onDelete && /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Delete\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              size: \"small\",\n              onClick: handleDeleteClick,\n              color: \"error\",\n              children: /*#__PURE__*/_jsx(DeleteIcon, {\n                fontSize: \"small\"\n              })\n            })\n          })]\n        })]\n      }), showPreview && /*#__PURE__*/_jsx(Dialog, {\n        open: previewOpen,\n        onClose: handleClosePreview,\n        maxWidth: \"lg\",\n        fullWidth: true,\n        children: /*#__PURE__*/_jsx(FilePreview, {\n          file: file,\n          url: url,\n          mimeType: fileMetadata.mimeType,\n          filename: fileMetadata.filename,\n          onDownload: onDownload ? () => onDownload(fileMetadata) : undefined\n        })\n      })]\n    });\n  }\n\n  // For full-sized cards\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Card, {\n      variant: variant,\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        height: '100%',\n        '&:hover': {\n          boxShadow: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxs(CardActionArea, {\n        onClick: handlePreviewClick,\n        children: [thumbnailUrl ? /*#__PURE__*/_jsx(CardMedia, {\n          component: \"img\",\n          height: \"140\",\n          image: thumbnailUrl,\n          alt: fileMetadata.filename,\n          sx: {\n            objectFit: 'contain',\n            bgcolor: 'background.default'\n          }\n        }) : /*#__PURE__*/_jsx(Box, {\n          sx: {\n            height: 140,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            bgcolor: 'background.default'\n          },\n          children: getFileIconComponent(getFileTypeIcon(fileMetadata.mimeType))\n        }), /*#__PURE__*/_jsxs(CardContent, {\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle2\",\n            noWrap: true,\n            title: fileMetadata.filename,\n            gutterBottom: true,\n            children: fileMetadata.filename\n          }), /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              mb: 1\n            },\n            children: [/*#__PURE__*/_jsx(Chip, {\n              label: fileMetadata.description,\n              size: \"small\",\n              sx: {\n                height: 20,\n                fontSize: '0.7rem',\n                bgcolor: getFileTypeColor(fileMetadata.mimeType) + '22',\n                color: getFileTypeColor(fileMetadata.mimeType)\n              }\n            }), /*#__PURE__*/_jsx(Typography, {\n              variant: \"caption\",\n              color: \"text.secondary\",\n              children: formatFileSize(fileMetadata.size)\n            })]\n          }), fileMetadata.lastModified && /*#__PURE__*/_jsxs(Typography, {\n            variant: \"caption\",\n            color: \"text.secondary\",\n            display: \"block\",\n            children: [\"Modified: \", formatDate(fileMetadata.lastModified)]\n          })]\n        })]\n      }), showActions && /*#__PURE__*/_jsxs(CardActions, {\n        sx: {\n          mt: 'auto',\n          justifyContent: 'flex-end'\n        },\n        children: [onPreview && fileMetadata.isPreviewable && /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Preview\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            size: \"small\",\n            onClick: handlePreviewClick,\n            color: \"primary\",\n            children: /*#__PURE__*/_jsx(VisibilityIcon, {\n              fontSize: \"small\"\n            })\n          })\n        }), onDownload && /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Download\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            size: \"small\",\n            onClick: handleDownloadClick,\n            children: /*#__PURE__*/_jsx(DownloadIcon, {\n              fontSize: \"small\"\n            })\n          })\n        }), onDelete && /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Delete\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            size: \"small\",\n            onClick: handleDeleteClick,\n            color: \"error\",\n            children: /*#__PURE__*/_jsx(DeleteIcon, {\n              fontSize: \"small\"\n            })\n          })\n        })]\n      })]\n    }), showPreview && /*#__PURE__*/_jsx(Dialog, {\n      open: previewOpen,\n      onClose: handleClosePreview,\n      maxWidth: \"lg\",\n      fullWidth: true,\n      children: /*#__PURE__*/_jsx(FilePreview, {\n        file: file,\n        url: url,\n        mimeType: fileMetadata.mimeType,\n        filename: fileMetadata.filename,\n        onDownload: onDownload ? () => onDownload(fileMetadata) : undefined\n      })\n    })]\n  });\n};\nexport default FileCard;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}