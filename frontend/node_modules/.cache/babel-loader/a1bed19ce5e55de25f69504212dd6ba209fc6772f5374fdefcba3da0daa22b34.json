{"ast":null,"code":"/**\n * Polyfills for browser compatibility\n */// Promise polyfill\nif(typeof Promise==='undefined'){// Promise polyfill would be imported here in a real implementation\nconsole.warn('Promise polyfill is required but not implemented in this stub');}// Object.assign polyfill\nif(typeof Object.assign!=='function'){Object.assign=function(target){'use strict';if(target==null){throw new TypeError('Cannot convert undefined or null to object');}target=Object(target);for(var index=1;index<arguments.length;index++){var source=arguments[index];if(source!=null){for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}}return target;};}// Array.from polyfill\nif(!Array.from){Array.from=function(arrayLike){return[].slice.call(arrayLike);};}console.debug('Polyfills loaded');","map":{"version":3,"names":["Promise","console","warn","Object","assign","target","TypeError","index","arguments","length","source","key","prototype","hasOwnProperty","call","Array","from","arrayLike","slice","debug"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/polyfills.js"],"sourcesContent":["/**\n * Polyfills for browser compatibility\n */\n\n// Promise polyfill\nif (typeof Promise === 'undefined') {\n  // Promise polyfill would be imported here in a real implementation\n  console.warn('Promise polyfill is required but not implemented in this stub');\n}\n\n// Object.assign polyfill\nif (typeof Object.assign !== 'function') {\n  Object.assign = function(target) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n      var source = arguments[index];\n      if (source != null) {\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}\n\n// Array.from polyfill\nif (!Array.from) {\n  Array.from = function(arrayLike) {\n    return [].slice.call(arrayLike);\n  };\n}\n\nconsole.debug('Polyfills loaded');\n"],"mappings":"AAAA;AACA;AACA,GAEA;AACA,GAAI,MAAO,CAAAA,OAAO,GAAK,WAAW,CAAE,CAClC;AACAC,OAAO,CAACC,IAAI,CAAC,+DAA+D,CAAC,CAC/E,CAEA;AACA,GAAI,MAAO,CAAAC,MAAM,CAACC,MAAM,GAAK,UAAU,CAAE,CACvCD,MAAM,CAACC,MAAM,CAAG,SAASC,MAAM,CAAE,CAC/B,YAAY,CACZ,GAAIA,MAAM,EAAI,IAAI,CAAE,CAClB,KAAM,IAAI,CAAAC,SAAS,CAAC,4CAA4C,CAAC,CACnE,CAEAD,MAAM,CAAGF,MAAM,CAACE,MAAM,CAAC,CACvB,IAAK,GAAI,CAAAE,KAAK,CAAG,CAAC,CAAEA,KAAK,CAAGC,SAAS,CAACC,MAAM,CAAEF,KAAK,EAAE,CAAE,CACrD,GAAI,CAAAG,MAAM,CAAGF,SAAS,CAACD,KAAK,CAAC,CAC7B,GAAIG,MAAM,EAAI,IAAI,CAAE,CAClB,IAAK,GAAI,CAAAC,GAAG,GAAI,CAAAD,MAAM,CAAE,CACtB,GAAIP,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,MAAM,CAAEC,GAAG,CAAC,CAAE,CACrDN,MAAM,CAACM,GAAG,CAAC,CAAGD,MAAM,CAACC,GAAG,CAAC,CAC3B,CACF,CACF,CACF,CACA,MAAO,CAAAN,MAAM,CACf,CAAC,CACH,CAEA;AACA,GAAI,CAACU,KAAK,CAACC,IAAI,CAAE,CACfD,KAAK,CAACC,IAAI,CAAG,SAASC,SAAS,CAAE,CAC/B,MAAO,EAAE,CAACC,KAAK,CAACJ,IAAI,CAACG,SAAS,CAAC,CACjC,CAAC,CACH,CAEAhB,OAAO,CAACkB,KAAK,CAAC,kBAAkB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}