{"ast":null,"code":"/**\n * SharePoint Credential Manager Component\n *\n * A component for managing and storing SharePoint/Microsoft Graph API credentials\n * with support for various authentication methods.\n *\n * @component\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Button, Card, CardActions, CardContent, CircularProgress, Collapse, Divider, FormControl, FormControlLabel, FormHelperText, Grid, IconButton, InputAdornment, InputLabel, MenuItem, OutlinedInput, Radio, RadioGroup, Select, Stack, Switch, Tab, Tabs, TextField, Tooltip, Typography, Alert, AlertTitle, Paper } from '@mui/material';\nimport { CheckCircle as CheckCircleIcon, ErrorOutline as ErrorOutlineIcon, Help as HelpIcon, Key as KeyIcon, Refresh as RefreshIcon, Visibility as VisibilityIcon, VisibilityOff as VisibilityOffIcon, VerifiedUser as VerifiedUserIcon, Link as LinkIcon, AccountCircle as AccountCircleIcon, Apps as AppsIcon, Security as SecurityIcon, Terminal as TerminalIcon, AddCircleOutline as AddCircleOutlineIcon, Settings as SettingsIcon, InfoOutlined as InfoOutlinedIcon } from '@mui/icons-material';\n\n/**\n * SharePoint Credential Manager Component\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst SharePointCredentialManager = _ref => {\n  let {\n    credentials = {},\n    onChange = () => {},\n    onTest = () => {},\n    testResults = null,\n    loading = false,\n    disabled = false\n  } = _ref;\n  // Authentication method state\n  const [authMethod, setAuthMethod] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.authMethod) || 'oauth');\n\n  // OAuth credentials\n  const [tenantId, setTenantId] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.tenantId) || '');\n  const [clientId, setClientId] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.clientId) || '');\n  const [clientSecret, setClientSecret] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.clientSecret) || '');\n  const [showClientSecret, setShowClientSecret] = useState(false);\n\n  // App-only credentials\n  const [appId, setAppId] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.appId) || '');\n  const [appSecret, setAppSecret] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.appSecret) || '');\n  const [showAppSecret, setShowAppSecret] = useState(false);\n\n  // Certificate credentials\n  const [certificateThumbprint, setCertificateThumbprint] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.certificateThumbprint) || '');\n  const [certificatePrivateKey, setCertificatePrivateKey] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.certificatePrivateKey) || '');\n  const [showPrivateKey, setShowPrivateKey] = useState(false);\n\n  // General settings\n  const [resourceUrl, setResourceUrl] = useState((credentials === null || credentials === void 0 ? void 0 : credentials.resourceUrl) || 'https://graph.microsoft.com');\n  const [advancedOpen, setAdvancedOpen] = useState(false);\n  const [error, setError] = useState(null);\n\n  /**\n   * Handle authentication method change\n   */\n  const handleAuthMethodChange = event => {\n    setAuthMethod(event.target.value);\n  };\n\n  /**\n   * Update credentials when values change\n   */\n  useEffect(() => {\n    // Common parameters for all auth methods\n    const baseCredentials = {\n      authMethod,\n      resourceUrl\n    };\n\n    // Method-specific parameters\n    let methodCredentials = {};\n    if (authMethod === 'oauth') {\n      methodCredentials = {\n        tenantId,\n        clientId,\n        clientSecret\n      };\n    } else if (authMethod === 'app') {\n      methodCredentials = {\n        tenantId,\n        appId,\n        appSecret\n      };\n    } else if (authMethod === 'certificate') {\n      methodCredentials = {\n        tenantId,\n        clientId,\n        certificateThumbprint,\n        certificatePrivateKey\n      };\n    }\n\n    // Only update if at least the tenant ID is provided\n    if (tenantId) {\n      onChange({\n        ...baseCredentials,\n        ...methodCredentials\n      });\n    }\n  }, [authMethod, tenantId, clientId, clientSecret, appId, appSecret, certificateThumbprint, certificatePrivateKey, resourceUrl, onChange]);\n\n  /**\n   * Test the credentials\n   */\n  const handleTest = useCallback(() => {\n    setError(null);\n    onTest();\n  }, [onTest]);\n\n  /**\n   * Generate test credentials for development\n   */\n  const generateTestCredentials = useCallback(() => {\n    // Only allow in development environment\n    if (process.env.NODE_ENV !== 'development' && process.env.NODE_ENV !== 'test') {\n      setError('Test credentials can only be generated in development environment');\n      return;\n    }\n\n    // Generate appropriate test credentials based on auth method\n    if (authMethod === 'oauth') {\n      setTenantId('contoso.onmicrosoft.com');\n      setClientId('12345678-1234-1234-1234-123456789012');\n      setClientSecret('abcdefghijklmnopqrstuvwxyz12345678');\n    } else if (authMethod === 'app') {\n      setTenantId('contoso.onmicrosoft.com');\n      setAppId('87654321-4321-4321-4321-210987654321');\n      setAppSecret('zyxwvutsrqponmlkjihgfedcba87654321');\n    } else if (authMethod === 'certificate') {\n      setTenantId('contoso.onmicrosoft.com');\n      setClientId('12345678-1234-1234-1234-123456789012');\n      setCertificateThumbprint('1234567890ABCDEF1234567890ABCDEF12345678');\n      setCertificatePrivateKey('-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\\nMzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu\\nNMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ\\n-----END PRIVATE KEY-----');\n    }\n    setResourceUrl('https://graph.microsoft.com');\n  }, [authMethod]);\n  return /*#__PURE__*/_jsxs(Card, {\n    variant: \"outlined\",\n    children: [/*#__PURE__*/_jsxs(CardContent, {\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"SharePoint Connection Credentials\"\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        paragraph: true,\n        children: \"Configure Microsoft SharePoint credentials using the Microsoft Graph API for secure access to sites and document libraries.\"\n      }), /*#__PURE__*/_jsxs(FormControl, {\n        component: \"fieldset\",\n        sx: {\n          mb: 3\n        },\n        disabled: disabled || loading,\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle2\",\n          gutterBottom: true,\n          children: \"Authentication Method\"\n        }), /*#__PURE__*/_jsxs(RadioGroup, {\n          name: \"auth-method\",\n          value: authMethod,\n          onChange: handleAuthMethodChange,\n          row: true,\n          children: [/*#__PURE__*/_jsx(FormControlLabel, {\n            value: \"oauth\",\n            control: /*#__PURE__*/_jsx(Radio, {}),\n            label: /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsx(AccountCircleIcon, {\n                fontSize: \"small\",\n                sx: {\n                  mr: 0.5\n                }\n              }), /*#__PURE__*/_jsx(Typography, {\n                variant: \"body2\",\n                children: \"OAuth 2.0\"\n              })]\n            })\n          }), /*#__PURE__*/_jsx(FormControlLabel, {\n            value: \"app\",\n            control: /*#__PURE__*/_jsx(Radio, {}),\n            label: /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsx(AppsIcon, {\n                fontSize: \"small\",\n                sx: {\n                  mr: 0.5\n                }\n              }), /*#__PURE__*/_jsx(Typography, {\n                variant: \"body2\",\n                children: \"App-only authentication\"\n              })]\n            })\n          }), /*#__PURE__*/_jsx(FormControlLabel, {\n            value: \"certificate\",\n            control: /*#__PURE__*/_jsx(Radio, {}),\n            label: /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsx(SecurityIcon, {\n                fontSize: \"small\",\n                sx: {\n                  mr: 0.5\n                }\n              }), /*#__PURE__*/_jsx(Typography, {\n                variant: \"body2\",\n                children: \"Certificate-based\"\n              })]\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(Divider, {\n        sx: {\n          my: 2\n        }\n      }), /*#__PURE__*/_jsx(Grid, {\n        container: true,\n        spacing: 2,\n        children: /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsx(TextField, {\n            id: \"tenant-id\",\n            label: \"Tenant ID or Domain\",\n            fullWidth: true,\n            value: tenantId,\n            onChange: e => setTenantId(e.target.value),\n            disabled: disabled || loading,\n            required: true,\n            variant: \"outlined\",\n            placeholder: \"contoso.onmicrosoft.com\",\n            helperText: \"Enter your Microsoft 365 tenant ID or domain name\",\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsx(LinkIcon, {\n                  fontSize: \"small\"\n                })\n              })\n            }\n          })\n        })\n      }), authMethod === 'oauth' && /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsx(TextField, {\n            id: \"client-id\",\n            label: \"Application (client) ID\",\n            fullWidth: true,\n            value: clientId,\n            onChange: e => setClientId(e.target.value),\n            disabled: disabled || loading,\n            required: true,\n            variant: \"outlined\",\n            placeholder: \"12345678-1234-1234-1234-123456789012\",\n            helperText: \"Client ID from Azure App Registration\",\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsx(AppsIcon, {\n                  fontSize: \"small\"\n                })\n              })\n            }\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxs(FormControl, {\n            variant: \"outlined\",\n            fullWidth: true,\n            required: true,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              htmlFor: \"client-secret\",\n              children: \"Client Secret\"\n            }), /*#__PURE__*/_jsx(OutlinedInput, {\n              id: \"client-secret\",\n              type: showClientSecret ? 'text' : 'password',\n              value: clientSecret,\n              onChange: e => setClientSecret(e.target.value),\n              disabled: disabled || loading,\n              placeholder: \"Enter client secret\",\n              startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsx(KeyIcon, {\n                  fontSize: \"small\"\n                })\n              }),\n              endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsx(IconButton, {\n                  \"aria-label\": \"toggle secret visibility\",\n                  onClick: () => setShowClientSecret(!showClientSecret),\n                  edge: \"end\",\n                  children: showClientSecret ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                })\n              }),\n              label: \"Client Secret\"\n            }), /*#__PURE__*/_jsx(FormHelperText, {\n              children: \"Secret value from Azure App Registration\"\n            })]\n          })\n        })]\n      }), authMethod === 'app' && /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsx(TextField, {\n            id: \"app-id\",\n            label: \"App ID\",\n            fullWidth: true,\n            value: appId,\n            onChange: e => setAppId(e.target.value),\n            disabled: disabled || loading,\n            required: true,\n            variant: \"outlined\",\n            placeholder: \"87654321-4321-4321-4321-210987654321\",\n            helperText: \"Application ID from Azure App Registration\",\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsx(AppsIcon, {\n                  fontSize: \"small\"\n                })\n              })\n            }\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxs(FormControl, {\n            variant: \"outlined\",\n            fullWidth: true,\n            required: true,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              htmlFor: \"app-secret\",\n              children: \"App Secret\"\n            }), /*#__PURE__*/_jsx(OutlinedInput, {\n              id: \"app-secret\",\n              type: showAppSecret ? 'text' : 'password',\n              value: appSecret,\n              onChange: e => setAppSecret(e.target.value),\n              disabled: disabled || loading,\n              placeholder: \"Enter app secret\",\n              startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsx(KeyIcon, {\n                  fontSize: \"small\"\n                })\n              }),\n              endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsx(IconButton, {\n                  \"aria-label\": \"toggle secret visibility\",\n                  onClick: () => setShowAppSecret(!showAppSecret),\n                  edge: \"end\",\n                  children: showAppSecret ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                })\n              }),\n              label: \"App Secret\"\n            }), /*#__PURE__*/_jsx(FormHelperText, {\n              children: \"App secret value from Azure App Registration\"\n            })]\n          })\n        })]\n      }), authMethod === 'certificate' && /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 2,\n        sx: {\n          mt: 1\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsx(TextField, {\n            id: \"client-id-cert\",\n            label: \"Application (client) ID\",\n            fullWidth: true,\n            value: clientId,\n            onChange: e => setClientId(e.target.value),\n            disabled: disabled || loading,\n            required: true,\n            variant: \"outlined\",\n            placeholder: \"12345678-1234-1234-1234-123456789012\",\n            helperText: \"Client ID from Azure App Registration\",\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsx(AppsIcon, {\n                  fontSize: \"small\"\n                })\n              })\n            }\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsx(TextField, {\n            id: \"certificate-thumbprint\",\n            label: \"Certificate Thumbprint\",\n            fullWidth: true,\n            value: certificateThumbprint,\n            onChange: e => setCertificateThumbprint(e.target.value),\n            disabled: disabled || loading,\n            required: true,\n            variant: \"outlined\",\n            placeholder: \"1234567890ABCDEF1234567890ABCDEF12345678\",\n            helperText: \"Thumbprint of the certificate registered in Azure AD\",\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsx(VerifiedUserIcon, {\n                  fontSize: \"small\"\n                })\n              })\n            }\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxs(FormControl, {\n            variant: \"outlined\",\n            fullWidth: true,\n            required: true,\n            children: [/*#__PURE__*/_jsx(InputLabel, {\n              htmlFor: \"certificate-private-key\",\n              children: \"Certificate Private Key\"\n            }), /*#__PURE__*/_jsx(OutlinedInput, {\n              id: \"certificate-private-key\",\n              type: showPrivateKey ? 'text' : 'password',\n              value: certificatePrivateKey,\n              onChange: e => setCertificatePrivateKey(e.target.value),\n              disabled: disabled || loading,\n              placeholder: \"-----BEGIN PRIVATE KEY-----...\",\n              multiline: true,\n              rows: 3,\n              startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"start\",\n                children: /*#__PURE__*/_jsx(KeyIcon, {\n                  fontSize: \"small\"\n                })\n              }),\n              endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsx(IconButton, {\n                  \"aria-label\": \"toggle private key visibility\",\n                  onClick: () => setShowPrivateKey(!showPrivateKey),\n                  edge: \"end\",\n                  children: showPrivateKey ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                })\n              }),\n              label: \"Certificate Private Key\"\n            }), /*#__PURE__*/_jsx(FormHelperText, {\n              children: \"Private key in PEM format\"\n            })]\n          })\n        })]\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsx(Button, {\n          startIcon: /*#__PURE__*/_jsx(SettingsIcon, {}),\n          onClick: () => setAdvancedOpen(!advancedOpen),\n          size: \"small\",\n          color: \"primary\",\n          disabled: disabled || loading,\n          children: advancedOpen ? 'Hide Advanced Options' : 'Show Advanced Options'\n        }), /*#__PURE__*/_jsx(Collapse, {\n          in: advancedOpen,\n          children: /*#__PURE__*/_jsx(Paper, {\n            variant: \"outlined\",\n            sx: {\n              p: 2,\n              mt: 2\n            },\n            children: /*#__PURE__*/_jsxs(Grid, {\n              container: true,\n              spacing: 2,\n              children: [/*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsx(TextField, {\n                  id: \"resource-url\",\n                  label: \"Resource URL\",\n                  fullWidth: true,\n                  value: resourceUrl,\n                  onChange: e => setResourceUrl(e.target.value),\n                  disabled: disabled || loading,\n                  variant: \"outlined\",\n                  placeholder: \"https://graph.microsoft.com\",\n                  helperText: \"The Microsoft Graph API endpoint (default: https://graph.microsoft.com)\",\n                  InputProps: {\n                    startAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                      position: \"start\",\n                      children: /*#__PURE__*/_jsx(LinkIcon, {\n                        fontSize: \"small\"\n                      })\n                    })\n                  }\n                })\n              }), process.env.NODE_ENV === 'development' && /*#__PURE__*/_jsxs(Grid, {\n                item: true,\n                xs: 12,\n                children: [/*#__PURE__*/_jsx(Button, {\n                  variant: \"outlined\",\n                  color: \"secondary\",\n                  onClick: generateTestCredentials,\n                  startIcon: /*#__PURE__*/_jsx(TerminalIcon, {}),\n                  size: \"small\",\n                  disabled: disabled || loading,\n                  children: \"Generate Test Credentials\"\n                }), /*#__PURE__*/_jsx(Typography, {\n                  variant: \"caption\",\n                  display: \"block\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: \"For development environment only: Creates simulated credentials for testing\"\n                })]\n              })]\n            })\n          })\n        })]\n      }), error && /*#__PURE__*/_jsxs(Alert, {\n        severity: \"error\",\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsx(AlertTitle, {\n          children: \"Error\"\n        }), error]\n      }), testResults && /*#__PURE__*/_jsxs(Alert, {\n        severity: testResults.status === 'success' ? 'success' : 'error',\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsx(AlertTitle, {\n          children: testResults.status === 'success' ? 'Connection Successful' : 'Connection Failed'\n        }), testResults.message, testResults.details && /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            mt: 1\n          },\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"body2\",\n            fontWeight: \"bold\",\n            children: \"Details:\"\n          }), /*#__PURE__*/_jsx(Box, {\n            component: \"pre\",\n            sx: {\n              mt: 1,\n              p: 1,\n              bgcolor: 'background.paper',\n              borderRadius: 1,\n              fontSize: '0.75rem',\n              maxHeight: '150px',\n              overflow: 'auto'\n            },\n            children: typeof testResults.details === 'string' ? testResults.details : JSON.stringify(testResults.details, null, 2)\n          })]\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(CardActions, {\n      sx: {\n        p: 2,\n        pt: 0\n      },\n      children: [/*#__PURE__*/_jsx(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleTest,\n        disabled: disabled || loading || !tenantId || authMethod === 'oauth' && (!clientId || !clientSecret) || authMethod === 'app' && (!appId || !appSecret) || authMethod === 'certificate' && (!clientId || !certificateThumbprint || !certificatePrivateKey),\n        startIcon: loading ? /*#__PURE__*/_jsx(CircularProgress, {\n          size: 20\n        }) : /*#__PURE__*/_jsx(VerifiedUserIcon, {}),\n        children: loading ? 'Testing Connection...' : 'Test Connection'\n      }), /*#__PURE__*/_jsx(Tooltip, {\n        title: \"Information about required permissions\",\n        children: /*#__PURE__*/_jsx(IconButton, {\n          color: \"info\",\n          \"aria-label\": \"help\",\n          onClick: () => {\n            // Open help documentation in a new tab or show info dialog\n            window.open('https://docs.microsoft.com/en-us/graph/permissions-reference', '_blank');\n          },\n          children: /*#__PURE__*/_jsx(InfoOutlinedIcon, {})\n        })\n      })]\n    })]\n  });\n};\nexport default SharePointCredentialManager;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}