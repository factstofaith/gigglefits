{"ast":null,"code":"/**\n * Help Context\n * \n * A context provider for managing context-sensitive help and guided tours across the application.\n * Centralizes help content, tour definitions, and user help preferences.\n */import React,{createContext,useContext,useState,useCallback,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";// Initial help content organized by feature area\nconst initialHelpContent={// Integration section help items\nintegration:{creation:{title:'Integration Creation',content:'Create a new integration by specifying its name, description, and type. An integration defines how data moves between systems.'},configuration:{title:'Configuration',content:'Configure your integration with source/destination details, transformation rules, and scheduling options.'},schedule:{title:'Scheduling',content:'Set up when your integration should run automatically. Supports one-time, recurring, and event-based schedules.'},azureBlob:{title:'Azure Blob Storage',content:'Connect to Azure Blob Storage to use it as a source or destination for your integration data.'},fieldMapping:{title:'Field Mapping',content:'Map fields from your source data to your destination schema, with optional transformations.'}},// Transformation help items\ntransformation:{dataType:{title:'Data Type Conversion',content:'Convert data between different types such as string, number, boolean, date, etc.'},textFormat:{title:'Text Formatting',content:'Apply text formatting operations like case conversion, trimming, concatenation, etc.'},formulas:{title:'Custom Formulas',content:'Create custom formulas to transform your data using expressions with various functions and operators.'}},// Admin section help items\nadmin:{users:{title:'User Management',content:'Manage user accounts, roles, and permissions for accessing different parts of the platform.'},monitoring:{title:'Monitoring Dashboard',content:'View the status and performance metrics of your integrations, including success rates, execution times, and error logs.'}},// General help items\ngeneral:{navigation:{title:'Navigation',content:'Use the navigation menu to access different areas of the platform including integrations, datasets, templates, and admin features.'},settings:{title:'Settings',content:'Configure your user preferences, notifications, and account settings.'}}};// Initial tour definitions\nconst initialTours=[{id:'integration-basics',title:'Integration Basics',description:'Learn the fundamentals of creating and managing integrations',duration:'2',steps:[{content:'Welcome to the Integration Platform! This tour will guide you through the basics of creating and managing integrations.',overlay:true,pulse:false},{elementSelector:'.integration-list',content:'This is the integration list where you can see all your existing integrations and their status.',overlay:true,pulse:true},{elementSelector:'.create-integration-button',content:'Click here to create a new integration. This will open a dialog where you can define the basic properties of your integration.',overlay:true,pulse:true},{elementSelector:'.integration-filters',content:'Use these filters to quickly find specific integrations by status, type, or other properties.',overlay:true,pulse:true},{content:'That\\'s the basics of working with integrations! You can now explore more features or take other guided tours to learn more.',overlay:true,pulse:false}]},{id:'data-transformation',title:'Data Transformation Tour',description:'Learn how to transform and map data between systems',duration:'3',steps:[{content:'This tour will show you how to transform data between different systems using our transformation nodes.',overlay:true,pulse:false},{elementSelector:'.transformation-nodes',content:'These are transformation nodes that you can add to your integration flow to modify data as it passes through.',overlay:true,pulse:true},{elementSelector:'.node-palette',content:'The node palette contains all available transformation types. You can drag and drop them onto your integration flow.',overlay:true,pulse:true},{elementSelector:'.field-mapping',content:'The field mapping interface allows you to connect source fields to destination fields, with transformations in between.',overlay:true,pulse:true},{elementSelector:'.formula-editor',content:'The formula editor lets you create custom transformations using expressions with various functions and operators.',overlay:true,pulse:true},{content:'Now you know how to transform data in your integrations! You can create complex transformations by combining multiple nodes.',overlay:true,pulse:false}]},{id:'scheduling',title:'Integration Scheduling',description:'Learn how to schedule integrations to run automatically',duration:'2',steps:[{content:'This tour will show you how to schedule your integrations to run automatically at specific times or on specific events.',overlay:true,pulse:false},{elementSelector:'.schedule-configuration',content:'The scheduling tab lets you configure when your integration should run. You can choose from various schedule types.',overlay:true,pulse:true},{elementSelector:'.schedule-options',content:'Choose from options like on-demand, recurring, or event-based schedules. Each has different configuration options.',overlay:true,pulse:true},{elementSelector:'.cron-builder',content:'For advanced scheduling, you can use the cron expression builder to create complex schedules with precise timing.',overlay:true,pulse:true},{content:'Now you know how to schedule your integrations to run automatically! You can monitor execution results in the history tab.',overlay:true,pulse:false}]}];// Create the context\nconst HelpContext=/*#__PURE__*/createContext();/**\n * Hook to use the help context\n * @returns {Object} Help context values and functions\n */export const useHelp=()=>{const context=useContext(HelpContext);if(!context){throw new Error('useHelp must be used within a HelpProvider');}return context;};/**\n * Help provider component\n * @param {Object} props - Component props\n * @returns {JSX.Element} Help provider component\n */export const HelpProvider=_ref=>{let{children}=_ref;// State for help content and tours\nconst[helpContent,setHelpContent]=useState(initialHelpContent);const[tours,setTours]=useState(initialTours);const[activeTourId,setActiveTourId]=useState(null);const[helpPreferences,setHelpPreferences]=useState({showHelp:true,showTours:true,completedTours:[]});// Load help preferences from localStorage\nuseEffect(()=>{try{const storedPreferences=localStorage.getItem('tap_help_preferences');if(storedPreferences){setHelpPreferences(JSON.parse(storedPreferences));}}catch(error){console.error('Error loading help preferences:',error);}},[]);// Save help preferences to localStorage\nconst saveHelpPreferences=useCallback(newPreferences=>{try{localStorage.setItem('tap_help_preferences',JSON.stringify(newPreferences));setHelpPreferences(newPreferences);}catch(error){console.error('Error saving help preferences:',error);}},[]);// Toggle help visibility\nconst toggleHelpVisibility=useCallback(()=>{const newPreferences={...helpPreferences,showHelp:!helpPreferences.showHelp};saveHelpPreferences(newPreferences);},[helpPreferences,saveHelpPreferences]);// Toggle tours visibility\nconst toggleToursVisibility=useCallback(()=>{const newPreferences={...helpPreferences,showTours:!helpPreferences.showTours};saveHelpPreferences(newPreferences);},[helpPreferences,saveHelpPreferences]);// Start a tour\nconst startTour=useCallback(tourId=>{if(tours.find(tour=>tour.id===tourId)){setActiveTourId(tourId);}},[tours]);// Handle tour completion\nconst handleTourComplete=useCallback(tourId=>{const newCompletedTours=[...helpPreferences.completedTours,tourId];const newPreferences={...helpPreferences,completedTours:newCompletedTours};saveHelpPreferences(newPreferences);setActiveTourId(null);},[helpPreferences,saveHelpPreferences]);// Get help content for a specific key\nconst getHelpContent=useCallback((section,key)=>{if(helpContent[section]&&helpContent[section][key]){return helpContent[section][key];}return null;},[helpContent]);// Add custom help content\nconst addHelpContent=useCallback((section,key,content)=>{setHelpContent(prevContent=>({...prevContent,[section]:{...(prevContent[section]||{}),[key]:content}}));},[]);// Add a new tour\nconst addTour=useCallback(tour=>{if(!tour.id||!tour.title||!tour.steps||!Array.isArray(tour.steps)){throw new Error('Invalid tour configuration');}setTours(prevTours=>{const existingIndex=prevTours.findIndex(t=>t.id===tour.id);if(existingIndex>=0){// Replace existing tour\nconst newTours=[...prevTours];newTours[existingIndex]=tour;return newTours;}else{// Add new tour\nreturn[...prevTours,tour];}});},[]);// Reset tour completion status\nconst resetTourCompletion=useCallback(()=>{const newPreferences={...helpPreferences,completedTours:[]};saveHelpPreferences(newPreferences);},[helpPreferences,saveHelpPreferences]);// Provide the context value\nconst contextValue={helpContent,tours,activeTourId,helpPreferences,getHelpContent,addHelpContent,addTour,startTour,toggleHelpVisibility,toggleToursVisibility,resetTourCompletion,handleTourComplete};return/*#__PURE__*/_jsx(HelpContext.Provider,{value:contextValue,children:children});};export default HelpContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","jsx","_jsx","initialHelpContent","integration","creation","title","content","configuration","schedule","azureBlob","fieldMapping","transformation","dataType","textFormat","formulas","admin","users","monitoring","general","navigation","settings","initialTours","id","description","duration","steps","overlay","pulse","elementSelector","HelpContext","useHelp","context","Error","HelpProvider","_ref","children","helpContent","setHelpContent","tours","setTours","activeTourId","setActiveTourId","helpPreferences","setHelpPreferences","showHelp","showTours","completedTours","storedPreferences","localStorage","getItem","JSON","parse","error","console","saveHelpPreferences","newPreferences","setItem","stringify","toggleHelpVisibility","toggleToursVisibility","startTour","tourId","find","tour","handleTourComplete","newCompletedTours","getHelpContent","section","key","addHelpContent","prevContent","addTour","Array","isArray","prevTours","existingIndex","findIndex","t","newTours","resetTourCompletion","contextValue","Provider","value"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/contexts/HelpContext.jsx"],"sourcesContent":["/**\n * Help Context\n * \n * A context provider for managing context-sensitive help and guided tours across the application.\n * Centralizes help content, tour definitions, and user help preferences.\n */\n\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// Initial help content organized by feature area\nconst initialHelpContent = {\n  // Integration section help items\n  integration: {\n    creation: {\n      title: 'Integration Creation',\n      content: 'Create a new integration by specifying its name, description, and type. An integration defines how data moves between systems.'\n    },\n    configuration: {\n      title: 'Configuration',\n      content: 'Configure your integration with source/destination details, transformation rules, and scheduling options.'\n    },\n    schedule: {\n      title: 'Scheduling',\n      content: 'Set up when your integration should run automatically. Supports one-time, recurring, and event-based schedules.'\n    },\n    azureBlob: {\n      title: 'Azure Blob Storage',\n      content: 'Connect to Azure Blob Storage to use it as a source or destination for your integration data.'\n    },\n    fieldMapping: {\n      title: 'Field Mapping',\n      content: 'Map fields from your source data to your destination schema, with optional transformations.'\n    }\n  },\n  \n  // Transformation help items\n  transformation: {\n    dataType: {\n      title: 'Data Type Conversion',\n      content: 'Convert data between different types such as string, number, boolean, date, etc.'\n    },\n    textFormat: {\n      title: 'Text Formatting',\n      content: 'Apply text formatting operations like case conversion, trimming, concatenation, etc.'\n    },\n    formulas: {\n      title: 'Custom Formulas',\n      content: 'Create custom formulas to transform your data using expressions with various functions and operators.'\n    }\n  },\n  \n  // Admin section help items\n  admin: {\n    users: {\n      title: 'User Management',\n      content: 'Manage user accounts, roles, and permissions for accessing different parts of the platform.'\n    },\n    monitoring: {\n      title: 'Monitoring Dashboard',\n      content: 'View the status and performance metrics of your integrations, including success rates, execution times, and error logs.'\n    }\n  },\n  \n  // General help items\n  general: {\n    navigation: {\n      title: 'Navigation',\n      content: 'Use the navigation menu to access different areas of the platform including integrations, datasets, templates, and admin features.'\n    },\n    settings: {\n      title: 'Settings',\n      content: 'Configure your user preferences, notifications, and account settings.'\n    }\n  }\n};\n\n// Initial tour definitions\nconst initialTours = [\n  {\n    id: 'integration-basics',\n    title: 'Integration Basics',\n    description: 'Learn the fundamentals of creating and managing integrations',\n    duration: '2',\n    steps: [\n      {\n        content: 'Welcome to the Integration Platform! This tour will guide you through the basics of creating and managing integrations.',\n        overlay: true,\n        pulse: false\n      },\n      {\n        elementSelector: '.integration-list',\n        content: 'This is the integration list where you can see all your existing integrations and their status.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        elementSelector: '.create-integration-button',\n        content: 'Click here to create a new integration. This will open a dialog where you can define the basic properties of your integration.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        elementSelector: '.integration-filters',\n        content: 'Use these filters to quickly find specific integrations by status, type, or other properties.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        content: 'That\\'s the basics of working with integrations! You can now explore more features or take other guided tours to learn more.',\n        overlay: true,\n        pulse: false\n      }\n    ]\n  },\n  {\n    id: 'data-transformation',\n    title: 'Data Transformation Tour',\n    description: 'Learn how to transform and map data between systems',\n    duration: '3',\n    steps: [\n      {\n        content: 'This tour will show you how to transform data between different systems using our transformation nodes.',\n        overlay: true,\n        pulse: false\n      },\n      {\n        elementSelector: '.transformation-nodes',\n        content: 'These are transformation nodes that you can add to your integration flow to modify data as it passes through.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        elementSelector: '.node-palette',\n        content: 'The node palette contains all available transformation types. You can drag and drop them onto your integration flow.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        elementSelector: '.field-mapping',\n        content: 'The field mapping interface allows you to connect source fields to destination fields, with transformations in between.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        elementSelector: '.formula-editor',\n        content: 'The formula editor lets you create custom transformations using expressions with various functions and operators.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        content: 'Now you know how to transform data in your integrations! You can create complex transformations by combining multiple nodes.',\n        overlay: true,\n        pulse: false\n      }\n    ]\n  },\n  {\n    id: 'scheduling',\n    title: 'Integration Scheduling',\n    description: 'Learn how to schedule integrations to run automatically',\n    duration: '2',\n    steps: [\n      {\n        content: 'This tour will show you how to schedule your integrations to run automatically at specific times or on specific events.',\n        overlay: true,\n        pulse: false\n      },\n      {\n        elementSelector: '.schedule-configuration',\n        content: 'The scheduling tab lets you configure when your integration should run. You can choose from various schedule types.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        elementSelector: '.schedule-options',\n        content: 'Choose from options like on-demand, recurring, or event-based schedules. Each has different configuration options.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        elementSelector: '.cron-builder',\n        content: 'For advanced scheduling, you can use the cron expression builder to create complex schedules with precise timing.',\n        overlay: true,\n        pulse: true\n      },\n      {\n        content: 'Now you know how to schedule your integrations to run automatically! You can monitor execution results in the history tab.',\n        overlay: true,\n        pulse: false\n      }\n    ]\n  }\n];\n\n// Create the context\nconst HelpContext = createContext();\n\n/**\n * Hook to use the help context\n * @returns {Object} Help context values and functions\n */\nexport const useHelp = () => {\n  const context = useContext(HelpContext);\n  if (!context) {\n    throw new Error('useHelp must be used within a HelpProvider');\n  }\n  return context;\n};\n\n/**\n * Help provider component\n * @param {Object} props - Component props\n * @returns {JSX.Element} Help provider component\n */\nexport const HelpProvider = ({ children }) => {\n  // State for help content and tours\n  const [helpContent, setHelpContent] = useState(initialHelpContent);\n  const [tours, setTours] = useState(initialTours);\n  const [activeTourId, setActiveTourId] = useState(null);\n  const [helpPreferences, setHelpPreferences] = useState({\n    showHelp: true,\n    showTours: true,\n    completedTours: []\n  });\n  \n  // Load help preferences from localStorage\n  useEffect(() => {\n    try {\n      const storedPreferences = localStorage.getItem('tap_help_preferences');\n      if (storedPreferences) {\n        setHelpPreferences(JSON.parse(storedPreferences));\n      }\n    } catch (error) {\n      console.error('Error loading help preferences:', error);\n    }\n  }, []);\n  \n  // Save help preferences to localStorage\n  const saveHelpPreferences = useCallback((newPreferences) => {\n    try {\n      localStorage.setItem('tap_help_preferences', JSON.stringify(newPreferences));\n      setHelpPreferences(newPreferences);\n    } catch (error) {\n      console.error('Error saving help preferences:', error);\n    }\n  }, []);\n  \n  // Toggle help visibility\n  const toggleHelpVisibility = useCallback(() => {\n    const newPreferences = {\n      ...helpPreferences,\n      showHelp: !helpPreferences.showHelp\n    };\n    saveHelpPreferences(newPreferences);\n  }, [helpPreferences, saveHelpPreferences]);\n  \n  // Toggle tours visibility\n  const toggleToursVisibility = useCallback(() => {\n    const newPreferences = {\n      ...helpPreferences,\n      showTours: !helpPreferences.showTours\n    };\n    saveHelpPreferences(newPreferences);\n  }, [helpPreferences, saveHelpPreferences]);\n  \n  // Start a tour\n  const startTour = useCallback((tourId) => {\n    if (tours.find(tour => tour.id === tourId)) {\n      setActiveTourId(tourId);\n    }\n  }, [tours]);\n  \n  // Handle tour completion\n  const handleTourComplete = useCallback((tourId) => {\n    const newCompletedTours = [...helpPreferences.completedTours, tourId];\n    const newPreferences = {\n      ...helpPreferences,\n      completedTours: newCompletedTours\n    };\n    saveHelpPreferences(newPreferences);\n    setActiveTourId(null);\n  }, [helpPreferences, saveHelpPreferences]);\n  \n  // Get help content for a specific key\n  const getHelpContent = useCallback((section, key) => {\n    if (helpContent[section] && helpContent[section][key]) {\n      return helpContent[section][key];\n    }\n    return null;\n  }, [helpContent]);\n  \n  // Add custom help content\n  const addHelpContent = useCallback((section, key, content) => {\n    setHelpContent(prevContent => ({\n      ...prevContent,\n      [section]: {\n        ...(prevContent[section] || {}),\n        [key]: content\n      }\n    }));\n  }, []);\n  \n  // Add a new tour\n  const addTour = useCallback((tour) => {\n    if (!tour.id || !tour.title || !tour.steps || !Array.isArray(tour.steps)) {\n      throw new Error('Invalid tour configuration');\n    }\n    \n    setTours(prevTours => {\n      const existingIndex = prevTours.findIndex(t => t.id === tour.id);\n      if (existingIndex >= 0) {\n        // Replace existing tour\n        const newTours = [...prevTours];\n        newTours[existingIndex] = tour;\n        return newTours;\n      } else {\n        // Add new tour\n        return [...prevTours, tour];\n      }\n    });\n  }, []);\n  \n  // Reset tour completion status\n  const resetTourCompletion = useCallback(() => {\n    const newPreferences = {\n      ...helpPreferences,\n      completedTours: []\n    };\n    saveHelpPreferences(newPreferences);\n  }, [helpPreferences, saveHelpPreferences]);\n  \n  // Provide the context value\n  const contextValue = {\n    helpContent,\n    tours,\n    activeTourId,\n    helpPreferences,\n    getHelpContent,\n    addHelpContent,\n    addTour,\n    startTour,\n    toggleHelpVisibility,\n    toggleToursVisibility,\n    resetTourCompletion,\n    handleTourComplete\n  };\n  \n  return (\n    <HelpContext.Provider value={contextValue}>\n      {children}\n    </HelpContext.Provider>\n  );\n};\n\nHelpProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default HelpContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}