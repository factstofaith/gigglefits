{"ast":null,"code":"/**\n * API Source Configuration Component\n *\n * A comprehensive component for configuring API data sources with validation, \n * authentication options, and testing capabilities.\n *\n * @component\n */\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Collapse, Divider, Grid, IconButton, InputAdornment, MenuItem, Paper, Tab, Tabs, TextField, Typography, Alert, AlertTitle, FormControl, FormControlLabel, Radio, RadioGroup, Select, InputLabel, FormHelperText, Switch, Tooltip, CircularProgress, Chip } from '@mui/material';\nimport { Add as AddIcon, Check as CheckIcon, Close as CloseIcon, Delete as DeleteIcon, Edit as EditIcon, Refresh as RefreshIcon, Code as CodeIcon, Security as SecurityIcon, Settings as SettingsIcon, PlayArrow as TestIcon, Link as LinkIcon, Visibility as VisibilityIcon, VisibilityOff as VisibilityOffIcon, HelpOutline as HelpIcon, Warning as WarningIcon, KeyboardArrowDown as KeyboardArrowDownIcon, KeyboardArrowUp as KeyboardArrowUpIcon, Save as SaveIcon } from '@mui/icons-material';\n\n/**\n * API Source Configuration Component\n * \n * @param {Object} props - Component props\n * @returns {JSX.Element} The API Source Configuration component\n */\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nconst APISourceConfiguration = _ref => {\n  let {\n    value = {},\n    onChange = () => {},\n    onTest = () => {},\n    disabled = false\n  } = _ref;\n  // Configuration state\n  const [config, setConfig] = useState({\n    name: '',\n    baseUrl: '',\n    method: 'GET',\n    headers: [],\n    queryParams: [],\n    requestBody: '',\n    responseType: 'json',\n    authentication: {\n      type: 'none',\n      apiKey: {\n        key: '',\n        value: '',\n        addTo: 'header'\n      },\n      basic: {\n        username: '',\n        password: ''\n      },\n      oauth2: {\n        clientId: '',\n        clientSecret: '',\n        tokenUrl: '',\n        authUrl: '',\n        scope: ''\n      },\n      bearer: {\n        token: ''\n      }\n    },\n    dataPath: '',\n    pollingInterval: 3600,\n    validateSSL: true,\n    timeout: 30,\n    retry: {\n      enabled: false,\n      maxAttempts: 3,\n      backoffFactor: 2,\n      initialDelay: 500\n    },\n    ...value\n  });\n\n  // UI State\n  const [activeTab, setActiveTab] = useState(0);\n  const [testResults, setTestResults] = useState(null);\n  const [testingInProgress, setTestingInProgress] = useState(false);\n  const [error, setError] = useState(null);\n  const [showPasswordFields, setShowPasswordFields] = useState({});\n  const [advancedSettingsOpen, setAdvancedSettingsOpen] = useState(false);\n  const [showJsonEditor, setShowJsonEditor] = useState(false);\n  const [rawJson, setRawJson] = useState('');\n  const [jsonError, setJsonError] = useState(null);\n  const [headerToAdd, setHeaderToAdd] = useState({\n    key: '',\n    value: ''\n  });\n  const [paramToAdd, setParamToAdd] = useState({\n    key: '',\n    value: ''\n  });\n\n  // Initialize raw JSON when config changes\n  useEffect(() => {\n    try {\n      setRawJson(JSON.stringify(config, null, 2));\n    } catch (e) {\n      console.error('Error stringifying config:', e);\n    }\n  }, [config]);\n\n  // Update parent component with config changes\n  useEffect(() => {\n    onChange(config);\n  }, [config, onChange]);\n\n  /**\n   * Handle change in basic configuration fields\n   * \n   * @param {string} field - Field name\n   * @param {any} value - New value\n   */\n  const handleChange = useCallback((field, value) => {\n    setConfig(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n\n  /**\n   * Handle change in authentication settings\n   * \n   * @param {string} authType - Authentication type\n   * @param {string} field - Field name\n   * @param {any} value - New value\n   */\n  const handleAuthChange = useCallback((authType, field, value) => {\n    setConfig(prev => ({\n      ...prev,\n      authentication: {\n        ...prev.authentication,\n        [authType]: {\n          ...prev.authentication[authType],\n          [field]: value\n        }\n      }\n    }));\n  }, []);\n\n  /**\n   * Handle adding a new header\n   */\n  const handleAddHeader = useCallback(() => {\n    if (!headerToAdd.key.trim()) {\n      setError('Header key cannot be empty');\n      return;\n    }\n    setConfig(prev => ({\n      ...prev,\n      headers: [...prev.headers, {\n        key: headerToAdd.key.trim(),\n        value: headerToAdd.value\n      }]\n    }));\n    setHeaderToAdd({\n      key: '',\n      value: ''\n    });\n    setError(null);\n  }, [headerToAdd]);\n\n  /**\n   * Handle removing a header\n   * \n   * @param {number} index - Index of the header to remove\n   */\n  const handleRemoveHeader = useCallback(index => {\n    setConfig(prev => ({\n      ...prev,\n      headers: prev.headers.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  /**\n   * Handle adding a new query parameter\n   */\n  const handleAddParam = useCallback(() => {\n    if (!paramToAdd.key.trim()) {\n      setError('Parameter key cannot be empty');\n      return;\n    }\n    setConfig(prev => ({\n      ...prev,\n      queryParams: [...prev.queryParams, {\n        key: paramToAdd.key.trim(),\n        value: paramToAdd.value\n      }]\n    }));\n    setParamToAdd({\n      key: '',\n      value: ''\n    });\n    setError(null);\n  }, [paramToAdd]);\n\n  /**\n   * Handle removing a query parameter\n   * \n   * @param {number} index - Index of the parameter to remove\n   */\n  const handleRemoveParam = useCallback(index => {\n    setConfig(prev => ({\n      ...prev,\n      queryParams: prev.queryParams.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  /**\n   * Toggle password visibility\n   * \n   * @param {string} field - Field name\n   */\n  const togglePasswordVisibility = useCallback(field => {\n    setShowPasswordFields(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  }, []);\n\n  /**\n   * Update retry configuration\n   * \n   * @param {string} field - Field name\n   * @param {any} value - New value\n   */\n  const handleRetryChange = useCallback((field, value) => {\n    setConfig(prev => ({\n      ...prev,\n      retry: {\n        ...prev.retry,\n        [field]: value\n      }\n    }));\n  }, []);\n\n  /**\n   * Handle authentication type change\n   * \n   * @param {Event} event - Change event\n   */\n  const handleAuthTypeChange = useCallback(event => {\n    const newAuthType = event.target.value;\n    setConfig(prev => ({\n      ...prev,\n      authentication: {\n        ...prev.authentication,\n        type: newAuthType\n      }\n    }));\n  }, []);\n\n  /**\n   * Handle JSON editor change\n   * \n   * @param {Event} event - Change event\n   */\n  const handleJsonChange = useCallback(event => {\n    const newJson = event.target.value;\n    setRawJson(newJson);\n    setJsonError(null);\n    try {\n      JSON.parse(newJson);\n    } catch (e) {\n      setJsonError(e.message);\n    }\n  }, []);\n\n  /**\n   * Apply changes from JSON editor\n   */\n  const applyJsonChanges = useCallback(() => {\n    try {\n      const newConfig = JSON.parse(rawJson);\n      setConfig(newConfig);\n      setJsonError(null);\n      setShowJsonEditor(false);\n    } catch (e) {\n      setJsonError(e.message);\n    }\n  }, [rawJson]);\n\n  /**\n   * Test the API connection\n   */\n  const handleTest = useCallback(async () => {\n    setTestingInProgress(true);\n    setTestResults(null);\n    setError(null);\n    try {\n      const results = await onTest(config);\n      setTestResults(results);\n    } catch (err) {\n      setError(err.message || 'Error testing API connection');\n      setTestResults({\n        success: false,\n        message: err.message || 'Unknown error'\n      });\n    } finally {\n      setTestingInProgress(false);\n    }\n  }, [config, onTest]);\n\n  /**\n   * Validate the URL format\n   * \n   * @param {string} url - URL to validate\n   * @returns {boolean} Whether the URL is valid\n   */\n  const isValidUrl = useCallback(url => {\n    try {\n      new URL(url);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }, []);\n\n  /**\n   * Check if configuration is valid and can be tested\n   * \n   * @returns {boolean} Whether the configuration is valid\n   */\n  const canTest = config.baseUrl && isValidUrl(config.baseUrl);\n\n  // Method options for the API\n  const methodOptions = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS'];\n\n  // Response type options\n  const responseTypeOptions = ['json', 'text', 'blob', 'arraybuffer'];\n\n  // Authentication type options\n  const authTypes = [{\n    value: 'none',\n    label: 'No Authentication'\n  }, {\n    value: 'apiKey',\n    label: 'API Key'\n  }, {\n    value: 'basic',\n    label: 'Basic Auth'\n  }, {\n    value: 'oauth2',\n    label: 'OAuth 2.0'\n  }, {\n    value: 'bearer',\n    label: 'Bearer Token'\n  }];\n\n  // API Key placement options\n  const apiKeyAddToOptions = [{\n    value: 'header',\n    label: 'Header'\n  }, {\n    value: 'query',\n    label: 'Query Parameter'\n  }];\n  return /*#__PURE__*/_jsx(Card, {\n    variant: \"outlined\",\n    children: /*#__PURE__*/_jsxs(CardContent, {\n      children: [/*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxs(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          sx: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsx(LinkIcon, {\n            sx: {\n              mr: 1\n            }\n          }), \"API Source Configuration\"]\n        }), /*#__PURE__*/_jsxs(Box, {\n          children: [/*#__PURE__*/_jsx(Tooltip, {\n            title: \"Show JSON Editor\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              onClick: () => setShowJsonEditor(!showJsonEditor),\n              color: showJsonEditor ? 'primary' : 'default',\n              children: /*#__PURE__*/_jsx(CodeIcon, {})\n            })\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Test Connection\",\n            children: /*#__PURE__*/_jsx(\"span\", {\n              children: /*#__PURE__*/_jsx(IconButton, {\n                onClick: handleTest,\n                disabled: !canTest || disabled || testingInProgress,\n                color: \"primary\",\n                children: testingInProgress ? /*#__PURE__*/_jsx(CircularProgress, {\n                  size: 24\n                }) : /*#__PURE__*/_jsx(TestIcon, {})\n              })\n            })\n          })]\n        })]\n      }), showJsonEditor ? /*#__PURE__*/_jsx(Box, {\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsx(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 20,\n          label: \"Configuration JSON\",\n          value: rawJson,\n          onChange: handleJsonChange,\n          error: !!jsonError,\n          helperText: jsonError,\n          sx: {\n            fontFamily: 'monospace'\n          },\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsx(Button, {\n                onClick: applyJsonChanges,\n                disabled: !!jsonError,\n                variant: \"contained\",\n                startIcon: /*#__PURE__*/_jsx(SaveIcon, {}),\n                children: \"Apply\"\n              })\n            })\n          }\n        })\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(Tabs, {\n          value: activeTab,\n          onChange: (e, newValue) => setActiveTab(newValue),\n          sx: {\n            borderBottom: 1,\n            borderColor: 'divider',\n            mb: 3\n          },\n          children: [/*#__PURE__*/_jsx(Tab, {\n            label: \"Basic\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Headers & Params\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Authentication\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Advanced\"\n          })]\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: activeTab === 0 ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(TextField, {\n                fullWidth: true,\n                label: \"API Name\",\n                value: config.name,\n                onChange: e => handleChange('name', e.target.value),\n                disabled: disabled,\n                helperText: \"A descriptive name for this API source\"\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              sm: 8,\n              children: /*#__PURE__*/_jsx(TextField, {\n                fullWidth: true,\n                label: \"Base URL\",\n                value: config.baseUrl,\n                onChange: e => handleChange('baseUrl', e.target.value),\n                disabled: disabled,\n                error: config.baseUrl && !isValidUrl(config.baseUrl),\n                helperText: config.baseUrl && !isValidUrl(config.baseUrl) ? 'Please enter a valid URL' : 'The base URL of the API (e.g., https://api.example.com/v1)'\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              sm: 4,\n              children: /*#__PURE__*/_jsxs(FormControl, {\n                fullWidth: true,\n                disabled: disabled,\n                children: [/*#__PURE__*/_jsx(InputLabel, {\n                  children: \"Method\"\n                }), /*#__PURE__*/_jsx(Select, {\n                  value: config.method,\n                  label: \"Method\",\n                  onChange: e => handleChange('method', e.target.value),\n                  children: methodOptions.map(method => /*#__PURE__*/_jsx(MenuItem, {\n                    value: method,\n                    children: method\n                  }, method))\n                }), /*#__PURE__*/_jsx(FormHelperText, {\n                  children: \"HTTP method for the request\"\n                })]\n              })\n            }), config.method === 'POST' || config.method === 'PUT' || config.method === 'PATCH' ? /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(TextField, {\n                fullWidth: true,\n                multiline: true,\n                rows: 5,\n                label: \"Request Body\",\n                value: config.requestBody,\n                onChange: e => handleChange('requestBody', e.target.value),\n                disabled: disabled,\n                helperText: \"JSON body to send with the request\",\n                sx: {\n                  fontFamily: 'monospace'\n                }\n              })\n            }) : null, /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(TextField, {\n                fullWidth: true,\n                label: \"Data Path\",\n                value: config.dataPath,\n                onChange: e => handleChange('dataPath', e.target.value),\n                disabled: disabled,\n                helperText: \"JSON path to extract data from the response (e.g., 'data.items' or leave empty for the entire response)\"\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsxs(FormControl, {\n                fullWidth: true,\n                disabled: disabled,\n                children: [/*#__PURE__*/_jsx(InputLabel, {\n                  children: \"Response Type\"\n                }), /*#__PURE__*/_jsx(Select, {\n                  value: config.responseType,\n                  label: \"Response Type\",\n                  onChange: e => handleChange('responseType', e.target.value),\n                  children: responseTypeOptions.map(type => /*#__PURE__*/_jsx(MenuItem, {\n                    value: type,\n                    children: type.toUpperCase()\n                  }, type))\n                }), /*#__PURE__*/_jsx(FormHelperText, {\n                  children: \"Expected response format from the API\"\n                })]\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              sm: 6,\n              children: /*#__PURE__*/_jsx(TextField, {\n                fullWidth: true,\n                type: \"number\",\n                label: \"Polling Interval (seconds)\",\n                value: config.pollingInterval,\n                onChange: e => handleChange('pollingInterval', parseInt(e.target.value, 10) || 3600),\n                disabled: disabled,\n                InputProps: {\n                  inputProps: {\n                    min: 1\n                  }\n                },\n                helperText: \"How often to poll this API for new data (in seconds)\"\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: activeTab === 1 ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsxs(Grid, {\n              item: true,\n              xs: 12,\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"h6\",\n                gutterBottom: true,\n                children: \"HTTP Headers\"\n              }), /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2,\n                  mb: 3\n                },\n                children: [config.headers.length > 0 ? /*#__PURE__*/_jsx(Box, {\n                  sx: {\n                    mb: 2\n                  },\n                  children: config.headers.map((header, index) => /*#__PURE__*/_jsxs(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      mb: 1,\n                      p: 1,\n                      borderRadius: 1,\n                      bgcolor: 'background.default'\n                    },\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      variant: \"body2\",\n                      sx: {\n                        flex: 2,\n                        fontWeight: 'bold'\n                      },\n                      children: header.key\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      variant: \"body2\",\n                      sx: {\n                        flex: 3,\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis'\n                      },\n                      children: header.key.toLowerCase() === 'authorization' ? '••••••••' : header.value\n                    }), /*#__PURE__*/_jsx(IconButton, {\n                      size: \"small\",\n                      onClick: () => handleRemoveHeader(index),\n                      disabled: disabled,\n                      children: /*#__PURE__*/_jsx(DeleteIcon, {\n                        fontSize: \"small\"\n                      })\n                    })]\n                  }, index))\n                }) : /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  sx: {\n                    mb: 2\n                  },\n                  children: \"No headers configured. Add headers below.\"\n                }), /*#__PURE__*/_jsx(Divider, {\n                  sx: {\n                    my: 2\n                  }\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  alignItems: \"center\",\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 5,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      size: \"small\",\n                      label: \"Header Name\",\n                      value: headerToAdd.key,\n                      onChange: e => setHeaderToAdd({\n                        ...headerToAdd,\n                        key: e.target.value\n                      }),\n                      disabled: disabled,\n                      placeholder: \"Content-Type\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 5,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      size: \"small\",\n                      label: \"Value\",\n                      value: headerToAdd.value,\n                      onChange: e => setHeaderToAdd({\n                        ...headerToAdd,\n                        value: e.target.value\n                      }),\n                      disabled: disabled,\n                      placeholder: \"application/json\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 2,\n                    children: /*#__PURE__*/_jsx(Button, {\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      onClick: handleAddHeader,\n                      disabled: disabled || !headerToAdd.key.trim(),\n                      startIcon: /*#__PURE__*/_jsx(AddIcon, {}),\n                      children: \"Add\"\n                    })\n                  })]\n                })]\n              })]\n            }), /*#__PURE__*/_jsxs(Grid, {\n              item: true,\n              xs: 12,\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"h6\",\n                gutterBottom: true,\n                children: \"Query Parameters\"\n              }), /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [config.queryParams.length > 0 ? /*#__PURE__*/_jsx(Box, {\n                  sx: {\n                    mb: 2\n                  },\n                  children: config.queryParams.map((param, index) => /*#__PURE__*/_jsxs(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      mb: 1,\n                      p: 1,\n                      borderRadius: 1,\n                      bgcolor: 'background.default'\n                    },\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      variant: \"body2\",\n                      sx: {\n                        flex: 2,\n                        fontWeight: 'bold'\n                      },\n                      children: param.key\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      variant: \"body2\",\n                      sx: {\n                        flex: 3,\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis'\n                      },\n                      children: param.key.toLowerCase().includes('key') || param.key.toLowerCase().includes('token') ? '••••••••' : param.value\n                    }), /*#__PURE__*/_jsx(IconButton, {\n                      size: \"small\",\n                      onClick: () => handleRemoveParam(index),\n                      disabled: disabled,\n                      children: /*#__PURE__*/_jsx(DeleteIcon, {\n                        fontSize: \"small\"\n                      })\n                    })]\n                  }, index))\n                }) : /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  sx: {\n                    mb: 2\n                  },\n                  children: \"No query parameters configured. Add parameters below.\"\n                }), /*#__PURE__*/_jsx(Divider, {\n                  sx: {\n                    my: 2\n                  }\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  alignItems: \"center\",\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 5,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      size: \"small\",\n                      label: \"Parameter Name\",\n                      value: paramToAdd.key,\n                      onChange: e => setParamToAdd({\n                        ...paramToAdd,\n                        key: e.target.value\n                      }),\n                      disabled: disabled,\n                      placeholder: \"limit\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 5,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      size: \"small\",\n                      label: \"Value\",\n                      value: paramToAdd.value,\n                      onChange: e => setParamToAdd({\n                        ...paramToAdd,\n                        value: e.target.value\n                      }),\n                      disabled: disabled,\n                      placeholder: \"100\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 2,\n                    children: /*#__PURE__*/_jsx(Button, {\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      onClick: handleAddParam,\n                      disabled: disabled || !paramToAdd.key.trim(),\n                      startIcon: /*#__PURE__*/_jsx(AddIcon, {}),\n                      children: \"Add\"\n                    })\n                  })]\n                })]\n              })]\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: activeTab === 2 ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(FormControl, {\n                component: \"fieldset\",\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"h6\",\n                  gutterBottom: true,\n                  children: \"Authentication Type\"\n                }), /*#__PURE__*/_jsx(RadioGroup, {\n                  \"aria-label\": \"authentication-type\",\n                  name: \"authentication-type\",\n                  value: config.authentication.type,\n                  onChange: handleAuthTypeChange,\n                  children: authTypes.map(type => /*#__PURE__*/_jsx(FormControlLabel, {\n                    value: type.value,\n                    control: /*#__PURE__*/_jsx(Radio, {\n                      disabled: disabled\n                    }),\n                    label: type.label\n                  }, type.value))\n                })]\n              })\n            }), config.authentication.type === 'apiKey' && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle1\",\n                  gutterBottom: true,\n                  children: \"API Key Authentication\"\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"API Key Name\",\n                      value: config.authentication.apiKey.key,\n                      onChange: e => handleAuthChange('apiKey', 'key', e.target.value),\n                      disabled: disabled,\n                      helperText: \"The name of the API key parameter\",\n                      placeholder: \"X-API-Key\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"API Key Value\",\n                      type: showPasswordFields.apiKey ? 'text' : 'password',\n                      value: config.authentication.apiKey.value,\n                      onChange: e => handleAuthChange('apiKey', 'value', e.target.value),\n                      disabled: disabled,\n                      helperText: \"The value of the API key\",\n                      InputProps: {\n                        endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                          position: \"end\",\n                          children: /*#__PURE__*/_jsx(IconButton, {\n                            onClick: () => togglePasswordVisibility('apiKey'),\n                            edge: \"end\",\n                            children: showPasswordFields.apiKey ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                          })\n                        })\n                      }\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxs(FormControl, {\n                      fullWidth: true,\n                      disabled: disabled,\n                      children: [/*#__PURE__*/_jsx(InputLabel, {\n                        children: \"Add to\"\n                      }), /*#__PURE__*/_jsx(Select, {\n                        value: config.authentication.apiKey.addTo,\n                        label: \"Add to\",\n                        onChange: e => handleAuthChange('apiKey', 'addTo', e.target.value),\n                        children: apiKeyAddToOptions.map(option => /*#__PURE__*/_jsx(MenuItem, {\n                          value: option.value,\n                          children: option.label\n                        }, option.value))\n                      }), /*#__PURE__*/_jsx(FormHelperText, {\n                        children: \"Where to include the API key\"\n                      })]\n                    })\n                  })]\n                })]\n              })\n            }), config.authentication.type === 'basic' && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle1\",\n                  gutterBottom: true,\n                  children: \"Basic Authentication\"\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Username\",\n                      value: config.authentication.basic.username,\n                      onChange: e => handleAuthChange('basic', 'username', e.target.value),\n                      disabled: disabled,\n                      helperText: \"Username for Basic Auth\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Password\",\n                      type: showPasswordFields.basicPassword ? 'text' : 'password',\n                      value: config.authentication.basic.password,\n                      onChange: e => handleAuthChange('basic', 'password', e.target.value),\n                      disabled: disabled,\n                      helperText: \"Password for Basic Auth\",\n                      InputProps: {\n                        endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                          position: \"end\",\n                          children: /*#__PURE__*/_jsx(IconButton, {\n                            onClick: () => togglePasswordVisibility('basicPassword'),\n                            edge: \"end\",\n                            children: showPasswordFields.basicPassword ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                          })\n                        })\n                      }\n                    })\n                  })]\n                })]\n              })\n            }), config.authentication.type === 'oauth2' && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle1\",\n                  gutterBottom: true,\n                  children: \"OAuth 2.0 Authentication\"\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Client ID\",\n                      value: config.authentication.oauth2.clientId,\n                      onChange: e => handleAuthChange('oauth2', 'clientId', e.target.value),\n                      disabled: disabled,\n                      helperText: \"OAuth 2.0 Client ID\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Client Secret\",\n                      type: showPasswordFields.clientSecret ? 'text' : 'password',\n                      value: config.authentication.oauth2.clientSecret,\n                      onChange: e => handleAuthChange('oauth2', 'clientSecret', e.target.value),\n                      disabled: disabled,\n                      helperText: \"OAuth 2.0 Client Secret\",\n                      InputProps: {\n                        endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                          position: \"end\",\n                          children: /*#__PURE__*/_jsx(IconButton, {\n                            onClick: () => togglePasswordVisibility('clientSecret'),\n                            edge: \"end\",\n                            children: showPasswordFields.clientSecret ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                          })\n                        })\n                      }\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Token URL\",\n                      value: config.authentication.oauth2.tokenUrl,\n                      onChange: e => handleAuthChange('oauth2', 'tokenUrl', e.target.value),\n                      disabled: disabled,\n                      helperText: \"URL to obtain the access token (e.g., https://api.example.com/oauth/token)\",\n                      error: config.authentication.oauth2.tokenUrl && !isValidUrl(config.authentication.oauth2.tokenUrl)\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Authorization URL\",\n                      value: config.authentication.oauth2.authUrl,\n                      onChange: e => handleAuthChange('oauth2', 'authUrl', e.target.value),\n                      disabled: disabled,\n                      helperText: \"URL for user authorization (optional for client credentials flow)\",\n                      error: config.authentication.oauth2.authUrl && !isValidUrl(config.authentication.oauth2.authUrl)\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Scope\",\n                      value: config.authentication.oauth2.scope,\n                      onChange: e => handleAuthChange('oauth2', 'scope', e.target.value),\n                      disabled: disabled,\n                      helperText: \"Space-separated list of scopes (e.g., 'read write')\"\n                    })\n                  })]\n                })]\n              })\n            }), config.authentication.type === 'bearer' && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle1\",\n                  gutterBottom: true,\n                  children: \"Bearer Token Authentication\"\n                }), /*#__PURE__*/_jsx(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Bearer Token\",\n                      type: showPasswordFields.bearerToken ? 'text' : 'password',\n                      value: config.authentication.bearer.token,\n                      onChange: e => handleAuthChange('bearer', 'token', e.target.value),\n                      disabled: disabled,\n                      helperText: \"The bearer token value\",\n                      InputProps: {\n                        endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                          position: \"end\",\n                          children: /*#__PURE__*/_jsx(IconButton, {\n                            onClick: () => togglePasswordVisibility('bearerToken'),\n                            edge: \"end\",\n                            children: showPasswordFields.bearerToken ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                          })\n                        })\n                      }\n                    })\n                  })\n                })]\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: activeTab === 3 ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(FormControlLabel, {\n                      control: /*#__PURE__*/_jsx(Switch, {\n                        checked: config.validateSSL,\n                        onChange: e => handleChange('validateSSL', e.target.checked),\n                        disabled: disabled\n                      }),\n                      label: \"Validate SSL Certificates\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      type: \"number\",\n                      label: \"Timeout (seconds)\",\n                      value: config.timeout,\n                      onChange: e => handleChange('timeout', parseInt(e.target.value, 10) || 30),\n                      disabled: disabled,\n                      InputProps: {\n                        inputProps: {\n                          min: 1\n                        }\n                      },\n                      helperText: \"Request timeout in seconds\"\n                    })\n                  })]\n                })\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    mb: 2\n                  },\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"h6\",\n                    children: \"Retry Configuration\"\n                  }), /*#__PURE__*/_jsx(FormControlLabel, {\n                    control: /*#__PURE__*/_jsx(Switch, {\n                      checked: config.retry.enabled,\n                      onChange: e => handleRetryChange('enabled', e.target.checked),\n                      disabled: disabled\n                    }),\n                    label: \"Enable Retry\"\n                  })]\n                }), /*#__PURE__*/_jsx(Collapse, {\n                  in: config.retry.enabled,\n                  children: /*#__PURE__*/_jsxs(Grid, {\n                    container: true,\n                    spacing: 2,\n                    children: [/*#__PURE__*/_jsx(Grid, {\n                      item: true,\n                      xs: 12,\n                      sm: 4,\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        fullWidth: true,\n                        type: \"number\",\n                        label: \"Max Attempts\",\n                        value: config.retry.maxAttempts,\n                        onChange: e => handleRetryChange('maxAttempts', parseInt(e.target.value, 10) || 3),\n                        disabled: disabled || !config.retry.enabled,\n                        InputProps: {\n                          inputProps: {\n                            min: 1\n                          }\n                        },\n                        helperText: \"Maximum number of retry attempts\"\n                      })\n                    }), /*#__PURE__*/_jsx(Grid, {\n                      item: true,\n                      xs: 12,\n                      sm: 4,\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        fullWidth: true,\n                        type: \"number\",\n                        label: \"Backoff Factor\",\n                        value: config.retry.backoffFactor,\n                        onChange: e => handleRetryChange('backoffFactor', parseFloat(e.target.value) || 2),\n                        disabled: disabled || !config.retry.enabled,\n                        InputProps: {\n                          inputProps: {\n                            min: 1,\n                            step: 0.1\n                          }\n                        },\n                        helperText: \"Exponential backoff factor\"\n                      })\n                    }), /*#__PURE__*/_jsx(Grid, {\n                      item: true,\n                      xs: 12,\n                      sm: 4,\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        fullWidth: true,\n                        type: \"number\",\n                        label: \"Initial Delay (ms)\",\n                        value: config.retry.initialDelay,\n                        onChange: e => handleRetryChange('initialDelay', parseInt(e.target.value, 10) || 500),\n                        disabled: disabled || !config.retry.enabled,\n                        InputProps: {\n                          inputProps: {\n                            min: 1\n                          }\n                        },\n                        helperText: \"Initial retry delay in milliseconds\"\n                      })\n                    })]\n                  })\n                })]\n              })\n            })]\n          })\n        })]\n      }), testResults && /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsxs(Alert, {\n          severity: testResults.success ? 'success' : 'error',\n          action: /*#__PURE__*/_jsx(IconButton, {\n            color: \"inherit\",\n            size: \"small\",\n            onClick: () => setTestResults(null),\n            children: /*#__PURE__*/_jsx(CloseIcon, {\n              fontSize: \"inherit\"\n            })\n          }),\n          children: [/*#__PURE__*/_jsx(AlertTitle, {\n            children: testResults.success ? 'Connection Successful' : 'Connection Failed'\n          }), testResults.message]\n        }), testResults.success && testResults.responsePreview && /*#__PURE__*/_jsxs(Paper, {\n          variant: \"outlined\",\n          sx: {\n            mt: 2,\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle2\",\n            gutterBottom: true,\n            children: \"Response Preview:\"\n          }), /*#__PURE__*/_jsx(Box, {\n            component: \"pre\",\n            sx: {\n              p: 1,\n              backgroundColor: 'background.default',\n              borderRadius: 1,\n              overflowX: 'auto',\n              fontSize: '0.85rem',\n              maxHeight: 300\n            },\n            children: typeof testResults.responsePreview === 'string' ? testResults.responsePreview : JSON.stringify(testResults.responsePreview, null, 2)\n          })]\n        })]\n      }), error && !testResults && /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        sx: {\n          mt: 3\n        },\n        onClose: () => setError(null),\n        children: error\n      })]\n    })\n  });\n};\nexport default APISourceConfiguration;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}