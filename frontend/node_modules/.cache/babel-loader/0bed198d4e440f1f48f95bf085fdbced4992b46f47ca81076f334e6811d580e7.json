{"ast":null,"code":"/**\n * credentialService.js\n * \n * A secure service for managing credentials and sensitive information in the frontend.\n * This service communicates with the backend for actual storage and encryption.\n */import{authService}from\"./authService\";// API endpoints for credential management\nconst API_ENDPOINTS={store:'/api/credentials/store',retrieve:'/api/credentials/retrieve',list:'/api/credentials/list',delete:'/api/credentials/delete',test:'/api/credentials/test'};/**\n * Makes an authenticated API call\n * @param {string} url - API endpoint\n * @param {string} method - HTTP method\n * @param {Object} data - Request payload\n * @returns {Promise<Object>} - API response\n */const callApi=async function(url){let method=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'GET';let data=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;try{// Get auth token\nconst token=localStorage.getItem('auth_token');if(!token){throw new Error('Authentication required');}// Prepare request options\nconst options={method,headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},credentials:'include'};// Add body for non-GET requests\nif(method!=='GET'&&data){options.body=JSON.stringify(data);}// In a development environment, simulate API responses\nconsole.log(`[DEV] Simulating API call: ${method} ${url}`);console.log(`[DEV] Request data:`,data);// Simulate API response based on the request\nlet response;// Simulate network delay\nawait new Promise(resolve=>setTimeout(resolve,800));if(url.includes('/store')){// Simulate storing credentials\nresponse={success:true,message:'Credentials stored successfully'};}else if(url.includes('/retrieve')){// Simulate retrieving credentials\nif(data.credentialType==='azure'){response={success:true,data:{connection_string:data.includeSecrets?'DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=abcdefg==;EndpointSuffix=core.windows.net':'',account_name:'myaccount',account_key:data.includeSecrets?'abcdefg==':'',sas_token:data.includeSecrets?'?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupitfx&se=2025-05-01T18:16:36Z&st=2025-04-01T10:16:36Z&spr=https&sig=abcdefg==':'',tenant_id:'tenant-id-value',client_id:'client-id-value',client_secret:data.includeSecrets?'secret-value':'',has_credentials:true,last_updated:new Date().toISOString()}};}else if(data.credentialType==='s3'){response={success:true,data:{access_key_id:'AKIAIOSFODNN7EXAMPLE',secret_access_key:data.includeSecrets?'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY':'',region:'us-east-1',profile:'',has_credentials:true,last_updated:new Date().toISOString()}};}else if(data.credentialType==='sharepoint'){response={success:true,data:{tenant_id:'tenant-id-value',client_id:'client-id-value',client_secret:data.includeSecrets?'secret-value':'',username:'user@example.com',password:data.includeSecrets?'password-value':'',has_credentials:true,last_updated:new Date().toISOString()}};}else{// Unknown credential type\nresponse={success:false,message:'Unknown credential type'};}}else if(url.includes('/list')){// Simulate listing credentials\nresponse={success:true,data:[{name:'azure',type:'storage',last_updated:new Date().toISOString()},{name:'s3',type:'storage',last_updated:new Date().toISOString()},{name:'sharepoint',type:'storage',last_updated:new Date().toISOString()}]};}else if(url.includes('/delete')){// Simulate deleting credentials\nresponse={success:true,message:'Credentials deleted successfully'};}else if(url.includes('/test')){// Simulate testing credentials\nif(data.credentialType==='azure'){const connectionError=Math.random()<0.2;// 20% chance of error\nif(connectionError){response={success:false,message:'Failed to connect to Azure Blob Storage',details:{error:'Connection timeout',code:'ConnectionError'}};}else{response={success:true,message:'Successfully connected to Azure Blob Storage',details:{containers:5,account:'myaccount',permissions:['read','write','delete']}};}}else if(data.credentialType==='s3'){response={success:true,message:'Successfully connected to S3',details:{buckets:3,region:'us-east-1',permissions:['read','write','delete']}};}else if(data.credentialType==='sharepoint'){response={success:true,message:'Successfully connected to SharePoint',details:{sites:2,tenant:'example.onmicrosoft.com',permissions:['read','write']}};}else{// Unknown credential type\nresponse={success:false,message:'Unknown credential type'};}}else{// Unknown endpoint\nresponse={success:false,message:'Unknown endpoint'};}return response;// In a production environment, we would actually make the API call\n/*\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'API request failed');\n    }\n    \n    return await response.json();\n    */}catch(error){console.error('API call failed:',error);throw error;}};/**\n * Credential Service for securely managing sensitive information\n */export const credentialService={/**\n   * Store credentials in the secure backend storage\n   * @param {string} credentialType - Type of credentials (e.g., 'azure', 's3', 'sharepoint')\n   * @param {Object} credentials - Credential data to store\n   * @returns {Promise<Object>} - Result of the operation\n   */storeCredentials:async(credentialType,credentials)=>{try{const response=await callApi(API_ENDPOINTS.store,'POST',{credentialType,credentials});return response;}catch(error){console.error(`Failed to store ${credentialType} credentials:`,error);return{success:false,message:error.message||`Failed to store credentials: ${error}`};}},/**\n   * Retrieve credentials from secure storage\n   * @param {string} credentialType - Type of credentials to retrieve\n   * @param {boolean} includeSecrets - Whether to include secret values\n   * @returns {Promise<Object>} - Retrieved credentials or error\n   */getCredentials:async function(credentialType){let includeSecrets=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;try{const response=await callApi(API_ENDPOINTS.retrieve,'POST',{credentialType,includeSecrets});return response;}catch(error){console.error(`Failed to retrieve ${credentialType} credentials:`,error);return{success:false,message:error.message||`Failed to retrieve credentials: ${error}`};}},/**\n   * List available credential types\n   * @returns {Promise<Array>} - List of available credential types\n   */listCredentials:async()=>{try{const response=await callApi(API_ENDPOINTS.list,'GET');return response;}catch(error){console.error('Failed to list credentials:',error);return{success:false,message:error.message||`Failed to list credentials: ${error}`};}},/**\n   * Delete stored credentials\n   * @param {string} credentialType - Type of credentials to delete\n   * @returns {Promise<Object>} - Result of the operation\n   */deleteCredentials:async credentialType=>{try{const response=await callApi(API_ENDPOINTS.delete,'POST',{credentialType});return response;}catch(error){console.error(`Failed to delete ${credentialType} credentials:`,error);return{success:false,message:error.message||`Failed to delete credentials: ${error}`};}},/**\n   * Test credentials by attempting to connect to the service\n   * @param {string} credentialType - Type of credentials to test\n   * @param {Object} credentials - Credentials to test (optional, uses stored if not provided)\n   * @returns {Promise<Object>} - Test results\n   */testCredentials:async function(credentialType){let credentials=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const response=await callApi(API_ENDPOINTS.test,'POST',{credentialType,credentials});return response;}catch(error){console.error(`Failed to test ${credentialType} credentials:`,error);return{success:false,message:error.message||`Failed to test credentials: ${error}`};}},/**\n   * Check if credentials exist for a specific type\n   * @param {string} credentialType - Type of credentials to check\n   * @returns {Promise<boolean>} - Whether credentials exist\n   */hasCredentials:async credentialType=>{try{const response=await callApi(API_ENDPOINTS.retrieve,'POST',{credentialType,includeSecrets:false});return response.success&&response.data&&response.data.has_credentials;}catch(error){console.error(`Failed to check ${credentialType} credentials:`,error);return false;}}};export default credentialService;","map":{"version":3,"names":["authService","API_ENDPOINTS","store","retrieve","list","delete","test","callApi","url","method","arguments","length","undefined","data","token","localStorage","getItem","Error","options","headers","credentials","body","JSON","stringify","console","log","response","Promise","resolve","setTimeout","includes","success","message","credentialType","connection_string","includeSecrets","account_name","account_key","sas_token","tenant_id","client_id","client_secret","has_credentials","last_updated","Date","toISOString","access_key_id","secret_access_key","region","profile","username","password","name","type","connectionError","Math","random","details","error","code","containers","account","permissions","buckets","sites","tenant","credentialService","storeCredentials","getCredentials","listCredentials","deleteCredentials","testCredentials","hasCredentials"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/services/credentialService.js"],"sourcesContent":["/**\n * credentialService.js\n * \n * A secure service for managing credentials and sensitive information in the frontend.\n * This service communicates with the backend for actual storage and encryption.\n */\n\nimport { authService } from './authService';\n\n// API endpoints for credential management\nconst API_ENDPOINTS = {\n  store: '/api/credentials/store',\n  retrieve: '/api/credentials/retrieve',\n  list: '/api/credentials/list',\n  delete: '/api/credentials/delete',\n  test: '/api/credentials/test',\n};\n\n/**\n * Makes an authenticated API call\n * @param {string} url - API endpoint\n * @param {string} method - HTTP method\n * @param {Object} data - Request payload\n * @returns {Promise<Object>} - API response\n */\nconst callApi = async (url, method = 'GET', data = null) => {\n  try {\n    // Get auth token\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Prepare request options\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      credentials: 'include',\n    };\n\n    // Add body for non-GET requests\n    if (method !== 'GET' && data) {\n      options.body = JSON.stringify(data);\n    }\n\n    // In a development environment, simulate API responses\n    console.log(`[DEV] Simulating API call: ${method} ${url}`);\n    console.log(`[DEV] Request data:`, data);\n\n    // Simulate API response based on the request\n    let response;\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 800));\n\n    if (url.includes('/store')) {\n      // Simulate storing credentials\n      response = {\n        success: true,\n        message: 'Credentials stored successfully',\n      };\n    } else if (url.includes('/retrieve')) {\n      // Simulate retrieving credentials\n      if (data.credentialType === 'azure') {\n        response = {\n          success: true,\n          data: {\n            connection_string: data.includeSecrets ? 'DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=abcdefg==;EndpointSuffix=core.windows.net' : '',\n            account_name: 'myaccount',\n            account_key: data.includeSecrets ? 'abcdefg==' : '',\n            sas_token: data.includeSecrets ? '?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupitfx&se=2025-05-01T18:16:36Z&st=2025-04-01T10:16:36Z&spr=https&sig=abcdefg==' : '',\n            tenant_id: 'tenant-id-value',\n            client_id: 'client-id-value',\n            client_secret: data.includeSecrets ? 'secret-value' : '',\n            has_credentials: true,\n            last_updated: new Date().toISOString(),\n          }\n        };\n      } else if (data.credentialType === 's3') {\n        response = {\n          success: true,\n          data: {\n            access_key_id: 'AKIAIOSFODNN7EXAMPLE',\n            secret_access_key: data.includeSecrets ? 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' : '',\n            region: 'us-east-1',\n            profile: '',\n            has_credentials: true,\n            last_updated: new Date().toISOString(),\n          }\n        };\n      } else if (data.credentialType === 'sharepoint') {\n        response = {\n          success: true,\n          data: {\n            tenant_id: 'tenant-id-value',\n            client_id: 'client-id-value',\n            client_secret: data.includeSecrets ? 'secret-value' : '',\n            username: 'user@example.com',\n            password: data.includeSecrets ? 'password-value' : '',\n            has_credentials: true,\n            last_updated: new Date().toISOString(),\n          }\n        };\n      } else {\n        // Unknown credential type\n        response = {\n          success: false,\n          message: 'Unknown credential type',\n        };\n      }\n    } else if (url.includes('/list')) {\n      // Simulate listing credentials\n      response = {\n        success: true,\n        data: [\n          { name: 'azure', type: 'storage', last_updated: new Date().toISOString() },\n          { name: 's3', type: 'storage', last_updated: new Date().toISOString() },\n          { name: 'sharepoint', type: 'storage', last_updated: new Date().toISOString() },\n        ]\n      };\n    } else if (url.includes('/delete')) {\n      // Simulate deleting credentials\n      response = {\n        success: true,\n        message: 'Credentials deleted successfully',\n      };\n    } else if (url.includes('/test')) {\n      // Simulate testing credentials\n      if (data.credentialType === 'azure') {\n        const connectionError = Math.random() < 0.2; // 20% chance of error\n        if (connectionError) {\n          response = {\n            success: false,\n            message: 'Failed to connect to Azure Blob Storage',\n            details: {\n              error: 'Connection timeout',\n              code: 'ConnectionError',\n            }\n          };\n        } else {\n          response = {\n            success: true,\n            message: 'Successfully connected to Azure Blob Storage',\n            details: {\n              containers: 5,\n              account: 'myaccount',\n              permissions: ['read', 'write', 'delete'],\n            }\n          };\n        }\n      } else if (data.credentialType === 's3') {\n        response = {\n          success: true,\n          message: 'Successfully connected to S3',\n          details: {\n            buckets: 3,\n            region: 'us-east-1',\n            permissions: ['read', 'write', 'delete'],\n          }\n        };\n      } else if (data.credentialType === 'sharepoint') {\n        response = {\n          success: true,\n          message: 'Successfully connected to SharePoint',\n          details: {\n            sites: 2,\n            tenant: 'example.onmicrosoft.com',\n            permissions: ['read', 'write'],\n          }\n        };\n      } else {\n        // Unknown credential type\n        response = {\n          success: false,\n          message: 'Unknown credential type',\n        };\n      }\n    } else {\n      // Unknown endpoint\n      response = {\n        success: false,\n        message: 'Unknown endpoint',\n      };\n    }\n\n    return response;\n\n    // In a production environment, we would actually make the API call\n    /*\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'API request failed');\n    }\n    \n    return await response.json();\n    */\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n};\n\n/**\n * Credential Service for securely managing sensitive information\n */\nexport const credentialService = {\n  /**\n   * Store credentials in the secure backend storage\n   * @param {string} credentialType - Type of credentials (e.g., 'azure', 's3', 'sharepoint')\n   * @param {Object} credentials - Credential data to store\n   * @returns {Promise<Object>} - Result of the operation\n   */\n  storeCredentials: async (credentialType, credentials) => {\n    try {\n      const response = await callApi(\n        API_ENDPOINTS.store,\n        'POST',\n        {\n          credentialType,\n          credentials,\n        }\n      );\n      \n      return response;\n    } catch (error) {\n      console.error(`Failed to store ${credentialType} credentials:`, error);\n      return {\n        success: false,\n        message: error.message || `Failed to store credentials: ${error}`\n      };\n    }\n  },\n  \n  /**\n   * Retrieve credentials from secure storage\n   * @param {string} credentialType - Type of credentials to retrieve\n   * @param {boolean} includeSecrets - Whether to include secret values\n   * @returns {Promise<Object>} - Retrieved credentials or error\n   */\n  getCredentials: async (credentialType, includeSecrets = false) => {\n    try {\n      const response = await callApi(\n        API_ENDPOINTS.retrieve,\n        'POST',\n        {\n          credentialType,\n          includeSecrets,\n        }\n      );\n      \n      return response;\n    } catch (error) {\n      console.error(`Failed to retrieve ${credentialType} credentials:`, error);\n      return {\n        success: false,\n        message: error.message || `Failed to retrieve credentials: ${error}`\n      };\n    }\n  },\n  \n  /**\n   * List available credential types\n   * @returns {Promise<Array>} - List of available credential types\n   */\n  listCredentials: async () => {\n    try {\n      const response = await callApi(API_ENDPOINTS.list, 'GET');\n      return response;\n    } catch (error) {\n      console.error('Failed to list credentials:', error);\n      return {\n        success: false,\n        message: error.message || `Failed to list credentials: ${error}`\n      };\n    }\n  },\n  \n  /**\n   * Delete stored credentials\n   * @param {string} credentialType - Type of credentials to delete\n   * @returns {Promise<Object>} - Result of the operation\n   */\n  deleteCredentials: async (credentialType) => {\n    try {\n      const response = await callApi(\n        API_ENDPOINTS.delete,\n        'POST',\n        {\n          credentialType,\n        }\n      );\n      \n      return response;\n    } catch (error) {\n      console.error(`Failed to delete ${credentialType} credentials:`, error);\n      return {\n        success: false,\n        message: error.message || `Failed to delete credentials: ${error}`\n      };\n    }\n  },\n  \n  /**\n   * Test credentials by attempting to connect to the service\n   * @param {string} credentialType - Type of credentials to test\n   * @param {Object} credentials - Credentials to test (optional, uses stored if not provided)\n   * @returns {Promise<Object>} - Test results\n   */\n  testCredentials: async (credentialType, credentials = null) => {\n    try {\n      const response = await callApi(\n        API_ENDPOINTS.test,\n        'POST',\n        {\n          credentialType,\n          credentials,\n        }\n      );\n      \n      return response;\n    } catch (error) {\n      console.error(`Failed to test ${credentialType} credentials:`, error);\n      return {\n        success: false,\n        message: error.message || `Failed to test credentials: ${error}`\n      };\n    }\n  },\n  \n  /**\n   * Check if credentials exist for a specific type\n   * @param {string} credentialType - Type of credentials to check\n   * @returns {Promise<boolean>} - Whether credentials exist\n   */\n  hasCredentials: async (credentialType) => {\n    try {\n      const response = await callApi(\n        API_ENDPOINTS.retrieve,\n        'POST',\n        {\n          credentialType,\n          includeSecrets: false,\n        }\n      );\n      \n      return response.success && response.data && response.data.has_credentials;\n    } catch (error) {\n      console.error(`Failed to check ${credentialType} credentials:`, error);\n      return false;\n    }\n  },\n};\n\nexport default credentialService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}