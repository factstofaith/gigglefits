{"ast":null,"code":"/**\n * Help Context\n * \n * A context provider for managing context-sensitive help and guided tours across the application.\n * Centralizes help content, tour definitions, and user help preferences.\n */\n\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n// Initial help content organized by feature area\nconst initialHelpContent = {\n  // Integration section help items\n  integration: {\n    creation: {\n      title: 'Integration Creation',\n      content: 'Create a new integration by specifying its name, description, and type. An integration defines how data moves between systems.'\n    },\n    configuration: {\n      title: 'Configuration',\n      content: 'Configure your integration with source/destination details, transformation rules, and scheduling options.'\n    },\n    schedule: {\n      title: 'Scheduling',\n      content: 'Set up when your integration should run automatically. Supports one-time, recurring, and event-based schedules.'\n    },\n    azureBlob: {\n      title: 'Azure Blob Storage',\n      content: 'Connect to Azure Blob Storage to use it as a source or destination for your integration data.'\n    },\n    fieldMapping: {\n      title: 'Field Mapping',\n      content: 'Map fields from your source data to your destination schema, with optional transformations.'\n    }\n  },\n  // Transformation help items\n  transformation: {\n    dataType: {\n      title: 'Data Type Conversion',\n      content: 'Convert data between different types such as string, number, boolean, date, etc.'\n    },\n    textFormat: {\n      title: 'Text Formatting',\n      content: 'Apply text formatting operations like case conversion, trimming, concatenation, etc.'\n    },\n    formulas: {\n      title: 'Custom Formulas',\n      content: 'Create custom formulas to transform your data using expressions with various functions and operators.'\n    }\n  },\n  // Admin section help items\n  admin: {\n    users: {\n      title: 'User Management',\n      content: 'Manage user accounts, roles, and permissions for accessing different parts of the platform.'\n    },\n    monitoring: {\n      title: 'Monitoring Dashboard',\n      content: 'View the status and performance metrics of your integrations, including success rates, execution times, and error logs.'\n    }\n  },\n  // General help items\n  general: {\n    navigation: {\n      title: 'Navigation',\n      content: 'Use the navigation menu to access different areas of the platform including integrations, datasets, templates, and admin features.'\n    },\n    settings: {\n      title: 'Settings',\n      content: 'Configure your user preferences, notifications, and account settings.'\n    }\n  }\n};\n\n// Initial tour definitions\nconst initialTours = [{\n  id: 'integration-basics',\n  title: 'Integration Basics',\n  description: 'Learn the fundamentals of creating and managing integrations',\n  duration: '2',\n  steps: [{\n    content: 'Welcome to the Integration Platform! This tour will guide you through the basics of creating and managing integrations.',\n    overlay: true,\n    pulse: false\n  }, {\n    elementSelector: '.integration-list',\n    content: 'This is the integration list where you can see all your existing integrations and their status.',\n    overlay: true,\n    pulse: true\n  }, {\n    elementSelector: '.create-integration-button',\n    content: 'Click here to create a new integration. This will open a dialog where you can define the basic properties of your integration.',\n    overlay: true,\n    pulse: true\n  }, {\n    elementSelector: '.integration-filters',\n    content: 'Use these filters to quickly find specific integrations by status, type, or other properties.',\n    overlay: true,\n    pulse: true\n  }, {\n    content: 'That\\'s the basics of working with integrations! You can now explore more features or take other guided tours to learn more.',\n    overlay: true,\n    pulse: false\n  }]\n}, {\n  id: 'data-transformation',\n  title: 'Data Transformation Tour',\n  description: 'Learn how to transform and map data between systems',\n  duration: '3',\n  steps: [{\n    content: 'This tour will show you how to transform data between different systems using our transformation nodes.',\n    overlay: true,\n    pulse: false\n  }, {\n    elementSelector: '.transformation-nodes',\n    content: 'These are transformation nodes that you can add to your integration flow to modify data as it passes through.',\n    overlay: true,\n    pulse: true\n  }, {\n    elementSelector: '.node-palette',\n    content: 'The node palette contains all available transformation types. You can drag and drop them onto your integration flow.',\n    overlay: true,\n    pulse: true\n  }, {\n    elementSelector: '.field-mapping',\n    content: 'The field mapping interface allows you to connect source fields to destination fields, with transformations in between.',\n    overlay: true,\n    pulse: true\n  }, {\n    elementSelector: '.formula-editor',\n    content: 'The formula editor lets you create custom transformations using expressions with various functions and operators.',\n    overlay: true,\n    pulse: true\n  }, {\n    content: 'Now you know how to transform data in your integrations! You can create complex transformations by combining multiple nodes.',\n    overlay: true,\n    pulse: false\n  }]\n}, {\n  id: 'scheduling',\n  title: 'Integration Scheduling',\n  description: 'Learn how to schedule integrations to run automatically',\n  duration: '2',\n  steps: [{\n    content: 'This tour will show you how to schedule your integrations to run automatically at specific times or on specific events.',\n    overlay: true,\n    pulse: false\n  }, {\n    elementSelector: '.schedule-configuration',\n    content: 'The scheduling tab lets you configure when your integration should run. You can choose from various schedule types.',\n    overlay: true,\n    pulse: true\n  }, {\n    elementSelector: '.schedule-options',\n    content: 'Choose from options like on-demand, recurring, or event-based schedules. Each has different configuration options.',\n    overlay: true,\n    pulse: true\n  }, {\n    elementSelector: '.cron-builder',\n    content: 'For advanced scheduling, you can use the cron expression builder to create complex schedules with precise timing.',\n    overlay: true,\n    pulse: true\n  }, {\n    content: 'Now you know how to schedule your integrations to run automatically! You can monitor execution results in the history tab.',\n    overlay: true,\n    pulse: false\n  }]\n}];\n\n// Create the context\nconst HelpContext = /*#__PURE__*/createContext();\n\n/**\n * Hook to use the help context\n * @returns {Object} Help context values and functions\n */\nexport const useHelp = () => {\n  const context = useContext(HelpContext);\n  if (!context) {\n    throw new Error('useHelp must be used within a HelpProvider');\n  }\n  return context;\n};\n\n/**\n * Help provider component\n * @param {Object} props - Component props\n * @returns {JSX.Element} Help provider component\n */\nexport const HelpProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  // State for help content and tours\n  const [helpContent, setHelpContent] = useState(initialHelpContent);\n  const [tours, setTours] = useState(initialTours);\n  const [activeTourId, setActiveTourId] = useState(null);\n  const [helpPreferences, setHelpPreferences] = useState({\n    showHelp: true,\n    showTours: true,\n    completedTours: []\n  });\n\n  // Load help preferences from localStorage\n  useEffect(() => {\n    try {\n      const storedPreferences = localStorage.getItem('tap_help_preferences');\n      if (storedPreferences) {\n        setHelpPreferences(JSON.parse(storedPreferences));\n      }\n    } catch (error) {\n      console.error('Error loading help preferences:', error);\n    }\n  }, []);\n\n  // Save help preferences to localStorage\n  const saveHelpPreferences = useCallback(newPreferences => {\n    try {\n      localStorage.setItem('tap_help_preferences', JSON.stringify(newPreferences));\n      setHelpPreferences(newPreferences);\n    } catch (error) {\n      console.error('Error saving help preferences:', error);\n    }\n  }, []);\n\n  // Toggle help visibility\n  const toggleHelpVisibility = useCallback(() => {\n    const newPreferences = {\n      ...helpPreferences,\n      showHelp: !helpPreferences.showHelp\n    };\n    saveHelpPreferences(newPreferences);\n  }, [helpPreferences, saveHelpPreferences]);\n\n  // Toggle tours visibility\n  const toggleToursVisibility = useCallback(() => {\n    const newPreferences = {\n      ...helpPreferences,\n      showTours: !helpPreferences.showTours\n    };\n    saveHelpPreferences(newPreferences);\n  }, [helpPreferences, saveHelpPreferences]);\n\n  // Start a tour\n  const startTour = useCallback(tourId => {\n    if (tours.find(tour => tour.id === tourId)) {\n      setActiveTourId(tourId);\n    }\n  }, [tours]);\n\n  // Handle tour completion\n  const handleTourComplete = useCallback(tourId => {\n    const newCompletedTours = [...helpPreferences.completedTours, tourId];\n    const newPreferences = {\n      ...helpPreferences,\n      completedTours: newCompletedTours\n    };\n    saveHelpPreferences(newPreferences);\n    setActiveTourId(null);\n  }, [helpPreferences, saveHelpPreferences]);\n\n  // Get help content for a specific key\n  const getHelpContent = useCallback((section, key) => {\n    if (helpContent[section] && helpContent[section][key]) {\n      return helpContent[section][key];\n    }\n    return null;\n  }, [helpContent]);\n\n  // Add custom help content\n  const addHelpContent = useCallback((section, key, content) => {\n    setHelpContent(prevContent => ({\n      ...prevContent,\n      [section]: {\n        ...(prevContent[section] || {}),\n        [key]: content\n      }\n    }));\n  }, []);\n\n  // Add a new tour\n  const addTour = useCallback(tour => {\n    if (!tour.id || !tour.title || !tour.steps || !Array.isArray(tour.steps)) {\n      throw new Error('Invalid tour configuration');\n    }\n    setTours(prevTours => {\n      const existingIndex = prevTours.findIndex(t => t.id === tour.id);\n      if (existingIndex >= 0) {\n        // Replace existing tour\n        const newTours = [...prevTours];\n        newTours[existingIndex] = tour;\n        return newTours;\n      } else {\n        // Add new tour\n        return [...prevTours, tour];\n      }\n    });\n  }, []);\n\n  // Reset tour completion status\n  const resetTourCompletion = useCallback(() => {\n    const newPreferences = {\n      ...helpPreferences,\n      completedTours: []\n    };\n    saveHelpPreferences(newPreferences);\n  }, [helpPreferences, saveHelpPreferences]);\n\n  // Provide the context value\n  const contextValue = {\n    helpContent,\n    tours,\n    activeTourId,\n    helpPreferences,\n    getHelpContent,\n    addHelpContent,\n    addTour,\n    startTour,\n    toggleHelpVisibility,\n    toggleToursVisibility,\n    resetTourCompletion,\n    handleTourComplete\n  };\n  return /*#__PURE__*/_jsx(HelpContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n};\nexport default HelpContext;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}