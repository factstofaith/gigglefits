{"ast":null,"code":"/**\n * SharePoint Configuration Component\n *\n * A comprehensive component for configuring SharePoint integration using Microsoft Graph API.\n * Combines credential management and SharePoint browsing capabilities.\n *\n * @component\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { Box, Button, Card, CardContent, Collapse, Divider, Grid, Paper, Tab, Tabs, Typography, Alert, AlertTitle } from '@mui/material';\nimport { Check as CheckIcon, CloudDone as CloudDoneIcon, Settings as SettingsIcon, Web as WebIcon, Article as LibraryIcon, Folder as FolderIcon, Description as FileIcon } from '@mui/icons-material';\n\n// Import subcomponents\nimport SharePointCredentialManager from \"./sharepoint/SharePointCredentialManager\";\nimport SharePointBrowser from \"./sharepoint/SharePointBrowser\";\n\n/**\n * SharePoint Configuration Component\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst SharePointConfiguration = _ref => {\n  let {\n    value = {},\n    onChange = () => {},\n    readOnly = false\n  } = _ref;\n  // Component state\n  const [credentials, setCredentials] = useState(value.credentials || {});\n  const [selectedSite, setSelectedSite] = useState(value.site || null);\n  const [selectedLibrary, setSelectedLibrary] = useState(value.library || null);\n  const [selectedFolder, setSelectedFolder] = useState(value.folder || null);\n  const [selectedFile, setSelectedFile] = useState(value.file || null);\n\n  // UI state\n  const [activeTab, setActiveTab] = useState(0);\n  const [testResults, setTestResults] = useState(null);\n  const [testing, setTesting] = useState(false);\n  const [error, setError] = useState(null);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  /**\n   * Handle credentials change\n   */\n  const handleCredentialsChange = useCallback(newCredentials => {\n    setCredentials(newCredentials);\n    onChange({\n      ...value,\n      credentials: newCredentials,\n      site: selectedSite,\n      library: selectedLibrary,\n      folder: selectedFolder,\n      file: selectedFile\n    });\n  }, [onChange, selectedFile, selectedFolder, selectedLibrary, selectedSite, value]);\n\n  /**\n   * Test credentials using Microsoft Graph API\n   */\n  const testCredentials = useCallback(async () => {\n    setTesting(true);\n    setTestResults(null);\n    setError(null);\n    try {\n      console.log('Testing SharePoint credentials:', credentials);\n\n      // In a real production environment, we would use a backend API endpoint\n      // that securely handles Microsoft Graph API authentication and requests.\n      // The frontend would just call an API like `/api/sharepoint/test-credentials`\n\n      // This simulates what our backend API would do with the Microsoft Graph API:\n      const testCredentialsWithGraphAPI = async creds => {\n        var _tokenResponse$scope, _graphResponse$value$;\n        // Step 1: Get access token for the tenant\n        const getAccessToken = async () => {\n          // In production: This would be a secure API call that gets a token\n          // The token acquisition would happen server-side for security\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              // Validate credentials based on the auth method\n              if (creds.authMethod === 'oauth') {\n                if (!creds.tenantId || !creds.clientId || !creds.clientSecret) {\n                  reject(new Error('Missing required OAuth credentials'));\n                  return;\n                }\n\n                // Simulate successful OAuth token acquisition\n                resolve({\n                  access_token: `mock_${creds.clientId}_token`,\n                  token_type: 'Bearer',\n                  expires_in: 3600,\n                  ext_expires_in: 3600,\n                  scope: 'Sites.Read.All'\n                });\n              } else if (creds.authMethod === 'app') {\n                if (!creds.tenantId || !creds.appId || !creds.appSecret) {\n                  reject(new Error('Missing required App credentials'));\n                  return;\n                }\n\n                // Simulate successful app-only token acquisition\n                resolve({\n                  access_token: `mock_${creds.appId}_token`,\n                  token_type: 'Bearer',\n                  expires_in: 3600,\n                  ext_expires_in: 3600\n                });\n              } else if (creds.authMethod === 'certificate') {\n                if (!creds.tenantId || !creds.clientId || !creds.certificateThumbprint || !creds.certificatePrivateKey) {\n                  reject(new Error('Missing required certificate credentials'));\n                  return;\n                }\n\n                // Simulate successful certificate-based token acquisition\n                resolve({\n                  access_token: `mock_${creds.clientId}_cert_token`,\n                  token_type: 'Bearer',\n                  expires_in: 3600,\n                  ext_expires_in: 3600\n                });\n              } else {\n                reject(new Error('Invalid authentication method'));\n              }\n            }, 600);\n          });\n        };\n\n        // Step 2: Make a test API call to Microsoft Graph with the token\n        const testGraphAPI = async token => {\n          // In production: This would be a real fetch call to Microsoft Graph API\n          // GET /sites?search=* or GET /me/followedSites\n          return new Promise((resolve, reject) => {\n            setTimeout(() => {\n              // Simulate a successful Graph API response with data\n              resolve({\n                // This follows the Microsoft Graph API response format\n                value: [{\n                  id: \"sample-site-1\",\n                  displayName: \"Test Connection Site\",\n                  webUrl: `https://${creds.tenantId.replace('.onmicrosoft.com', '')}.sharepoint.com/sites/test`,\n                  siteCollection: {\n                    hostname: `${creds.tenantId.replace('.onmicrosoft.com', '')}.sharepoint.com`\n                  }\n                }],\n                // Include permission scopes we have access to\n                \"@odata.context\": \"https://graph.microsoft.com/v1.0/$metadata#sites\"\n              });\n            }, 500);\n          });\n        };\n\n        // Step 3: Execute full test sequence\n        // a) Get token\n        const tokenResponse = await getAccessToken();\n\n        // b) Test token with Graph API call\n        const graphResponse = await testGraphAPI(tokenResponse.access_token);\n\n        // c) Return full test results\n        return {\n          status: 'success',\n          message: `Successfully connected to SharePoint using ${creds.authMethod === 'oauth' ? 'OAuth' : creds.authMethod === 'app' ? 'App-only authentication' : 'certificate-based authentication'}`,\n          details: {\n            tenant: creds.tenantId,\n            ...(creds.authMethod === 'oauth' ? {\n              clientId: creds.clientId,\n              scope: 'Sites.Read.All'\n            } : creds.authMethod === 'app' ? {\n              appId: creds.appId\n            } : {\n              clientId: creds.clientId,\n              thumbprint: creds.certificateThumbprint\n            }),\n            resource: creds.resourceUrl || 'https://graph.microsoft.com',\n            // Include token expiration and scope information\n            token: {\n              type: tokenResponse.token_type,\n              expires_in: tokenResponse.expires_in,\n              scopes: ((_tokenResponse$scope = tokenResponse.scope) === null || _tokenResponse$scope === void 0 ? void 0 : _tokenResponse$scope.split(' ')) || ['Sites.Read.All']\n            },\n            // Include sample API response\n            apiTest: {\n              endpoint: '/sites',\n              sitesFound: graphResponse.value.length,\n              firstSite: ((_graphResponse$value$ = graphResponse.value[0]) === null || _graphResponse$value$ === void 0 ? void 0 : _graphResponse$value$.displayName) || 'No sites found'\n            }\n          }\n        };\n      };\n\n      // Execute the test\n      try {\n        const result = await testCredentialsWithGraphAPI(credentials);\n        setTestResults(result);\n      } catch (testError) {\n        setTestResults({\n          status: 'error',\n          message: testError.message || 'Failed to authenticate with Microsoft Graph API',\n          details: {\n            error: testError.message,\n            credentials: {\n              authMethod: credentials.authMethod,\n              tenantId: credentials.tenantId,\n              // Don't include secrets in error reports\n              hasClientId: !!credentials.clientId,\n              hasClientSecret: !!credentials.clientSecret,\n              hasAppId: !!credentials.appId,\n              hasAppSecret: !!credentials.appSecret,\n              hasCertThumbprint: !!credentials.certificateThumbprint\n            }\n          }\n        });\n      }\n    } catch (err) {\n      console.error('Error testing credentials:', err);\n      setError(err.message || 'An error occurred while testing credentials');\n      setTestResults({\n        status: 'error',\n        message: err.message || 'Unknown error'\n      });\n    } finally {\n      setTesting(false);\n    }\n  }, [credentials]);\n\n  /**\n   * Handle site selection\n   */\n  const handleSiteSelect = useCallback(site => {\n    setSelectedSite(site);\n    setSelectedLibrary(null);\n    setSelectedFolder(null);\n    setSelectedFile(null);\n    onChange({\n      ...value,\n      credentials,\n      site,\n      library: null,\n      folder: null,\n      file: null\n    });\n  }, [credentials, onChange, value]);\n\n  /**\n   * Handle library selection\n   */\n  const handleLibrarySelect = useCallback(library => {\n    setSelectedLibrary(library);\n    setSelectedFolder(null);\n    setSelectedFile(null);\n    onChange({\n      ...value,\n      credentials,\n      site: selectedSite,\n      library,\n      folder: null,\n      file: null\n    });\n  }, [credentials, onChange, selectedSite, value]);\n\n  /**\n   * Handle folder selection\n   */\n  const handleFolderSelect = useCallback(folder => {\n    setSelectedFolder(folder);\n    setSelectedFile(null);\n    onChange({\n      ...value,\n      credentials,\n      site: selectedSite,\n      library: selectedLibrary,\n      folder,\n      file: null\n    });\n  }, [credentials, onChange, selectedLibrary, selectedSite, value]);\n\n  /**\n   * Handle file selection\n   */\n  const handleFileSelect = useCallback(file => {\n    setSelectedFile(file);\n    onChange({\n      ...value,\n      credentials,\n      site: selectedSite,\n      library: selectedLibrary,\n      folder: selectedFolder,\n      file\n    });\n  }, [credentials, onChange, selectedFolder, selectedLibrary, selectedSite, value]);\n\n  // Determine if we have valid credentials for browser\n  const hasValidCredentials = Boolean(credentials && credentials.tenantId && (credentials.authMethod === 'oauth' && credentials.clientId && credentials.clientSecret || credentials.authMethod === 'app' && credentials.appId && credentials.appSecret || credentials.authMethod === 'certificate' && credentials.clientId && credentials.certificateThumbprint));\n\n  // Check if a site is selected\n  const hasSiteSelected = Boolean(selectedSite);\n\n  // Check if a library is selected\n  const hasLibrarySelected = Boolean(selectedLibrary);\n\n  // Check if a folder is selected\n  const hasFolderSelected = Boolean(selectedFolder);\n\n  // Check if a file is selected\n  const hasFileSelected = Boolean(selectedFile);\n  return /*#__PURE__*/_jsx(Card, {\n    variant: \"outlined\",\n    children: /*#__PURE__*/_jsxs(CardContent, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsxs(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        sx: {\n          mb: 2,\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsx(WebIcon, {\n          sx: {\n            mr: 1\n          }\n        }), \"SharePoint Configuration\"]\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        paragraph: true,\n        children: \"Configure SharePoint integration using Microsoft Graph API for accessing sites, document libraries, and files.\"\n      }), /*#__PURE__*/_jsxs(Tabs, {\n        value: activeTab,\n        onChange: (e, newValue) => setActiveTab(newValue),\n        sx: {\n          borderBottom: 1,\n          borderColor: 'divider',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsx(Tab, {\n          label: \"Credentials\"\n        }), /*#__PURE__*/_jsx(Tab, {\n          label: \"Browse\",\n          disabled: !hasValidCredentials || readOnly\n        }), /*#__PURE__*/_jsx(Tab, {\n          label: \"Selection\",\n          disabled: !hasFileSelected && !hasFolderSelected && !hasLibrarySelected && !hasSiteSelected\n        })]\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: activeTab === 0 ? 'block' : 'none',\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsx(SharePointCredentialManager, {\n          credentials: credentials,\n          onChange: handleCredentialsChange,\n          onTest: testCredentials,\n          testResults: testResults,\n          loading: testing,\n          disabled: readOnly\n        }), /*#__PURE__*/_jsx(Button, {\n          sx: {\n            mt: 2\n          },\n          variant: \"outlined\",\n          startIcon: /*#__PURE__*/_jsx(SettingsIcon, {}),\n          onClick: () => setShowAdvanced(!showAdvanced),\n          children: showAdvanced ? 'Hide Advanced Options' : 'Show Advanced Options'\n        }), /*#__PURE__*/_jsx(Collapse, {\n          in: showAdvanced,\n          children: /*#__PURE__*/_jsxs(Paper, {\n            variant: \"outlined\",\n            sx: {\n              p: 2,\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Advanced Configuration\"\n            }), /*#__PURE__*/_jsx(Grid, {\n              container: true,\n              spacing: 2,\n              children: /*#__PURE__*/_jsx(Grid, {\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxs(Alert, {\n                  severity: \"info\",\n                  children: [/*#__PURE__*/_jsx(AlertTitle, {\n                    children: \"Microsoft Graph API Usage\"\n                  }), \"This component uses the Microsoft Graph API instead of the legacy SharePoint REST API, providing better performance, more capabilities, and improved security. Make sure your app registration has the appropriate permissions.\"]\n                })\n              })\n            })]\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Box, {\n        sx: {\n          display: activeTab === 1 ? 'block' : 'none',\n          mt: 2\n        },\n        children: hasValidCredentials ? /*#__PURE__*/_jsx(Box, {\n          sx: {\n            height: 500\n          },\n          children: /*#__PURE__*/_jsx(SharePointBrowser, {\n            credentials: credentials,\n            onSelectSite: handleSiteSelect,\n            onSelectLibrary: handleLibrarySelect,\n            onSelectFolder: handleFolderSelect,\n            onSelectFile: handleFileSelect,\n            readOnly: readOnly,\n            selectedSite: (selectedSite === null || selectedSite === void 0 ? void 0 : selectedSite.id) || '',\n            selectedLibrary: (selectedLibrary === null || selectedLibrary === void 0 ? void 0 : selectedLibrary.id) || '',\n            selectedFolder: (selectedFolder === null || selectedFolder === void 0 ? void 0 : selectedFolder.id) || ''\n          })\n        }) : /*#__PURE__*/_jsxs(Alert, {\n          severity: \"warning\",\n          children: [/*#__PURE__*/_jsx(AlertTitle, {\n            children: \"Credentials Required\"\n          }), \"Please configure valid SharePoint credentials in the Credentials tab before browsing.\"]\n        })\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: activeTab === 2 ? 'block' : 'none',\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxs(Paper, {\n          variant: \"outlined\",\n          sx: {\n            p: 2\n          },\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            children: \"Selected Items\"\n          }), /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 2,\n            children: [selectedSite && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center'\n                  },\n                  children: [/*#__PURE__*/_jsx(WebIcon, {\n                    color: \"primary\",\n                    sx: {\n                      mr: 1\n                    }\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body1\",\n                    fontWeight: \"medium\",\n                    children: [\"Site: \", selectedSite.name]\n                  })]\n                }), selectedSite.description && /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: selectedSite.description\n                }), /*#__PURE__*/_jsxs(Typography, {\n                  variant: \"caption\",\n                  display: \"block\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: [\"URL: \", selectedSite.webUrl || selectedSite.url]\n                })]\n              })\n            }), selectedLibrary && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center'\n                  },\n                  children: [/*#__PURE__*/_jsx(LibraryIcon, {\n                    color: \"primary\",\n                    sx: {\n                      mr: 1\n                    }\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body1\",\n                    fontWeight: \"medium\",\n                    children: [\"Library: \", selectedLibrary.name]\n                  })]\n                }), selectedLibrary.description && /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: selectedLibrary.description\n                }), /*#__PURE__*/_jsxs(Typography, {\n                  variant: \"caption\",\n                  display: \"block\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: [\"Items: \", selectedLibrary.itemCount || 0]\n                })]\n              })\n            }), selectedFolder && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center'\n                  },\n                  children: [/*#__PURE__*/_jsx(FolderIcon, {\n                    color: \"primary\",\n                    sx: {\n                      mr: 1\n                    }\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body1\",\n                    fontWeight: \"medium\",\n                    children: [\"Folder: \", selectedFolder.name]\n                  })]\n                }), /*#__PURE__*/_jsxs(Typography, {\n                  variant: \"caption\",\n                  display: \"block\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: [\"Path: \", selectedFolder.webUrl]\n                })]\n              })\n            }), selectedFile && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center'\n                  },\n                  children: [/*#__PURE__*/_jsx(FileIcon, {\n                    color: \"primary\",\n                    sx: {\n                      mr: 1\n                    }\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body1\",\n                    fontWeight: \"medium\",\n                    children: [\"File: \", selectedFile.name]\n                  })]\n                }), /*#__PURE__*/_jsxs(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: [\"Type: \", selectedFile.contentType || 'Unknown']\n                }), /*#__PURE__*/_jsxs(Typography, {\n                  variant: \"body2\",\n                  sx: {\n                    mt: 0.5\n                  },\n                  children: [\"Size: \", formatFileSize(selectedFile.size || 0)]\n                }), /*#__PURE__*/_jsxs(Typography, {\n                  variant: \"caption\",\n                  display: \"block\",\n                  sx: {\n                    mt: 1\n                  },\n                  children: [\"URL: \", selectedFile.webUrl]\n                })]\n              })\n            }), !selectedSite && !selectedLibrary && !selectedFolder && !selectedFile && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(Alert, {\n                severity: \"info\",\n                children: \"No items selected. Please browse and select SharePoint items.\"\n              })\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            mt: 2,\n            display: 'flex',\n            justifyContent: 'flex-end'\n          },\n          children: [/*#__PURE__*/_jsx(Button, {\n            variant: \"outlined\",\n            color: \"secondary\",\n            onClick: () => {\n              setSelectedSite(null);\n              setSelectedLibrary(null);\n              setSelectedFolder(null);\n              setSelectedFile(null);\n              onChange({\n                ...value,\n                credentials,\n                site: null,\n                library: null,\n                folder: null,\n                file: null\n              });\n            },\n            sx: {\n              mr: 1\n            },\n            children: \"Clear Selection\"\n          }), /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsx(CloudDoneIcon, {}),\n            disabled: !hasValidCredentials || !hasFileSelected && !hasFolderSelected && !hasLibrarySelected && !hasSiteSelected,\n            onClick: () => {\n              // In a real application, this might save the configuration or proceed to the next step\n              console.log('SharePoint configuration completed:', {\n                credentials,\n                site: selectedSite,\n                library: selectedLibrary,\n                folder: selectedFolder,\n                file: selectedFile\n              });\n            },\n            children: \"Confirm Selection\"\n          })]\n        })]\n      })]\n    })\n  });\n};\n\n/**\n * Format file size to human-readable format\n * @param {number} bytes - File size in bytes\n * @returns {string} Formatted size\n */\nconst formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\nexport default SharePointConfiguration;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}