{"ast":null,"code":"/**\n * Integration Flow Canvas\n *\n * A complete integration flow canvas that combines the flow canvas with\n * a node panel and properties panel.\n *\n * @component\n */\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Box, Grid, Paper, Tabs, Tab, Divider, IconButton, Tooltip } from '@mui/material';\nimport { Save as SaveIcon, PlayArrow as RunIcon, SettingsBackupRestore as ResetIcon, History as HistoryIcon, Code as CodeIcon, Fullscreen as FullscreenIcon } from '@mui/icons-material';\n\n// Import flow components\nimport FlowCanvas from \"./FlowCanvas\";\nimport NodePanel from \"./NodePanel\";\n\n/**\n * Integration Flow Canvas component\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst IntegrationFlowCanvas = _ref => {\n  let {\n    initialElements = [],\n    readOnly = false,\n    userPermissions = [],\n    onSave,\n    onRun,\n    onChange\n  } = _ref;\n  // State for flow elements\n  const [elements, setElements] = useState(initialElements);\n\n  // State for selected node/edge\n  const [selectedElement, setSelectedElement] = useState(null);\n\n  // State for validation errors\n  const [validationErrors, setValidationErrors] = useState({});\n\n  // State for sidebar tabs\n  const [sidebarTab, setSidebarTab] = useState(0);\n\n  // Handle flow elements change\n  const handleElementsChange = useCallback(newElements => {\n    setElements(newElements);\n    if (onChange) {\n      onChange(newElements);\n    }\n  }, [onChange]);\n\n  // Handle node selection\n  const handleNodeSelect = useCallback(node => {\n    setSelectedElement({\n      ...node,\n      type: 'node'\n    });\n    setSidebarTab(1); // Switch to properties tab\n  }, []);\n\n  // Handle edge selection\n  const handleEdgeSelect = useCallback(edge => {\n    setSelectedElement({\n      ...edge,\n      type: 'edge'\n    });\n    setSidebarTab(1); // Switch to properties tab\n  }, []);\n\n  // Handle flow validation\n  const handleValidate = useCallback(flowElements => {\n    // Simple validation: ensure there's at least one source and one destination\n    const sourceNodes = flowElements.filter(el => el.type === 'sourceNode');\n    const destinationNodes = flowElements.filter(el => el.type === 'destinationNode');\n    const edges = flowElements.filter(el => el.source && el.target);\n    const errors = {};\n    const isValid = sourceNodes.length > 0 && destinationNodes.length > 0 && edges.length > 0;\n    if (!isValid) {\n      if (sourceNodes.length === 0) {\n        errors.general = 'Flow must include at least one source node';\n      } else if (destinationNodes.length === 0) {\n        errors.general = 'Flow must include at least one destination node';\n      } else if (edges.length === 0) {\n        errors.general = 'Nodes must be connected';\n      }\n    }\n    setValidationErrors(errors);\n    return isValid;\n  }, []);\n\n  // Handle flow save\n  const handleSave = useCallback(() => {\n    if (onSave) {\n      onSave(elements);\n    }\n  }, [elements, onSave]);\n\n  // Handle flow run\n  const handleRun = useCallback(() => {\n    const isValid = handleValidate(elements);\n    if (isValid && onRun) {\n      onRun(elements);\n    }\n  }, [elements, handleValidate, onRun]);\n\n  // Handle reset flow\n  const handleReset = useCallback(() => {\n    setElements(initialElements);\n    setSelectedElement(null);\n  }, [initialElements]);\n\n  // Render node properties panel\n  const renderNodeProperties = () => {\n    if (!selectedElement || selectedElement.type !== 'node') {\n      return /*#__PURE__*/_jsx(Box, {\n        sx: {\n          p: 2,\n          textAlign: 'center',\n          color: 'text.secondary'\n        },\n        children: \"Select a node to view properties\"\n      });\n    }\n\n    // In a real implementation, this would show a form for editing the node\n    return /*#__PURE__*/_jsxs(Box, {\n      sx: {\n        p: 2\n      },\n      children: [/*#__PURE__*/_jsx(\"h3\", {\n        children: \"Node Properties\"\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"ID: \", selectedElement.id]\n      }), /*#__PURE__*/_jsxs(\"p\", {\n        children: [\"Type: \", selectedElement.type]\n      })]\n    });\n  };\n  return /*#__PURE__*/_jsxs(Box, {\n    sx: {\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsx(Paper, {\n      elevation: 1,\n      sx: {\n        mb: 1\n      },\n      children: /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          p: 1,\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsx(Tooltip, {\n          title: \"Save Flow\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            onClick: handleSave,\n            disabled: readOnly,\n            children: /*#__PURE__*/_jsx(SaveIcon, {})\n          })\n        }), /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Run Flow\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            onClick: handleRun,\n            color: \"primary\",\n            children: /*#__PURE__*/_jsx(RunIcon, {})\n          })\n        }), /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Reset Flow\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            onClick: handleReset,\n            disabled: readOnly,\n            children: /*#__PURE__*/_jsx(ResetIcon, {})\n          })\n        }), /*#__PURE__*/_jsx(Divider, {\n          orientation: \"vertical\",\n          flexItem: true,\n          sx: {\n            mx: 1\n          }\n        }), /*#__PURE__*/_jsx(Tooltip, {\n          title: \"View History\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            children: /*#__PURE__*/_jsx(HistoryIcon, {})\n          })\n        }), /*#__PURE__*/_jsx(Tooltip, {\n          title: \"View JSON\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            children: /*#__PURE__*/_jsx(CodeIcon, {})\n          })\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            flexGrow: 1\n          }\n        }), /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Fullscreen\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            children: /*#__PURE__*/_jsx(FullscreenIcon, {})\n          })\n        })]\n      })\n    }), /*#__PURE__*/_jsx(Box, {\n      sx: {\n        flexGrow: 1,\n        display: 'flex'\n      },\n      children: /*#__PURE__*/_jsxs(Grid, {\n        container: true,\n        spacing: 1,\n        sx: {\n          height: '100%'\n        },\n        children: [/*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 2,\n          sx: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsx(NodePanel, {\n            userPermissions: userPermissions,\n            onRefresh: () => {} // Placeholder for refresh functionality\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 8,\n          sx: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsx(Paper, {\n            elevation: 2,\n            sx: {\n              height: '100%',\n              overflow: 'hidden'\n            },\n            children: /*#__PURE__*/_jsx(FlowCanvas, {\n              initialElements: elements,\n              readOnly: readOnly,\n              onChange: handleElementsChange,\n              onSave: handleSave,\n              onNodeSelect: handleNodeSelect,\n              onEdgeSelect: handleEdgeSelect,\n              onValidate: handleValidate,\n              validationErrors: validationErrors\n            })\n          })\n        }), /*#__PURE__*/_jsx(Grid, {\n          item: true,\n          xs: 2,\n          sx: {\n            height: '100%'\n          },\n          children: /*#__PURE__*/_jsxs(Paper, {\n            elevation: 2,\n            sx: {\n              height: '100%',\n              display: 'flex',\n              flexDirection: 'column',\n              overflow: 'hidden'\n            },\n            children: [/*#__PURE__*/_jsxs(Tabs, {\n              value: sidebarTab,\n              onChange: (_, newValue) => setSidebarTab(newValue),\n              variant: \"fullWidth\",\n              children: [/*#__PURE__*/_jsx(Tab, {\n                label: \"Info\"\n              }), /*#__PURE__*/_jsx(Tab, {\n                label: \"Properties\"\n              })]\n            }), /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(Box, {\n              sx: {\n                flexGrow: 1,\n                overflow: 'auto'\n              },\n              children: sidebarTab === 0 ? /*#__PURE__*/_jsxs(Box, {\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(\"h3\", {\n                  children: \"Flow Information\"\n                }), /*#__PURE__*/_jsxs(\"p\", {\n                  children: [\"Nodes: \", elements.filter(el => !el.source).length]\n                }), /*#__PURE__*/_jsxs(\"p\", {\n                  children: [\"Connections: \", elements.filter(el => el.source).length]\n                }), Object.keys(validationErrors).length > 0 && /*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    color: 'error.main',\n                    mt: 2\n                  },\n                  children: [/*#__PURE__*/_jsx(\"h4\", {\n                    children: \"Validation Errors\"\n                  }), Object.entries(validationErrors).map(_ref2 => {\n                    let [key, error] = _ref2;\n                    return /*#__PURE__*/_jsx(\"p\", {\n                      children: error\n                    }, key);\n                  })]\n                })]\n              }) : renderNodeProperties()\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport default IntegrationFlowCanvas;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}