{"ast":null,"code":"/**\n * Contextual Help Component\n * \n * A reusable component to provide context-sensitive help throughout the application.\n * Supports various help types including tooltips, popovers, and inline help text.\n * \n * @component\n */\n\nimport React, { useState, useCallback } from 'react';\nimport { Box, Typography, Tooltip, Popover, IconButton, Paper, Fade, Link, Divider } from '@mui/material';\nimport HelpIcon from '@mui/icons-material/Help';\nimport InfoIcon from '@mui/icons-material/Info';\nimport CloseIcon from '@mui/icons-material/Close';\n\n/**\n * Contextual Help component providing context-sensitive help information\n * \n * @param {Object} props - Component props\n * @param {string} props.id - Unique identifier for the help content\n * @param {string} props.title - Help title\n * @param {string|React.ReactNode} props.content - Help content (text or JSX)\n * @param {string} [props.type=\"tooltip\"] - Help display type (tooltip, popover, inline)\n * @param {'info'|'help'} [props.icon=\"help\"] - Icon to display (help or info)\n * @param {string} [props.size=\"medium\"] - Icon size (small, medium, large)\n * @param {Object} [props.iconProps] - Additional props for the icon\n * @param {Object} [props.tooltipProps] - Additional props for the tooltip\n * @param {Object} [props.popoverProps] - Additional props for the popover\n * @param {Object} [props.sx] - Custom styles\n * @returns {JSX.Element} The ContextualHelp component\n */\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nconst ContextualHelp = _ref => {\n  let {\n    id,\n    title,\n    content,\n    type = 'tooltip',\n    icon = 'help',\n    size = 'medium',\n    iconProps = {},\n    tooltipProps = {},\n    popoverProps = {},\n    relatedLinks = [],\n    sx = {},\n    ...rest\n  } = _ref;\n  // State for popover\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n  const popoverId = open ? `${id}-popover` : undefined;\n\n  // Handle popover open/close\n  const handlePopoverOpen = useCallback(event => {\n    setAnchorEl(event.currentTarget);\n  }, []);\n  const handlePopoverClose = useCallback(() => {\n    setAnchorEl(null);\n  }, []);\n\n  // Determine icon size\n  const iconSize = size === 'small' ? 'small' : size === 'large' ? 'large' : 'medium';\n\n  // Choose icon component based on icon prop\n  const IconComponent = icon === 'info' ? InfoIcon : HelpIcon;\n\n  // Determine max height for popover content\n  const maxContentHeight = window.innerHeight * 0.6;\n\n  // Render based on type\n  if (type === 'tooltip') {\n    return /*#__PURE__*/_jsx(Tooltip, {\n      title: /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          p: 0.5\n        },\n        children: [title && /*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle2\",\n          children: title\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"body2\",\n          children: content\n        })]\n      }),\n      arrow: true,\n      placement: \"top\",\n      ...tooltipProps,\n      children: /*#__PURE__*/_jsx(IconButton, {\n        size: iconSize,\n        color: \"primary\",\n        \"aria-label\": `Help: ${title || 'Information'}`,\n        sx: {\n          padding: size === 'small' ? '4px' : '8px',\n          ...sx\n        },\n        ...iconProps,\n        ...rest,\n        children: /*#__PURE__*/_jsx(IconComponent, {\n          fontSize: iconSize\n        })\n      })\n    });\n  }\n  if (type === 'popover') {\n    return /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(IconButton, {\n        \"aria-describedby\": popoverId,\n        size: iconSize,\n        color: \"primary\",\n        onClick: handlePopoverOpen,\n        \"aria-label\": `Help: ${title || 'Information'}`,\n        sx: {\n          padding: size === 'small' ? '4px' : '8px',\n          ...sx\n        },\n        ...iconProps,\n        ...rest,\n        children: /*#__PURE__*/_jsx(IconComponent, {\n          fontSize: iconSize\n        })\n      }), /*#__PURE__*/_jsx(Popover, {\n        id: popoverId,\n        open: open,\n        anchorEl: anchorEl,\n        onClose: handlePopoverClose,\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'center'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'center'\n        },\n        PaperProps: {\n          elevation: 4,\n          sx: {\n            maxWidth: '400px',\n            maxHeight: `${maxContentHeight}px`,\n            overflow: 'auto'\n          }\n        },\n        ...popoverProps,\n        children: /*#__PURE__*/_jsx(Fade, {\n          in: open,\n          children: /*#__PURE__*/_jsxs(Paper, {\n            sx: {\n              p: 0\n            },\n            children: [/*#__PURE__*/_jsxs(Box, {\n              sx: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n                bgcolor: 'primary.main',\n                color: 'primary.contrastText',\n                p: 1.5\n              },\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle1\",\n                sx: {\n                  fontWeight: 'medium'\n                },\n                children: title || 'Help Information'\n              }), /*#__PURE__*/_jsx(IconButton, {\n                size: \"small\",\n                onClick: handlePopoverClose,\n                color: \"inherit\",\n                \"aria-label\": \"Close help\",\n                children: /*#__PURE__*/_jsx(CloseIcon, {\n                  fontSize: \"small\"\n                })\n              })]\n            }), /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                p: 2\n              },\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"body2\",\n                component: \"div\",\n                children: content\n              }), relatedLinks && relatedLinks.length > 0 && /*#__PURE__*/_jsxs(_Fragment, {\n                children: [/*#__PURE__*/_jsx(Divider, {\n                  sx: {\n                    my: 1.5\n                  }\n                }), /*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle2\",\n                  sx: {\n                    mt: 1,\n                    mb: 0.5\n                  },\n                  children: \"Related Information\"\n                }), /*#__PURE__*/_jsx(Box, {\n                  component: \"ul\",\n                  sx: {\n                    m: 0,\n                    pl: 2\n                  },\n                  children: relatedLinks.map((link, index) => /*#__PURE__*/_jsx(Box, {\n                    component: \"li\",\n                    sx: {\n                      mb: 0.5\n                    },\n                    children: /*#__PURE__*/_jsx(Link, {\n                      href: link.url,\n                      onClick: e => {\n                        e.preventDefault();\n                        if (link.onClick) link.onClick();\n                      },\n                      sx: {\n                        fontSize: '0.875rem'\n                      },\n                      children: link.label\n                    })\n                  }, index))\n                })]\n              })]\n            })]\n          })\n        })\n      })]\n    });\n  }\n  if (type === 'inline') {\n    return /*#__PURE__*/_jsxs(Box, {\n      sx: {\n        display: 'flex',\n        p: 1.5,\n        borderRadius: 1,\n        bgcolor: 'info.lightest',\n        border: '1px solid',\n        borderColor: 'info.light',\n        mb: 2,\n        ...sx\n      },\n      ...rest,\n      children: [/*#__PURE__*/_jsx(IconComponent, {\n        fontSize: iconSize,\n        color: \"info\",\n        sx: {\n          mr: 1.5,\n          mt: '2px'\n        }\n      }), /*#__PURE__*/_jsxs(Box, {\n        children: [title && /*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle2\",\n          color: \"info.dark\",\n          sx: {\n            mb: 0.5\n          },\n          children: title\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          children: content\n        }), relatedLinks && relatedLinks.length > 0 && /*#__PURE__*/_jsx(Box, {\n          sx: {\n            mt: 1\n          },\n          children: relatedLinks.map((link, index) => /*#__PURE__*/_jsx(Link, {\n            href: link.url,\n            onClick: e => {\n              e.preventDefault();\n              if (link.onClick) link.onClick();\n            },\n            sx: {\n              fontSize: '0.875rem',\n              mr: 2,\n              display: 'inline-block'\n            },\n            children: link.label\n          }, index))\n        })]\n      })]\n    });\n  }\n\n  // Default fallback\n  return null;\n};\nexport default ContextualHelp;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}