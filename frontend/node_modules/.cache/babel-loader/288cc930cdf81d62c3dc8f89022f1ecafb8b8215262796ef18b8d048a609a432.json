{"ast":null,"code":"/**\n * React compatibility adapters\n * \n * This file provides compatibility adapters for different React versions\n */\n\nimport React from 'react';\n\n/**\n * Higher-order component for React version compatibility\n * @param {React.ComponentType} Component - The component to wrap\n * @returns {React.ComponentType} - The wrapped component with version compatibility\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function withReact18Compatibility(Component) {\n  const WrappedComponent = props => {\n    return /*#__PURE__*/_jsx(Component, {\n      ...props\n    });\n  };\n  WrappedComponent.displayName = `React18Compatible(${Component.displayName || Component.name || 'Component'})`;\n  return WrappedComponent;\n}\n\n/**\n * Creates a version-safe context for React\n * @param {*} defaultValue - The default context value\n * @returns {React.Context} - A React context with compatibility features\n */\nexport function createCompatContext(defaultValue) {\n  return /*#__PURE__*/React.createContext(defaultValue);\n}\n\n/**\n * Version-safe useEffect with proper cleanup\n * @param {Function} effect - Effect callback\n * @param {Array} deps - Dependency array\n */\nexport function useCompatEffect(effect, deps) {\n  return React.useEffect(effect, deps);\n}\nexport default {\n  withReact18Compatibility,\n  createCompatContext,\n  useCompatEffect\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}