{"ast":null,"code":"import React, { useState } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Box, TextField, Button, Typography, Paper, Container } from \"../design-system/optimized\";\nimport { useUser } from \"../contexts/UserContext\";\nimport { useNotification } from \"../contexts/NotificationContext\";\n\n/**\n * Login Page component - Handles user authentication\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst LoginPage = () => {\n  var _location$state, _location$state$from;\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    setState: setUser\n  } = useUser();\n  const {\n    setState: setNotification\n  } = useNotification();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Get the redirect path from location state or default to home\n  const from = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : (_location$state$from = _location$state.from) === null || _location$state$from === void 0 ? void 0 : _location$state$from.pathname) || '/';\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      // In a real app, this would make an API call\n      // For demonstration, we'll simulate authentication\n      if (username === 'ai-dev' && password === 'TAPintoAI!') {\n        // Successful login\n        setUser({\n          isAuthenticated: true,\n          isAdmin: true,\n          // This user is an admin\n          name: 'AI Developer',\n          email: 'ai-dev@example.com',\n          id: '1234567890'\n        });\n        setNotification({\n          type: 'success',\n          message: 'Login successful!',\n          open: true\n        });\n\n        // Navigate to the page the user was trying to access\n        navigate(from, {\n          replace: true\n        });\n      } else {\n        // Failed login\n        setNotification({\n          type: 'error',\n          message: 'Invalid credentials. Please try again.',\n          open: true\n        });\n      }\n    } catch (error) {\n      setNotification({\n        type: 'error',\n        message: 'An error occurred during login. Please try again.',\n        open: true\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsx(Container, {\n    maxWidth: \"sm\",\n    children: /*#__PURE__*/_jsx(Box, {\n      sx: {\n        marginTop: 8,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: /*#__PURE__*/_jsxs(Paper, {\n        elevation: 3,\n        sx: {\n          padding: 4,\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsx(Typography, {\n          component: \"h1\",\n          variant: \"h5\",\n          align: \"center\",\n          gutterBottom: true,\n          children: \"Sign in to TAP Integration Platform\"\n        }), /*#__PURE__*/_jsxs(Box, {\n          component: \"form\",\n          onSubmit: handleSubmit,\n          sx: {\n            mt: 1\n          },\n          children: [/*#__PURE__*/_jsx(TextField, {\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            id: \"username\",\n            label: \"Username\",\n            name: \"username\",\n            autoComplete: \"username\",\n            autoFocus: true,\n            value: username,\n            onChange: e => setUsername(e.target.value)\n          }), /*#__PURE__*/_jsx(TextField, {\n            margin: \"normal\",\n            required: true,\n            fullWidth: true,\n            name: \"password\",\n            label: \"Password\",\n            type: \"password\",\n            id: \"password\",\n            autoComplete: \"current-password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }), /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"contained\",\n            color: \"primary\",\n            sx: {\n              mt: 3,\n              mb: 2\n            },\n            disabled: isLoading,\n            children: isLoading ? 'Signing in...' : 'Sign In'\n          })]\n        })]\n      })\n    })\n  });\n};\nexport default LoginPage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}