{"ast":null,"code":"/**\n * AzureBlobConfiguration.jsx\n * -----------------------------------------------------------------------------\n * Enhanced configuration component for Azure Blob Storage connections\n * with integrated container browser functionality.\n */import React,{useState,useCallback,useEffect}from'react';import{Box,Button,Chip,CircularProgress,Dialog,DialogActions,DialogContent,DialogTitle,Divider,FormControl,FormControlLabel,FormHelperText,Grid,IconButton,InputAdornment,InputLabel,LinearProgress,MenuItem,Paper,Radio,RadioGroup,Select,Snackbar,Tab,Tabs,TextField,Tooltip,Typography,Alert,AlertTitle}from'@mui/material';import InfoIcon from'@mui/icons-material/Info';import VisibilityIcon from'@mui/icons-material/Visibility';import VisibilityOffIcon from'@mui/icons-material/VisibilityOff';import StorageIcon from'@mui/icons-material/Storage';import FolderIcon from'@mui/icons-material/Folder';import CheckCircleIcon from'@mui/icons-material/CheckCircle';import ErrorIcon from'@mui/icons-material/Error';import SearchIcon from'@mui/icons-material/Search';import CloseIcon from'@mui/icons-material/Close';import LockIcon from'@mui/icons-material/Lock';import KeyIcon from'@mui/icons-material/Key';// Import components\nimport AzureBlobContainerBrowser from\"./azure/AzureBlobContainerBrowser\";import AzureCredentialManager from\"./azure/AzureCredentialManager\";/**\n * Azure Blob Configuration Component with integrated browser functionality\n * \n * @component\n * @param {Object} props - Component props\n * @param {Object} props.config - Current configuration values\n * @param {Function} props.onChange - Callback when configuration changes\n * @param {Object} props.errors - Validation errors\n * @param {boolean} props.readOnly - Whether the component is in read-only mode\n * @param {boolean} props.isSuperUser - Whether the user has super user permissions\n */const AzureBlobConfiguration=_ref=>{var _authMethods$find;let{config,onChange,errors={},readOnly=false,isSuperUser=false}=_ref;// State for secrets visibility\nconst[showSecrets,setShowSecrets]=useState(false);// State for container browser dialog\nconst[browserOpen,setBrowserOpen]=useState(false);const[activeTab,setActiveTab]=useState(0);// State for connection testing\nconst[testing,setTesting]=useState(false);const[testResult,setTestResult]=useState(null);const[testSnackbarOpen,setTestSnackbarOpen]=useState(false);// State for pattern preview\nconst[showPatternPreview,setShowPatternPreview]=useState(false);const[previewLoading,setPreviewLoading]=useState(false);const[patternMatches,setPatternMatches]=useState([]);// Default configuration structure\nconst defaultConfig={authMethod:'connectionString',connectionString:'',accountName:'',accountKey:'',sasToken:'',useManagedIdentity:false,containerName:'',filePattern:'*.csv',path:'',createContainerIfNotExists:false};// State for stored credentials\nconst[hasCredentials,setHasCredentials]=useState(false);const[showCredentialManager,setShowCredentialManager]=useState(false);// Merge provided config with defaults\nconst blobConfig={...defaultConfig,...config};/**\n   * Handle change in form fields\n   */const handleChange=e=>{const{name,value,type,checked}=e.target;const newValue=type==='checkbox'?checked:value;// If auth method changes, reset related fields\nlet updatedConfig={...blobConfig,[name]:newValue};if(name==='authMethod'){updatedConfig={...updatedConfig,connectionString:'',accountName:'',accountKey:'',sasToken:''};}// Clear any existing test result when configuration changes\nsetTestResult(null);onChange(updatedConfig);};/**\n   * Toggle visibility of secret fields\n   */const toggleShowSecrets=()=>{setShowSecrets(!showSecrets);};/**\n   * Toggle visibility of credential manager\n   */const toggleCredentialManager=()=>{setShowCredentialManager(!showCredentialManager);};/**\n   * Handle credentials loaded from credential manager\n   */const handleCredentialsLoaded=credentials=>{if(!credentials)return;// Update configuration from loaded credentials\nconst updatedConfig={...blobConfig};// Set authentication method\nif(credentials.connectionString){updatedConfig.authMethod='connectionString';updatedConfig.connectionString=credentials.connectionString;}else if(credentials.sasToken){updatedConfig.authMethod='sasToken';updatedConfig.accountName=credentials.accountName;updatedConfig.sasToken=credentials.sasToken;}else if(credentials.accountKey){updatedConfig.authMethod='accountKey';updatedConfig.accountName=credentials.accountName;updatedConfig.accountKey=credentials.accountKey;}else if(credentials.useManagedIdentity){updatedConfig.authMethod='managedIdentity';updatedConfig.accountName=credentials.accountName;updatedConfig.useManagedIdentity=true;}// Update configuration\nonChange(updatedConfig);// Update UI state\nsetHasCredentials(true);};/**\n   * Handle opening of container browser\n   */const handleOpenBrowser=()=>{setBrowserOpen(true);};/**\n   * Handle closing of container browser\n   */const handleCloseBrowser=()=>{setBrowserOpen(false);};/**\n   * Handle tab change in browser dialog\n   */const handleTabChange=(event,newValue)=>{setActiveTab(newValue);};/**\n   * Handle container selection from browser\n   */const handleSelectContainer=useCallback(containerName=>{if(containerName){onChange({...blobConfig,containerName});}},[blobConfig,onChange]);/**\n   * Handle blob selection from browser\n   */const handleSelectBlob=useCallback(blobInfo=>{if(blobInfo){// Extract the path from the blob name\nconst fullPath=blobInfo.blobName;const containerName=blobInfo.containerName;// Get the directory path by removing the filename\nconst lastSlashIndex=fullPath.lastIndexOf('/');const directoryPath=lastSlashIndex>0?fullPath.substring(0,lastSlashIndex+1):'';// Extract a pattern based on the file name\nconst fileName=lastSlashIndex>0?fullPath.substring(lastSlashIndex+1):fullPath;// Determine a reasonable pattern based on file extension\nconst dotIndex=fileName.lastIndexOf('.');const fileExtension=dotIndex>0?fileName.substring(dotIndex):'';const filePattern=fileExtension?`*${fileExtension}`:fileName;onChange({...blobConfig,containerName,path:directoryPath,filePattern});}},[blobConfig,onChange]);/**\n   * Test the Azure connection with comprehensive diagnostics\n   */const testConnection=useCallback(async()=>{// Don't test if required fields are missing\nif(!canTest())return;setTesting(true);setTestResult(null);try{// Simulate API call to test connection\nconsole.log('Testing connection with config:',blobConfig);// In a production environment, this would call a real API endpoint\n// For our development environment, we'll simulate detailed test steps\nconst result=await new Promise(resolve=>{// Create a function to simulate step-by-step testing\nconst runDiagnostics=async()=>{const diagnosticSteps=[];let success=false;let message='';let details={};// Step 1: Validate configuration format\nawait sleep(400);// Simulate network delay\nif(blobConfig.authMethod==='connectionString'){const hasAccountName=blobConfig.connectionString.includes('AccountName=');const hasAccountKey=blobConfig.connectionString.includes('AccountKey=');const hasEndpoint=blobConfig.connectionString.includes('EndpointSuffix=')||blobConfig.connectionString.includes('BlobEndpoint=');diagnosticSteps.push({name:'Validate connection string format',success:hasAccountName&&hasAccountKey&&hasEndpoint,message:hasAccountName&&hasAccountKey&&hasEndpoint?'Connection string format is valid':'Connection string is missing required components',details:{hasAccountName,hasAccountKey,hasEndpoint}});if(!hasAccountName||!hasAccountKey||!hasEndpoint){return{success:false,message:'Invalid connection string format',diagnosticSteps,details:{missingComponents:[...(!hasAccountName?['AccountName']:[]),...(!hasAccountKey?['AccountKey']:[]),...(!hasEndpoint?['EndpointSuffix or BlobEndpoint']:[])]}};}}else if(blobConfig.authMethod==='accountKey'){const validAccountName=blobConfig.accountName.length>3;const validAccountKey=blobConfig.accountKey.length>10;diagnosticSteps.push({name:'Validate account credentials',success:validAccountName&&validAccountKey,message:validAccountName&&validAccountKey?'Account name and key format validated':'Invalid account name or key format',details:{accountNameValid:validAccountName,accountKeyValid:validAccountKey}});if(!validAccountName||!validAccountKey){return{success:false,message:'Invalid account credentials',diagnosticSteps,details:{issues:[...(!validAccountName?['Account name is too short or invalid']:[]),...(!validAccountKey?['Account key is too short or invalid']:[])]}};}}else if(blobConfig.authMethod==='sasToken'){const validAccountName=blobConfig.accountName.length>3;const validSasToken=blobConfig.sasToken.startsWith('?')&&blobConfig.sasToken.includes('sig=');diagnosticSteps.push({name:'Validate SAS token credentials',success:validAccountName&&validSasToken,message:validAccountName&&validSasToken?'Account name and SAS token format validated':'Invalid SAS token configuration',details:{accountNameValid:validAccountName,sasTokenValid:validSasToken}});if(!validAccountName||!validSasToken){return{success:false,message:'Invalid SAS token configuration',diagnosticSteps,details:{issues:[...(!validAccountName?['Account name is too short or invalid']:[]),...(!validSasToken?['SAS token must start with ? and include a signature (sig=)']:[])]}};}}else if(blobConfig.authMethod==='managedIdentity'){const validAccountName=blobConfig.accountName.length>3;diagnosticSteps.push({name:'Validate managed identity configuration',success:validAccountName,message:validAccountName?'Account name format validated':'Invalid account name for managed identity',details:{accountNameValid:validAccountName}});if(!validAccountName){return{success:false,message:'Invalid managed identity configuration',diagnosticSteps,details:{issues:['Account name is required even when using managed identity']}};}}// Step 2: Test connection to account\nawait sleep(600);const accountConnected=Math.random()>0.1;// 90% success rate for demo\ndiagnosticSteps.push({name:'Connect to storage account',success:accountConnected,message:accountConnected?'Successfully connected to storage account':'Failed to connect to storage account',details:{timestamp:new Date().toISOString(),authMethod:blobConfig.authMethod}});if(!accountConnected){return{success:false,message:'Could not connect to storage account',diagnosticSteps,details:{possibleIssues:['Network connectivity problem','Invalid credentials','Account firewall restrictions','Account may not exist']}};}// Step 3: Test container access\nawait sleep(500);const containerExists=blobConfig.containerName!==''&&Math.random()>0.1;// 90% success if container specified\ndiagnosticSteps.push({name:'Verify container access',success:containerExists,message:blobConfig.containerName?containerExists?`Container '${blobConfig.containerName}' exists and is accessible`:`Container '${blobConfig.containerName}' does not exist or is not accessible`:'No container specified, skipping container verification',details:{containerName:blobConfig.containerName||'Not specified',createIfNotExists:blobConfig.createContainerIfNotExists}});if(blobConfig.containerName&&!containerExists&&!blobConfig.createContainerIfNotExists){return{success:false,message:`Container '${blobConfig.containerName}' does not exist or is not accessible`,diagnosticSteps,details:{recommendation:'Enable \"Create container if it doesn\\'t exist\" option or choose an existing container'}};}// Step 4: Test file pattern matching\nawait sleep(400);const hasFilePattern=blobConfig.filePattern&&blobConfig.filePattern.trim()!=='';const validPattern=hasFilePattern&&!blobConfig.filePattern.includes('\\\\');diagnosticSteps.push({name:'Validate file pattern',success:!hasFilePattern||validPattern,message:!hasFilePattern?'No file pattern specified, will match all files':validPattern?`File pattern '${blobConfig.filePattern}' is valid`:`File pattern '${blobConfig.filePattern}' contains invalid characters`,details:{pattern:blobConfig.filePattern||'Not specified',valid:!hasFilePattern||validPattern}});// Step 5: Perform permissions check\nawait sleep(600);const hasReadPermission=true;// In real implementation, check actual permissions\nconst hasWritePermission=blobConfig.authMethod!=='sasToken'||blobConfig.sasToken.includes('sp=')&&blobConfig.sasToken.includes('w');diagnosticSteps.push({name:'Verify storage permissions',success:hasReadPermission,message:hasReadPermission?hasWritePermission?'Account has read and write permissions':'Account has read permissions only':'Account lacks required read permissions',details:{permissions:{read:hasReadPermission,write:hasWritePermission}}});if(!hasReadPermission){return{success:false,message:'Account lacks required read permissions',diagnosticSteps,details:{recommendation:'Ensure the credentials have at least read access to the storage account'}};}// All tests passed\nreturn{success:true,message:'Connection successful! All diagnostics passed.',diagnosticSteps,details:{timestamp:new Date().toISOString(),readPermission:hasReadPermission,writePermission:hasWritePermission,containerExists:containerExists||!blobConfig.containerName}};};// Execute the diagnostics\nsetTimeout(async()=>{const diagnosticResult=await runDiagnostics();resolve(diagnosticResult);},500);});setTestResult(result);setTestSnackbarOpen(true);}catch(error){console.error('Error testing connection:',error);setTestResult({success:false,message:error.message||'An unexpected error occurred',diagnosticSteps:[{name:'Initialize connection test',success:false,message:'Error occurred during test initialization',details:{error:error.message||'Unknown error'}}]});setTestSnackbarOpen(true);}finally{setTesting(false);}},[blobConfig]);// Helper function to simulate async operations\nconst sleep=ms=>new Promise(resolve=>setTimeout(resolve,ms));/**\n   * Preview files matching the pattern\n   */const previewPattern=useCallback(async()=>{if(!blobConfig.containerName||!blobConfig.filePattern)return;setPreviewLoading(true);setPatternMatches([]);try{// Simulate API call to get matching files\nconsole.log(`Previewing pattern: ${blobConfig.filePattern} in container: ${blobConfig.containerName} with path: ${blobConfig.path}`);// Simulation delay\nconst result=await new Promise(resolve=>{setTimeout(()=>{// Convert glob pattern to regex for simple simulation\nconst pattern=blobConfig.filePattern.replace(/\\./g,'\\\\.').replace(/\\*/g,'.*');const regex=new RegExp(`^${pattern}$`);// Sample files that might be in the container\nconst sampleFiles=['data.csv','sample.csv','employees.csv','data.json','employees.json','report.pdf','summary.xlsx','log.txt'];// Filter files by pattern\nconst matches=sampleFiles.filter(file=>regex.test(file)).map(file=>({name:blobConfig.path?`${blobConfig.path}${file}`:file,size:Math.floor(Math.random()*1024*1024),// Random size up to 1MB\nlastModified:new Date().toISOString()}));resolve(matches);},1000);});setPatternMatches(result);setShowPatternPreview(true);}catch(error){console.error('Error previewing pattern:',error);}finally{setPreviewLoading(false);}},[blobConfig.containerName,blobConfig.filePattern,blobConfig.path]);/**\n   * Check if connection can be tested\n   */const canTest=useCallback(()=>{if(blobConfig.authMethod==='connectionString'){return blobConfig.connectionString.length>0;}else if(blobConfig.authMethod==='accountKey'){return blobConfig.accountName.length>0&&blobConfig.accountKey.length>0;}else if(blobConfig.authMethod==='sasToken'){return blobConfig.accountName.length>0&&blobConfig.sasToken.length>0;}else if(blobConfig.authMethod==='managedIdentity'){return blobConfig.accountName.length>0;}return false;},[blobConfig]);// Authentication method options\nconst authMethods=[{value:'connectionString',label:'Connection String'},{value:'accountKey',label:'Account Name & Key'},{value:'sasToken',label:'SAS Token'},{value:'managedIdentity',label:'Managed Identity'}];// Field visibility based on selected auth method\nconst showConnectionString=blobConfig.authMethod==='connectionString';const showAccountKey=blobConfig.authMethod==='accountKey';const showSasToken=blobConfig.authMethod==='sasToken';const showManagedIdentity=blobConfig.authMethod==='managedIdentity';const showAccountName=blobConfig.authMethod==='accountKey'||blobConfig.authMethod==='sasToken'||blobConfig.authMethod==='managedIdentity';return/*#__PURE__*/_jsxs(Box,{sx:{mt:2},children:[/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\",mb:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle1\",children:\"Azure Blob Storage Configuration\"}),/*#__PURE__*/_jsxs(Box,{children:[!readOnly&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"primary\",onClick:testConnection,disabled:testing||!canTest(),startIcon:testing?/*#__PURE__*/_jsx(CircularProgress,{size:20}):testResult?testResult.success?/*#__PURE__*/_jsx(CheckCircleIcon,{}):/*#__PURE__*/_jsx(ErrorIcon,{}):null,sx:{mr:1},children:testing?'Testing...':'Test Connection'}),/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:hasCredentials?\"success\":\"primary\",onClick:toggleCredentialManager,startIcon:/*#__PURE__*/_jsx(KeyIcon,{}),disabled:testing,sx:{mr:1},children:hasCredentials?'Manage Credentials':'Set Up Credentials'})]}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:handleOpenBrowser,startIcon:/*#__PURE__*/_jsx(StorageIcon,{}),disabled:readOnly||testing,children:\"Browse Storage\"})]})]}),showCredentialManager&&/*#__PURE__*/_jsx(Box,{mb:3,children:/*#__PURE__*/_jsx(AzureCredentialManager,{onCredentialsLoaded:handleCredentialsLoaded,onCredentialsSaved:handleCredentialsLoaded,readOnly:readOnly,initialVisible:true})}),isSuperUser&&/*#__PURE__*/_jsxs(Paper,{elevation:0,variant:\"outlined\",sx:{p:2,mb:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Authentication Settings\"}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{component:\"fieldset\",children:[/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",gutterBottom:true,children:\"Authentication Method\"}),/*#__PURE__*/_jsx(RadioGroup,{name:\"authMethod\",value:blobConfig.authMethod,onChange:handleChange,row:true,disabled:readOnly,children:authMethods.map(method=>/*#__PURE__*/_jsx(FormControlLabel,{value:method.value,control:/*#__PURE__*/_jsx(Radio,{}),label:method.label,disabled:readOnly},method.value))})]})}),showConnectionString&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(FormControl,{fullWidth:true,error:!!errors.connectionString,children:/*#__PURE__*/_jsx(TextField,{name:\"connectionString\",label:\"Connection String\",value:blobConfig.connectionString,onChange:handleChange,type:showSecrets?'text':'password',error:!!errors.connectionString,helperText:errors.connectionString,disabled:readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsxs(InputAdornment,{position:\"end\",children:[/*#__PURE__*/_jsx(IconButton,{onClick:toggleShowSecrets,edge:\"end\",children:showSecrets?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})}),/*#__PURE__*/_jsx(Tooltip,{title:\"The connection string for your Azure Storage account. Format: DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...;EndpointSuffix=core.windows.net\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",children:/*#__PURE__*/_jsx(InfoIcon,{})})})]})}})})}),showAccountName&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:showAccountKey?6:12,children:/*#__PURE__*/_jsx(FormControl,{fullWidth:true,error:!!errors.accountName,children:/*#__PURE__*/_jsx(TextField,{name:\"accountName\",label:\"Storage Account Name\",value:blobConfig.accountName,onChange:handleChange,error:!!errors.accountName,helperText:errors.accountName,disabled:readOnly})})}),showAccountKey&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsx(FormControl,{fullWidth:true,error:!!errors.accountKey,children:/*#__PURE__*/_jsx(TextField,{name:\"accountKey\",label:\"Account Key\",value:blobConfig.accountKey,onChange:handleChange,type:showSecrets?'text':'password',error:!!errors.accountKey,helperText:errors.accountKey,disabled:readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(IconButton,{onClick:toggleShowSecrets,edge:\"end\",children:showSecrets?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})})})}})})}),showSasToken&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(FormControl,{fullWidth:true,error:!!errors.sasToken,children:/*#__PURE__*/_jsx(TextField,{name:\"sasToken\",label:\"SAS Token\",value:blobConfig.sasToken,onChange:handleChange,type:showSecrets?'text':'password',error:!!errors.sasToken,helperText:errors.sasToken||\"Include the leading '?' character\",disabled:readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsxs(InputAdornment,{position:\"end\",children:[/*#__PURE__*/_jsx(IconButton,{onClick:toggleShowSecrets,edge:\"end\",children:showSecrets?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})}),/*#__PURE__*/_jsx(Tooltip,{title:\"A Shared Access Signature (SAS) token providing permissions to the storage account or container\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",children:/*#__PURE__*/_jsx(InfoIcon,{})})})]})}})})}),showManagedIdentity&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Paper,{variant:\"outlined\",sx:{p:2,bgcolor:'background.default'},children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",children:\"Using Azure Managed Identity for authentication. No additional credentials required. The application will use the identity assigned to the deployment environment.\"})})})]})]}),/*#__PURE__*/_jsxs(Paper,{elevation:0,variant:\"outlined\",sx:{p:2},children:[/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\",mb:1,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",children:\"Container Settings\"}),!readOnly&&canTest()&&/*#__PURE__*/_jsx(Button,{variant:\"outlined\",size:\"small\",onClick:testConnection,disabled:testing,startIcon:testing?/*#__PURE__*/_jsx(CircularProgress,{size:16}):testResult?testResult.success?/*#__PURE__*/_jsx(CheckCircleIcon,{size:\"small\"}):/*#__PURE__*/_jsx(ErrorIcon,{size:\"small\"}):null,children:\"Test Connection\"})]}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsx(FormControl,{fullWidth:true,error:!!errors.containerName,children:/*#__PURE__*/_jsx(TextField,{name:\"containerName\",label:\"Container Name\",value:blobConfig.containerName,onChange:handleChange,error:!!errors.containerName,helperText:errors.containerName||\"Name of the Azure Blob container\",disabled:readOnly,InputProps:{endAdornment:blobConfig.containerName?/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(Tooltip,{title:\"Browse container\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",onClick:handleOpenBrowser,disabled:readOnly,children:/*#__PURE__*/_jsx(StorageIcon,{})})})}):null}})})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsx(FormControl,{fullWidth:true,error:!!errors.filePattern,children:/*#__PURE__*/_jsx(TextField,{name:\"filePattern\",label:\"File Pattern\",value:blobConfig.filePattern,onChange:handleChange,error:!!errors.filePattern,helperText:errors.filePattern||\"Example: *.csv, employee-*.json\",disabled:readOnly,InputProps:{endAdornment:blobConfig.containerName&&blobConfig.filePattern?/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(Tooltip,{title:\"Preview matching files\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",onClick:previewPattern,disabled:readOnly||previewLoading,children:/*#__PURE__*/_jsx(SearchIcon,{})})})}):null}})})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(FormControl,{fullWidth:true,children:/*#__PURE__*/_jsx(TextField,{name:\"path\",label:\"Path (Optional)\",value:blobConfig.path,onChange:handleChange,helperText:\"Optional folder path inside the container (e.g., 'daily/employees/')\",disabled:readOnly,InputProps:{endAdornment:blobConfig.path?/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(Tooltip,{title:\"Browse this path\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",onClick:handleOpenBrowser,disabled:readOnly,children:/*#__PURE__*/_jsx(FolderIcon,{})})})}):null}})})}),!readOnly&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(FormControlLabel,{control:/*#__PURE__*/_jsx(Checkbox,{name:\"createContainerIfNotExists\",checked:blobConfig.createContainerIfNotExists,onChange:handleChange,disabled:readOnly}),label:\"Create container if it doesn't exist\"}),/*#__PURE__*/_jsx(FormHelperText,{children:\"If enabled, the system will attempt to create the container when the integration runs\"})]})})]}),patternMatches.length>0&&/*#__PURE__*/_jsxs(Box,{mt:2,children:[/*#__PURE__*/_jsx(Divider,{sx:{mb:2}}),/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Preview of Files Matching Pattern\"}),/*#__PURE__*/_jsx(Box,{sx:{maxHeight:'200px',overflow:'auto',mb:1},children:/*#__PURE__*/_jsx(List,{dense:true,children:patternMatches.map((file,idx)=>/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(ListItemIcon,{children:/*#__PURE__*/_jsx(FileIcon,{color:\"primary\",fontSize:\"small\"})}),/*#__PURE__*/_jsx(ListItemText,{primary:file.name,secondary:`${formatFileSize(file.size)} • ${formatDate(file.lastModified)}`})]},idx))})}),/*#__PURE__*/_jsxs(Box,{display:\"flex\",justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"textSecondary\",children:[patternMatches.length,\" file(s) match your pattern\"]}),/*#__PURE__*/_jsx(Button,{size:\"small\",onClick:()=>setPatternMatches([]),startIcon:/*#__PURE__*/_jsx(CloseIcon,{}),children:\"Close Preview\"})]})]})]}),/*#__PURE__*/_jsxs(Dialog,{open:browserOpen,onClose:handleCloseBrowser,fullWidth:true,maxWidth:\"lg\",sx:{'& .MuiDialog-paper':{height:'80vh'}},children:[/*#__PURE__*/_jsx(DialogTitle,{children:/*#__PURE__*/_jsxs(Tabs,{value:activeTab,onChange:handleTabChange,children:[/*#__PURE__*/_jsx(Tab,{label:\"Browse Containers\"}),/*#__PURE__*/_jsx(Tab,{label:\"Connection Settings\",disabled:!canTest()})]})}),/*#__PURE__*/_jsxs(DialogContent,{dividers:true,sx:{height:'100%',p:0},children:[activeTab===0&&/*#__PURE__*/_jsx(Box,{sx:{height:'100%'},children:/*#__PURE__*/_jsx(AzureBlobContainerBrowser,{config:blobConfig,onSelectContainer:handleSelectContainer,onSelectBlob:handleSelectBlob,readOnly:readOnly,selectedContainer:blobConfig.containerName,selectedPath:blobConfig.path})}),activeTab===1&&/*#__PURE__*/_jsxs(Box,{sx:{p:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"Connection Diagnostics\"}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(Paper,{variant:\"outlined\",sx:{p:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Authentication Method\"}),/*#__PURE__*/_jsx(Chip,{label:(_authMethods$find=authMethods.find(m=>m.value===blobConfig.authMethod))===null||_authMethods$find===void 0?void 0:_authMethods$find.label,color:\"primary\",variant:\"outlined\"}),/*#__PURE__*/_jsx(Divider,{sx:{my:2}}),showConnectionString&&/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Connection String\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",children:showSecrets?blobConfig.connectionString:'•••••••••••••••••••••••••••••'})]}),showAccountName&&/*#__PURE__*/_jsxs(Box,{mt:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Storage Account Name\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:blobConfig.accountName})]}),showAccountKey&&/*#__PURE__*/_jsxs(Box,{mt:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Account Key\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",children:showSecrets?blobConfig.accountKey:'•••••••••••••••••••••••••••••'})]}),showSasToken&&/*#__PURE__*/_jsxs(Box,{mt:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"SAS Token\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",children:showSecrets?blobConfig.sasToken:'•••••••••••••••••••••••••••••'})]}),showManagedIdentity&&/*#__PURE__*/_jsxs(Box,{mt:2,children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Managed Identity\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",children:\"Using the system-assigned managed identity\"})]})]})}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,children:[/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:testConnection,disabled:testing||!canTest(),startIcon:testing?/*#__PURE__*/_jsx(CircularProgress,{size:20}):null,fullWidth:true,children:testing?'Testing Connection...':'Test Connection'}),testResult&&/*#__PURE__*/_jsxs(Box,{sx:{mt:2},children:[/*#__PURE__*/_jsx(Alert,{severity:testResult.success?'success':'error',sx:{mb:2},action:/*#__PURE__*/_jsx(IconButton,{\"aria-label\":\"close\",color:\"inherit\",size:\"small\",onClick:()=>setTestResult(null),children:/*#__PURE__*/_jsx(CloseIcon,{fontSize:\"inherit\"})}),children:testResult.message}),testResult.diagnosticSteps&&/*#__PURE__*/_jsxs(Paper,{variant:\"outlined\",sx:{p:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"Diagnostic Results\"}),/*#__PURE__*/_jsx(List,{dense:true,children:testResult.diagnosticSteps.map((step,index)=>/*#__PURE__*/_jsxs(ListItem,{divider:index<testResult.diagnosticSteps.length-1,sx:{py:1.5,backgroundColor:step.success?'success.lighter':index===testResult.diagnosticSteps.findIndex(s=>!s.success)?'error.lighter':'inherit'},children:[/*#__PURE__*/_jsx(ListItemIcon,{children:step.success?/*#__PURE__*/_jsx(CheckCircleIcon,{color:\"success\"}):/*#__PURE__*/_jsx(ErrorIcon,{color:\"error\"})}),/*#__PURE__*/_jsx(ListItemText,{primary:step.name,secondary:step.message,primaryTypographyProps:{fontWeight:'medium'}}),/*#__PURE__*/_jsx(Tooltip,{title:/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",children:\"Details\"}),/*#__PURE__*/_jsx(\"pre\",{style:{whiteSpace:'pre-wrap',fontSize:'0.8rem'},children:JSON.stringify(step.details,null,2)})]}),children:/*#__PURE__*/_jsx(IconButton,{size:\"small\",children:/*#__PURE__*/_jsx(InfoIcon,{fontSize:\"small\"})})})]},index))}),testResult.details&&testResult.details.recommendation&&/*#__PURE__*/_jsxs(Box,{sx:{mt:2,bgcolor:'info.lighter',p:2,borderRadius:1},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",color:\"info.dark\",children:\"Recommendation\"}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:testResult.details.recommendation})]}),testResult.details&&testResult.details.possibleIssues&&/*#__PURE__*/_jsxs(Box,{sx:{mt:2,bgcolor:'warning.lighter',p:2,borderRadius:1},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",color:\"warning.dark\",children:\"Possible Issues\"}),/*#__PURE__*/_jsx(List,{dense:true,disablePadding:true,children:testResult.details.possibleIssues.map((issue,index)=>/*#__PURE__*/_jsxs(ListItem,{disableGutters:true,children:[/*#__PURE__*/_jsx(ListItemIcon,{sx:{minWidth:24},children:/*#__PURE__*/_jsx(WarningIcon,{fontSize:\"small\",color:\"warning\"})}),/*#__PURE__*/_jsx(ListItemText,{primary:issue,primaryTypographyProps:{variant:'body2'}})]},index))})]}),testResult.details&&testResult.details.missingComponents&&/*#__PURE__*/_jsxs(Box,{sx:{mt:2,bgcolor:'error.lighter',p:2,borderRadius:1},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",color:\"error.dark\",children:\"Missing Components\"}),/*#__PURE__*/_jsx(List,{dense:true,disablePadding:true,children:testResult.details.missingComponents.map((component,index)=>/*#__PURE__*/_jsxs(ListItem,{disableGutters:true,children:[/*#__PURE__*/_jsx(ListItemIcon,{sx:{minWidth:24},children:/*#__PURE__*/_jsx(ErrorOutlineIcon,{fontSize:\"small\",color:\"error\"})}),/*#__PURE__*/_jsx(ListItemText,{primary:component,primaryTypographyProps:{variant:'body2'}})]},index))})]}),testResult.details&&testResult.details.issues&&/*#__PURE__*/_jsxs(Box,{sx:{mt:2,bgcolor:'error.lighter',p:2,borderRadius:1},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",color:\"error.dark\",children:\"Validation Issues\"}),/*#__PURE__*/_jsx(List,{dense:true,disablePadding:true,children:testResult.details.issues.map((issue,index)=>/*#__PURE__*/_jsxs(ListItem,{disableGutters:true,children:[/*#__PURE__*/_jsx(ListItemIcon,{sx:{minWidth:24},children:/*#__PURE__*/_jsx(ErrorOutlineIcon,{fontSize:\"small\",color:\"error\"})}),/*#__PURE__*/_jsx(ListItemText,{primary:issue,primaryTypographyProps:{variant:'body2'}})]},index))})]})]})]})]})]})]})]}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:handleCloseBrowser,children:\"Close\"}),activeTab===0&&/*#__PURE__*/_jsx(Button,{onClick:()=>{handleCloseBrowser();},color:\"primary\",variant:\"contained\",children:\"Apply Selection\"})]})]}),/*#__PURE__*/_jsx(Snackbar,{open:testSnackbarOpen,autoHideDuration:6000,onClose:()=>setTestSnackbarOpen(false),anchorOrigin:{vertical:'bottom',horizontal:'right'},children:/*#__PURE__*/_jsxs(Alert,{onClose:()=>setTestSnackbarOpen(false),severity:testResult!==null&&testResult!==void 0&&testResult.success?'success':'error',sx:{width:'100%'},action:/*#__PURE__*/_jsx(Button,{color:\"inherit\",size:\"small\",onClick:()=>{setTestSnackbarOpen(false);setActiveTab(1);// Switch to the Connection Settings tab\n},children:\"See Details\"}),children:[/*#__PURE__*/_jsx(AlertTitle,{children:testResult!==null&&testResult!==void 0&&testResult.success?'Connection Successful':'Connection Failed'}),testResult===null||testResult===void 0?void 0:testResult.message,(testResult===null||testResult===void 0?void 0:testResult.diagnosticSteps)&&/*#__PURE__*/_jsxs(Typography,{variant:\"caption\",display:\"block\",sx:{mt:1},children:[testResult.diagnosticSteps.filter(step=>step.success).length,\" of \",testResult.diagnosticSteps.length,\" diagnostic checks passed\"]})]})})]});};// Helper functions for formatted display\nconst formatFileSize=bytes=>{if(bytes===0)return'0 Bytes';const k=1024;const sizes=['Bytes','KB','MB','GB','TB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];};const formatDate=dateString=>{if(!dateString)return'Unknown';const date=new Date(dateString);return date.toLocaleString();};// Additional imports\nimport Checkbox from'@mui/material/Checkbox';import ListItem from'@mui/material/ListItem';import ListItemIcon from'@mui/material/ListItemIcon';import ListItemText from'@mui/material/ListItemText';import List from'@mui/material/List';import FileIcon from'@mui/icons-material/InsertDriveFile';// CloseIcon already imported on line 49\nimport WarningIcon from'@mui/icons-material/Warning';import ErrorOutlineIcon from'@mui/icons-material/ErrorOutline';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";export default AzureBlobConfiguration;","map":{"version":3,"names":["React","useState","useCallback","useEffect","Box","Button","Chip","CircularProgress","Dialog","DialogActions","DialogContent","DialogTitle","Divider","FormControl","FormControlLabel","FormHelperText","Grid","IconButton","InputAdornment","InputLabel","LinearProgress","MenuItem","Paper","Radio","RadioGroup","Select","Snackbar","Tab","Tabs","TextField","Tooltip","Typography","Alert","AlertTitle","InfoIcon","VisibilityIcon","VisibilityOffIcon","StorageIcon","FolderIcon","CheckCircleIcon","ErrorIcon","SearchIcon","CloseIcon","LockIcon","KeyIcon","AzureBlobContainerBrowser","AzureCredentialManager","AzureBlobConfiguration","_ref","_authMethods$find","config","onChange","errors","readOnly","isSuperUser","showSecrets","setShowSecrets","browserOpen","setBrowserOpen","activeTab","setActiveTab","testing","setTesting","testResult","setTestResult","testSnackbarOpen","setTestSnackbarOpen","showPatternPreview","setShowPatternPreview","previewLoading","setPreviewLoading","patternMatches","setPatternMatches","defaultConfig","authMethod","connectionString","accountName","accountKey","sasToken","useManagedIdentity","containerName","filePattern","path","createContainerIfNotExists","hasCredentials","setHasCredentials","showCredentialManager","setShowCredentialManager","blobConfig","handleChange","e","name","value","type","checked","target","newValue","updatedConfig","toggleShowSecrets","toggleCredentialManager","handleCredentialsLoaded","credentials","handleOpenBrowser","handleCloseBrowser","handleTabChange","event","handleSelectContainer","handleSelectBlob","blobInfo","fullPath","blobName","lastSlashIndex","lastIndexOf","directoryPath","substring","fileName","dotIndex","fileExtension","testConnection","canTest","console","log","result","Promise","resolve","runDiagnostics","diagnosticSteps","success","message","details","sleep","hasAccountName","includes","hasAccountKey","hasEndpoint","push","missingComponents","validAccountName","length","validAccountKey","accountNameValid","accountKeyValid","issues","validSasToken","startsWith","sasTokenValid","accountConnected","Math","random","timestamp","Date","toISOString","possibleIssues","containerExists","createIfNotExists","recommendation","hasFilePattern","trim","validPattern","pattern","valid","hasReadPermission","hasWritePermission","permissions","read","write","readPermission","writePermission","setTimeout","diagnosticResult","error","ms","previewPattern","replace","regex","RegExp","sampleFiles","matches","filter","file","test","map","size","floor","lastModified","authMethods","label","showConnectionString","showAccountKey","showSasToken","showManagedIdentity","showAccountName","_jsxs","sx","mt","children","display","justifyContent","alignItems","mb","_jsx","variant","_Fragment","color","onClick","disabled","startIcon","mr","onCredentialsLoaded","onCredentialsSaved","initialVisible","elevation","p","gutterBottom","container","spacing","item","xs","component","row","method","control","fullWidth","helperText","InputProps","endAdornment","position","edge","title","md","bgcolor","Checkbox","maxHeight","overflow","List","dense","idx","ListItem","ListItemIcon","FileIcon","fontSize","ListItemText","primary","secondary","formatFileSize","formatDate","open","onClose","maxWidth","height","dividers","onSelectContainer","onSelectBlob","selectedContainer","selectedPath","find","m","my","severity","action","step","index","divider","py","backgroundColor","findIndex","s","primaryTypographyProps","fontWeight","style","whiteSpace","JSON","stringify","borderRadius","disablePadding","issue","disableGutters","minWidth","WarningIcon","ErrorOutlineIcon","autoHideDuration","anchorOrigin","vertical","horizontal","width","bytes","k","sizes","i","parseFloat","pow","toFixed","dateString","date","toLocaleString","jsx","Fragment","jsxs"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/components/integration/AzureBlobConfiguration.jsx"],"sourcesContent":["/**\n * AzureBlobConfiguration.jsx\n * -----------------------------------------------------------------------------\n * Enhanced configuration component for Azure Blob Storage connections\n * with integrated container browser functionality.\n */\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Chip,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  LinearProgress,\n  MenuItem,\n  Paper,\n  Radio,\n  RadioGroup,\n  Select,\n  Snackbar,\n  Tab,\n  Tabs,\n  TextField,\n  Tooltip,\n  Typography,\n  Alert,\n  AlertTitle\n} from '@mui/material';\nimport InfoIcon from '@mui/icons-material/Info';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\nimport StorageIcon from '@mui/icons-material/Storage';\nimport FolderIcon from '@mui/icons-material/Folder';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport SearchIcon from '@mui/icons-material/Search';\nimport CloseIcon from '@mui/icons-material/Close';\nimport LockIcon from '@mui/icons-material/Lock';\nimport KeyIcon from '@mui/icons-material/Key';\n\n// Import components\nimport AzureBlobContainerBrowser from './azure/AzureBlobContainerBrowser';\nimport AzureCredentialManager from './azure/AzureCredentialManager';\n\n/**\n * Azure Blob Configuration Component with integrated browser functionality\n * \n * @component\n * @param {Object} props - Component props\n * @param {Object} props.config - Current configuration values\n * @param {Function} props.onChange - Callback when configuration changes\n * @param {Object} props.errors - Validation errors\n * @param {boolean} props.readOnly - Whether the component is in read-only mode\n * @param {boolean} props.isSuperUser - Whether the user has super user permissions\n */\nconst AzureBlobConfiguration = ({ \n  config, \n  onChange, \n  errors = {}, \n  readOnly = false,\n  isSuperUser = false \n}) => {\n  // State for secrets visibility\n  const [showSecrets, setShowSecrets] = useState(false);\n  \n  // State for container browser dialog\n  const [browserOpen, setBrowserOpen] = useState(false);\n  const [activeTab, setActiveTab] = useState(0);\n  \n  // State for connection testing\n  const [testing, setTesting] = useState(false);\n  const [testResult, setTestResult] = useState(null);\n  const [testSnackbarOpen, setTestSnackbarOpen] = useState(false);\n  \n  // State for pattern preview\n  const [showPatternPreview, setShowPatternPreview] = useState(false);\n  const [previewLoading, setPreviewLoading] = useState(false);\n  const [patternMatches, setPatternMatches] = useState([]);\n  \n  // Default configuration structure\n  const defaultConfig = {\n    authMethod: 'connectionString',\n    connectionString: '',\n    accountName: '',\n    accountKey: '',\n    sasToken: '',\n    useManagedIdentity: false,\n    containerName: '',\n    filePattern: '*.csv',\n    path: '',\n    createContainerIfNotExists: false\n  };\n  \n  // State for stored credentials\n  const [hasCredentials, setHasCredentials] = useState(false);\n  const [showCredentialManager, setShowCredentialManager] = useState(false);\n  \n  // Merge provided config with defaults\n  const blobConfig = { ...defaultConfig, ...config };\n  \n  /**\n   * Handle change in form fields\n   */\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const newValue = type === 'checkbox' ? checked : value;\n    \n    // If auth method changes, reset related fields\n    let updatedConfig = { ...blobConfig, [name]: newValue };\n    \n    if (name === 'authMethod') {\n      updatedConfig = {\n        ...updatedConfig,\n        connectionString: '',\n        accountName: '',\n        accountKey: '',\n        sasToken: ''\n      };\n    }\n    \n    // Clear any existing test result when configuration changes\n    setTestResult(null);\n    \n    onChange(updatedConfig);\n  };\n  \n  /**\n   * Toggle visibility of secret fields\n   */\n  const toggleShowSecrets = () => {\n    setShowSecrets(!showSecrets);\n  };\n  \n  /**\n   * Toggle visibility of credential manager\n   */\n  const toggleCredentialManager = () => {\n    setShowCredentialManager(!showCredentialManager);\n  };\n  \n  /**\n   * Handle credentials loaded from credential manager\n   */\n  const handleCredentialsLoaded = (credentials) => {\n    if (!credentials) return;\n    \n    // Update configuration from loaded credentials\n    const updatedConfig = { ...blobConfig };\n    \n    // Set authentication method\n    if (credentials.connectionString) {\n      updatedConfig.authMethod = 'connectionString';\n      updatedConfig.connectionString = credentials.connectionString;\n    } else if (credentials.sasToken) {\n      updatedConfig.authMethod = 'sasToken';\n      updatedConfig.accountName = credentials.accountName;\n      updatedConfig.sasToken = credentials.sasToken;\n    } else if (credentials.accountKey) {\n      updatedConfig.authMethod = 'accountKey';\n      updatedConfig.accountName = credentials.accountName;\n      updatedConfig.accountKey = credentials.accountKey;\n    } else if (credentials.useManagedIdentity) {\n      updatedConfig.authMethod = 'managedIdentity';\n      updatedConfig.accountName = credentials.accountName;\n      updatedConfig.useManagedIdentity = true;\n    }\n    \n    // Update configuration\n    onChange(updatedConfig);\n    \n    // Update UI state\n    setHasCredentials(true);\n  };\n  \n  /**\n   * Handle opening of container browser\n   */\n  const handleOpenBrowser = () => {\n    setBrowserOpen(true);\n  };\n  \n  /**\n   * Handle closing of container browser\n   */\n  const handleCloseBrowser = () => {\n    setBrowserOpen(false);\n  };\n  \n  /**\n   * Handle tab change in browser dialog\n   */\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n  \n  /**\n   * Handle container selection from browser\n   */\n  const handleSelectContainer = useCallback((containerName) => {\n    if (containerName) {\n      onChange({\n        ...blobConfig,\n        containerName\n      });\n    }\n  }, [blobConfig, onChange]);\n  \n  /**\n   * Handle blob selection from browser\n   */\n  const handleSelectBlob = useCallback((blobInfo) => {\n    if (blobInfo) {\n      // Extract the path from the blob name\n      const fullPath = blobInfo.blobName;\n      const containerName = blobInfo.containerName;\n      \n      // Get the directory path by removing the filename\n      const lastSlashIndex = fullPath.lastIndexOf('/');\n      const directoryPath = lastSlashIndex > 0 ? fullPath.substring(0, lastSlashIndex + 1) : '';\n      \n      // Extract a pattern based on the file name\n      const fileName = lastSlashIndex > 0 ? fullPath.substring(lastSlashIndex + 1) : fullPath;\n      \n      // Determine a reasonable pattern based on file extension\n      const dotIndex = fileName.lastIndexOf('.');\n      const fileExtension = dotIndex > 0 ? fileName.substring(dotIndex) : '';\n      const filePattern = fileExtension ? `*${fileExtension}` : fileName;\n      \n      onChange({\n        ...blobConfig,\n        containerName,\n        path: directoryPath,\n        filePattern\n      });\n    }\n  }, [blobConfig, onChange]);\n  \n  /**\n   * Test the Azure connection with comprehensive diagnostics\n   */\n  const testConnection = useCallback(async () => {\n    // Don't test if required fields are missing\n    if (!canTest()) return;\n    \n    setTesting(true);\n    setTestResult(null);\n    \n    try {\n      // Simulate API call to test connection\n      console.log('Testing connection with config:', blobConfig);\n      \n      // In a production environment, this would call a real API endpoint\n      // For our development environment, we'll simulate detailed test steps\n      const result = await new Promise((resolve) => {\n        // Create a function to simulate step-by-step testing\n        const runDiagnostics = async () => {\n          const diagnosticSteps = [];\n          let success = false;\n          let message = '';\n          let details = {};\n          \n          // Step 1: Validate configuration format\n          await sleep(400); // Simulate network delay\n          if (blobConfig.authMethod === 'connectionString') {\n            const hasAccountName = blobConfig.connectionString.includes('AccountName=');\n            const hasAccountKey = blobConfig.connectionString.includes('AccountKey=');\n            const hasEndpoint = blobConfig.connectionString.includes('EndpointSuffix=') || \n                               blobConfig.connectionString.includes('BlobEndpoint=');\n            \n            diagnosticSteps.push({\n              name: 'Validate connection string format',\n              success: hasAccountName && hasAccountKey && hasEndpoint,\n              message: hasAccountName && hasAccountKey && hasEndpoint \n                ? 'Connection string format is valid'\n                : 'Connection string is missing required components',\n              details: {\n                hasAccountName,\n                hasAccountKey,\n                hasEndpoint\n              }\n            });\n            \n            if (!hasAccountName || !hasAccountKey || !hasEndpoint) {\n              return {\n                success: false,\n                message: 'Invalid connection string format',\n                diagnosticSteps,\n                details: {\n                  missingComponents: [\n                    ...(!hasAccountName ? ['AccountName'] : []),\n                    ...(!hasAccountKey ? ['AccountKey'] : []),\n                    ...(!hasEndpoint ? ['EndpointSuffix or BlobEndpoint'] : [])\n                  ]\n                }\n              };\n            }\n          } else if (blobConfig.authMethod === 'accountKey') {\n            const validAccountName = blobConfig.accountName.length > 3;\n            const validAccountKey = blobConfig.accountKey.length > 10;\n            \n            diagnosticSteps.push({\n              name: 'Validate account credentials',\n              success: validAccountName && validAccountKey,\n              message: validAccountName && validAccountKey\n                ? 'Account name and key format validated'\n                : 'Invalid account name or key format',\n              details: {\n                accountNameValid: validAccountName,\n                accountKeyValid: validAccountKey\n              }\n            });\n            \n            if (!validAccountName || !validAccountKey) {\n              return {\n                success: false,\n                message: 'Invalid account credentials',\n                diagnosticSteps,\n                details: {\n                  issues: [\n                    ...(!validAccountName ? ['Account name is too short or invalid'] : []),\n                    ...(!validAccountKey ? ['Account key is too short or invalid'] : [])\n                  ]\n                }\n              };\n            }\n          } else if (blobConfig.authMethod === 'sasToken') {\n            const validAccountName = blobConfig.accountName.length > 3;\n            const validSasToken = blobConfig.sasToken.startsWith('?') && \n                                 blobConfig.sasToken.includes('sig=');\n            \n            diagnosticSteps.push({\n              name: 'Validate SAS token credentials',\n              success: validAccountName && validSasToken,\n              message: validAccountName && validSasToken\n                ? 'Account name and SAS token format validated'\n                : 'Invalid SAS token configuration',\n              details: {\n                accountNameValid: validAccountName,\n                sasTokenValid: validSasToken\n              }\n            });\n            \n            if (!validAccountName || !validSasToken) {\n              return {\n                success: false,\n                message: 'Invalid SAS token configuration',\n                diagnosticSteps,\n                details: {\n                  issues: [\n                    ...(!validAccountName ? ['Account name is too short or invalid'] : []),\n                    ...(!validSasToken ? ['SAS token must start with ? and include a signature (sig=)'] : [])\n                  ]\n                }\n              };\n            }\n          } else if (blobConfig.authMethod === 'managedIdentity') {\n            const validAccountName = blobConfig.accountName.length > 3;\n            \n            diagnosticSteps.push({\n              name: 'Validate managed identity configuration',\n              success: validAccountName,\n              message: validAccountName\n                ? 'Account name format validated'\n                : 'Invalid account name for managed identity',\n              details: {\n                accountNameValid: validAccountName\n              }\n            });\n            \n            if (!validAccountName) {\n              return {\n                success: false,\n                message: 'Invalid managed identity configuration',\n                diagnosticSteps,\n                details: {\n                  issues: ['Account name is required even when using managed identity']\n                }\n              };\n            }\n          }\n          \n          // Step 2: Test connection to account\n          await sleep(600);\n          const accountConnected = Math.random() > 0.1; // 90% success rate for demo\n          \n          diagnosticSteps.push({\n            name: 'Connect to storage account',\n            success: accountConnected,\n            message: accountConnected \n              ? 'Successfully connected to storage account'\n              : 'Failed to connect to storage account',\n            details: {\n              timestamp: new Date().toISOString(),\n              authMethod: blobConfig.authMethod\n            }\n          });\n          \n          if (!accountConnected) {\n            return {\n              success: false,\n              message: 'Could not connect to storage account',\n              diagnosticSteps,\n              details: {\n                possibleIssues: [\n                  'Network connectivity problem',\n                  'Invalid credentials',\n                  'Account firewall restrictions',\n                  'Account may not exist'\n                ]\n              }\n            };\n          }\n          \n          // Step 3: Test container access\n          await sleep(500);\n          const containerExists = blobConfig.containerName !== '' && Math.random() > 0.1; // 90% success if container specified\n          \n          diagnosticSteps.push({\n            name: 'Verify container access',\n            success: containerExists,\n            message: blobConfig.containerName \n              ? (containerExists \n                  ? `Container '${blobConfig.containerName}' exists and is accessible`\n                  : `Container '${blobConfig.containerName}' does not exist or is not accessible`)\n              : 'No container specified, skipping container verification',\n            details: {\n              containerName: blobConfig.containerName || 'Not specified',\n              createIfNotExists: blobConfig.createContainerIfNotExists\n            }\n          });\n          \n          if (blobConfig.containerName && !containerExists && !blobConfig.createContainerIfNotExists) {\n            return {\n              success: false,\n              message: `Container '${blobConfig.containerName}' does not exist or is not accessible`,\n              diagnosticSteps,\n              details: {\n                recommendation: 'Enable \"Create container if it doesn\\'t exist\" option or choose an existing container'\n              }\n            };\n          }\n          \n          // Step 4: Test file pattern matching\n          await sleep(400);\n          const hasFilePattern = blobConfig.filePattern && blobConfig.filePattern.trim() !== '';\n          const validPattern = hasFilePattern && !blobConfig.filePattern.includes('\\\\');\n          \n          diagnosticSteps.push({\n            name: 'Validate file pattern',\n            success: !hasFilePattern || validPattern,\n            message: !hasFilePattern \n              ? 'No file pattern specified, will match all files'\n              : (validPattern \n                  ? `File pattern '${blobConfig.filePattern}' is valid`\n                  : `File pattern '${blobConfig.filePattern}' contains invalid characters`),\n            details: {\n              pattern: blobConfig.filePattern || 'Not specified',\n              valid: !hasFilePattern || validPattern\n            }\n          });\n          \n          // Step 5: Perform permissions check\n          await sleep(600);\n          const hasReadPermission = true; // In real implementation, check actual permissions\n          const hasWritePermission = blobConfig.authMethod !== 'sasToken' || \n                                   (blobConfig.sasToken.includes('sp=') && \n                                    blobConfig.sasToken.includes('w'));\n          \n          diagnosticSteps.push({\n            name: 'Verify storage permissions',\n            success: hasReadPermission,\n            message: hasReadPermission \n              ? (hasWritePermission \n                  ? 'Account has read and write permissions'\n                  : 'Account has read permissions only')\n              : 'Account lacks required read permissions',\n            details: {\n              permissions: {\n                read: hasReadPermission,\n                write: hasWritePermission\n              }\n            }\n          });\n          \n          if (!hasReadPermission) {\n            return {\n              success: false,\n              message: 'Account lacks required read permissions',\n              diagnosticSteps,\n              details: {\n                recommendation: 'Ensure the credentials have at least read access to the storage account'\n              }\n            };\n          }\n          \n          // All tests passed\n          return {\n            success: true,\n            message: 'Connection successful! All diagnostics passed.',\n            diagnosticSteps,\n            details: {\n              timestamp: new Date().toISOString(),\n              readPermission: hasReadPermission,\n              writePermission: hasWritePermission,\n              containerExists: containerExists || !blobConfig.containerName\n            }\n          };\n        };\n        \n        // Execute the diagnostics\n        setTimeout(async () => {\n          const diagnosticResult = await runDiagnostics();\n          resolve(diagnosticResult);\n        }, 500);\n      });\n      \n      setTestResult(result);\n      setTestSnackbarOpen(true);\n    } catch (error) {\n      console.error('Error testing connection:', error);\n      setTestResult({\n        success: false,\n        message: error.message || 'An unexpected error occurred',\n        diagnosticSteps: [{\n          name: 'Initialize connection test',\n          success: false,\n          message: 'Error occurred during test initialization',\n          details: {\n            error: error.message || 'Unknown error'\n          }\n        }]\n      });\n      setTestSnackbarOpen(true);\n    } finally {\n      setTesting(false);\n    }\n  }, [blobConfig]);\n  \n  // Helper function to simulate async operations\n  const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n  \n  /**\n   * Preview files matching the pattern\n   */\n  const previewPattern = useCallback(async () => {\n    if (!blobConfig.containerName || !blobConfig.filePattern) return;\n    \n    setPreviewLoading(true);\n    setPatternMatches([]);\n    \n    try {\n      // Simulate API call to get matching files\n      console.log(`Previewing pattern: ${blobConfig.filePattern} in container: ${blobConfig.containerName} with path: ${blobConfig.path}`);\n      \n      // Simulation delay\n      const result = await new Promise((resolve) => {\n        setTimeout(() => {\n          // Convert glob pattern to regex for simple simulation\n          const pattern = blobConfig.filePattern\n            .replace(/\\./g, '\\\\.')\n            .replace(/\\*/g, '.*');\n          const regex = new RegExp(`^${pattern}$`);\n          \n          // Sample files that might be in the container\n          const sampleFiles = [\n            'data.csv',\n            'sample.csv',\n            'employees.csv',\n            'data.json',\n            'employees.json',\n            'report.pdf',\n            'summary.xlsx',\n            'log.txt'\n          ];\n          \n          // Filter files by pattern\n          const matches = sampleFiles\n            .filter(file => regex.test(file))\n            .map(file => ({\n              name: blobConfig.path ? `${blobConfig.path}${file}` : file,\n              size: Math.floor(Math.random() * 1024 * 1024), // Random size up to 1MB\n              lastModified: new Date().toISOString()\n            }));\n          \n          resolve(matches);\n        }, 1000);\n      });\n      \n      setPatternMatches(result);\n      setShowPatternPreview(true);\n    } catch (error) {\n      console.error('Error previewing pattern:', error);\n    } finally {\n      setPreviewLoading(false);\n    }\n  }, [blobConfig.containerName, blobConfig.filePattern, blobConfig.path]);\n  \n  /**\n   * Check if connection can be tested\n   */\n  const canTest = useCallback(() => {\n    if (blobConfig.authMethod === 'connectionString') {\n      return blobConfig.connectionString.length > 0;\n    } else if (blobConfig.authMethod === 'accountKey') {\n      return blobConfig.accountName.length > 0 && blobConfig.accountKey.length > 0;\n    } else if (blobConfig.authMethod === 'sasToken') {\n      return blobConfig.accountName.length > 0 && blobConfig.sasToken.length > 0;\n    } else if (blobConfig.authMethod === 'managedIdentity') {\n      return blobConfig.accountName.length > 0;\n    }\n    return false;\n  }, [blobConfig]);\n  \n  // Authentication method options\n  const authMethods = [\n    { value: 'connectionString', label: 'Connection String' },\n    { value: 'accountKey', label: 'Account Name & Key' },\n    { value: 'sasToken', label: 'SAS Token' },\n    { value: 'managedIdentity', label: 'Managed Identity' }\n  ];\n  \n  // Field visibility based on selected auth method\n  const showConnectionString = blobConfig.authMethod === 'connectionString';\n  const showAccountKey = blobConfig.authMethod === 'accountKey';\n  const showSasToken = blobConfig.authMethod === 'sasToken';\n  const showManagedIdentity = blobConfig.authMethod === 'managedIdentity';\n  const showAccountName = blobConfig.authMethod === 'accountKey' || \n                          blobConfig.authMethod === 'sasToken' || \n                          blobConfig.authMethod === 'managedIdentity';\n  \n  return (\n    <Box sx={{ mt: 2 }}>\n      <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n        <Typography variant=\"subtitle1\">\n          Azure Blob Storage Configuration\n        </Typography>\n        \n        <Box>\n          {!readOnly && (\n            <>\n              <Button\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={testConnection}\n                disabled={testing || !canTest()}\n                startIcon={testing ? <CircularProgress size={20} /> : \n                          testResult ? (testResult.success ? <CheckCircleIcon /> : <ErrorIcon />) : null}\n                sx={{ mr: 1 }}\n              >\n                {testing ? 'Testing...' : 'Test Connection'}\n              </Button>\n              \n              <Button\n                variant=\"outlined\"\n                color={hasCredentials ? \"success\" : \"primary\"}\n                onClick={toggleCredentialManager}\n                startIcon={<KeyIcon />}\n                disabled={testing}\n                sx={{ mr: 1 }}\n              >\n                {hasCredentials ? 'Manage Credentials' : 'Set Up Credentials'}\n              </Button>\n            </>\n          )}\n          \n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleOpenBrowser}\n            startIcon={<StorageIcon />}\n            disabled={readOnly || testing}\n          >\n            Browse Storage\n          </Button>\n        </Box>\n      </Box>\n      \n      {/* Credential Manager Section */}\n      {showCredentialManager && (\n        <Box mb={3}>\n          <AzureCredentialManager\n            onCredentialsLoaded={handleCredentialsLoaded}\n            onCredentialsSaved={handleCredentialsLoaded}\n            readOnly={readOnly}\n            initialVisible={true}\n          />\n        </Box>\n      )}\n      \n      {/* Authentication section */}\n      {isSuperUser && (\n        <Paper elevation={0} variant=\"outlined\" sx={{ p: 2, mb: 3 }}>\n          <Typography variant=\"subtitle2\" gutterBottom>\n            Authentication Settings\n          </Typography>\n          \n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <FormControl component=\"fieldset\">\n                <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                  Authentication Method\n                </Typography>\n                <RadioGroup\n                  name=\"authMethod\"\n                  value={blobConfig.authMethod}\n                  onChange={handleChange}\n                  row\n                  disabled={readOnly}\n                >\n                  {authMethods.map(method => (\n                    <FormControlLabel\n                      key={method.value}\n                      value={method.value}\n                      control={<Radio />}\n                      label={method.label}\n                      disabled={readOnly}\n                    />\n                  ))}\n                </RadioGroup>\n              </FormControl>\n            </Grid>\n            \n            {/* Connection String */}\n            {showConnectionString && (\n              <Grid item xs={12}>\n                <FormControl fullWidth error={!!errors.connectionString}>\n                  <TextField\n                    name=\"connectionString\"\n                    label=\"Connection String\"\n                    value={blobConfig.connectionString}\n                    onChange={handleChange}\n                    type={showSecrets ? 'text' : 'password'}\n                    error={!!errors.connectionString}\n                    helperText={errors.connectionString}\n                    disabled={readOnly}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={toggleShowSecrets}\n                            edge=\"end\"\n                          >\n                            {showSecrets ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                          </IconButton>\n                          <Tooltip title=\"The connection string for your Azure Storage account. Format: DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...;EndpointSuffix=core.windows.net\">\n                            <IconButton edge=\"end\">\n                              <InfoIcon />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* Account Name */}\n            {showAccountName && (\n              <Grid item xs={12} md={showAccountKey ? 6 : 12}>\n                <FormControl fullWidth error={!!errors.accountName}>\n                  <TextField\n                    name=\"accountName\"\n                    label=\"Storage Account Name\"\n                    value={blobConfig.accountName}\n                    onChange={handleChange}\n                    error={!!errors.accountName}\n                    helperText={errors.accountName}\n                    disabled={readOnly}\n                  />\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* Account Key */}\n            {showAccountKey && (\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth error={!!errors.accountKey}>\n                  <TextField\n                    name=\"accountKey\"\n                    label=\"Account Key\"\n                    value={blobConfig.accountKey}\n                    onChange={handleChange}\n                    type={showSecrets ? 'text' : 'password'}\n                    error={!!errors.accountKey}\n                    helperText={errors.accountKey}\n                    disabled={readOnly}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={toggleShowSecrets}\n                            edge=\"end\"\n                          >\n                            {showSecrets ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                          </IconButton>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* SAS Token */}\n            {showSasToken && (\n              <Grid item xs={12}>\n                <FormControl fullWidth error={!!errors.sasToken}>\n                  <TextField\n                    name=\"sasToken\"\n                    label=\"SAS Token\"\n                    value={blobConfig.sasToken}\n                    onChange={handleChange}\n                    type={showSecrets ? 'text' : 'password'}\n                    error={!!errors.sasToken}\n                    helperText={errors.sasToken || \"Include the leading '?' character\"}\n                    disabled={readOnly}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={toggleShowSecrets}\n                            edge=\"end\"\n                          >\n                            {showSecrets ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                          </IconButton>\n                          <Tooltip title=\"A Shared Access Signature (SAS) token providing permissions to the storage account or container\">\n                            <IconButton edge=\"end\">\n                              <InfoIcon />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* Managed Identity (no additional fields needed) */}\n            {showManagedIdentity && (\n              <Grid item xs={12}>\n                <Paper variant=\"outlined\" sx={{ p: 2, bgcolor: 'background.default' }}>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Using Azure Managed Identity for authentication. No additional credentials required.\n                    The application will use the identity assigned to the deployment environment.\n                  </Typography>\n                </Paper>\n              </Grid>\n            )}\n          </Grid>\n        </Paper>\n      )}\n      \n      {/* Container Configuration - Available to all users */}\n      <Paper elevation={0} variant=\"outlined\" sx={{ p: 2 }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={1}>\n          <Typography variant=\"subtitle2\">\n            Container Settings\n          </Typography>\n          \n          {!readOnly && canTest() && (\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={testConnection}\n              disabled={testing}\n              startIcon={testing ? <CircularProgress size={16} /> : \n                        testResult ? (testResult.success ? <CheckCircleIcon size=\"small\" /> : <ErrorIcon size=\"small\" />) : null}\n            >\n              Test Connection\n            </Button>\n          )}\n        </Box>\n        \n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth error={!!errors.containerName}>\n              <TextField\n                name=\"containerName\"\n                label=\"Container Name\"\n                value={blobConfig.containerName}\n                onChange={handleChange}\n                error={!!errors.containerName}\n                helperText={errors.containerName || \"Name of the Azure Blob container\"}\n                disabled={readOnly}\n                InputProps={{\n                  endAdornment: blobConfig.containerName ? (\n                    <InputAdornment position=\"end\">\n                      <Tooltip title=\"Browse container\">\n                        <IconButton\n                          edge=\"end\"\n                          onClick={handleOpenBrowser}\n                          disabled={readOnly}\n                        >\n                          <StorageIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </InputAdornment>\n                  ) : null\n                }}\n              />\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth error={!!errors.filePattern}>\n              <TextField\n                name=\"filePattern\"\n                label=\"File Pattern\"\n                value={blobConfig.filePattern}\n                onChange={handleChange}\n                error={!!errors.filePattern}\n                helperText={errors.filePattern || \"Example: *.csv, employee-*.json\"}\n                disabled={readOnly}\n                InputProps={{\n                  endAdornment: blobConfig.containerName && blobConfig.filePattern ? (\n                    <InputAdornment position=\"end\">\n                      <Tooltip title=\"Preview matching files\">\n                        <IconButton\n                          edge=\"end\"\n                          onClick={previewPattern}\n                          disabled={readOnly || previewLoading}\n                        >\n                          <SearchIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </InputAdornment>\n                  ) : null\n                }}\n              />\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={12}>\n            <FormControl fullWidth>\n              <TextField\n                name=\"path\"\n                label=\"Path (Optional)\"\n                value={blobConfig.path}\n                onChange={handleChange}\n                helperText=\"Optional folder path inside the container (e.g., 'daily/employees/')\"\n                disabled={readOnly}\n                InputProps={{\n                  endAdornment: blobConfig.path ? (\n                    <InputAdornment position=\"end\">\n                      <Tooltip title=\"Browse this path\">\n                        <IconButton\n                          edge=\"end\"\n                          onClick={handleOpenBrowser}\n                          disabled={readOnly}\n                        >\n                          <FolderIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </InputAdornment>\n                  ) : null\n                }}\n              />\n            </FormControl>\n          </Grid>\n          \n          {!readOnly && (\n            <Grid item xs={12}>\n              <FormControl fullWidth>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"createContainerIfNotExists\"\n                      checked={blobConfig.createContainerIfNotExists}\n                      onChange={handleChange}\n                      disabled={readOnly}\n                    />\n                  }\n                  label=\"Create container if it doesn't exist\"\n                />\n                <FormHelperText>\n                  If enabled, the system will attempt to create the container when the integration runs\n                </FormHelperText>\n              </FormControl>\n            </Grid>\n          )}\n        </Grid>\n        \n        {/* Pattern Preview Section */}\n        {patternMatches.length > 0 && (\n          <Box mt={2}>\n            <Divider sx={{ mb: 2 }} />\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Preview of Files Matching Pattern\n            </Typography>\n            \n            <Box sx={{ maxHeight: '200px', overflow: 'auto', mb: 1 }}>\n              <List dense>\n                {patternMatches.map((file, idx) => (\n                  <ListItem key={idx}>\n                    <ListItemIcon>\n                      <FileIcon color=\"primary\" fontSize=\"small\" />\n                    </ListItemIcon>\n                    <ListItemText \n                      primary={file.name}\n                      secondary={`${formatFileSize(file.size)} • ${formatDate(file.lastModified)}`}\n                    />\n                  </ListItem>\n                ))}\n              </List>\n            </Box>\n            \n            <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                {patternMatches.length} file(s) match your pattern\n              </Typography>\n              <Button \n                size=\"small\" \n                onClick={() => setPatternMatches([])}\n                startIcon={<CloseIcon />}\n              >\n                Close Preview\n              </Button>\n            </Box>\n          </Box>\n        )}\n      </Paper>\n      \n      {/* Container Browser Dialog */}\n      <Dialog\n        open={browserOpen}\n        onClose={handleCloseBrowser}\n        fullWidth\n        maxWidth=\"lg\"\n        sx={{ '& .MuiDialog-paper': { height: '80vh' } }}\n      >\n        <DialogTitle>\n          <Tabs value={activeTab} onChange={handleTabChange}>\n            <Tab label=\"Browse Containers\" />\n            <Tab label=\"Connection Settings\" disabled={!canTest()} />\n          </Tabs>\n        </DialogTitle>\n        \n        <DialogContent dividers sx={{ height: '100%', p: 0 }}>\n          {activeTab === 0 && (\n            <Box sx={{ height: '100%' }}>\n              <AzureBlobContainerBrowser\n                config={blobConfig}\n                onSelectContainer={handleSelectContainer}\n                onSelectBlob={handleSelectBlob}\n                readOnly={readOnly}\n                selectedContainer={blobConfig.containerName}\n                selectedPath={blobConfig.path}\n              />\n            </Box>\n          )}\n          \n          {activeTab === 1 && (\n            <Box sx={{ p: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Connection Diagnostics\n              </Typography>\n              \n              {/* Show connection settings summary */}\n              <Grid container spacing={2}>\n                <Grid item xs={12}>\n                  <Paper variant=\"outlined\" sx={{ p: 2 }}>\n                    <Typography variant=\"subtitle2\" gutterBottom>\n                      Authentication Method\n                    </Typography>\n                    <Chip \n                      label={authMethods.find(m => m.value === blobConfig.authMethod)?.label}\n                      color=\"primary\"\n                      variant=\"outlined\"\n                    />\n                    \n                    <Divider sx={{ my: 2 }} />\n                    \n                    {/* Show relevant connection settings based on auth method */}\n                    {showConnectionString && (\n                      <Box>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                          Connection String\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          {showSecrets ? blobConfig.connectionString : '•••••••••••••••••••••••••••••'}\n                        </Typography>\n                      </Box>\n                    )}\n                    \n                    {showAccountName && (\n                      <Box mt={2}>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                          Storage Account Name\n                        </Typography>\n                        <Typography variant=\"body2\">\n                          {blobConfig.accountName}\n                        </Typography>\n                      </Box>\n                    )}\n                    \n                    {showAccountKey && (\n                      <Box mt={2}>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                          Account Key\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          {showSecrets ? blobConfig.accountKey : '•••••••••••••••••••••••••••••'}\n                        </Typography>\n                      </Box>\n                    )}\n                    \n                    {showSasToken && (\n                      <Box mt={2}>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                          SAS Token\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          {showSecrets ? blobConfig.sasToken : '•••••••••••••••••••••••••••••'}\n                        </Typography>\n                      </Box>\n                    )}\n                    \n                    {showManagedIdentity && (\n                      <Box mt={2}>\n                        <Typography variant=\"subtitle2\" gutterBottom>\n                          Managed Identity\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"textSecondary\">\n                          Using the system-assigned managed identity\n                        </Typography>\n                      </Box>\n                    )}\n                  </Paper>\n                </Grid>\n                \n                <Grid item xs={12}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={testConnection}\n                    disabled={testing || !canTest()}\n                    startIcon={testing ? <CircularProgress size={20} /> : null}\n                    fullWidth\n                  >\n                    {testing ? 'Testing Connection...' : 'Test Connection'}\n                  </Button>\n                  \n                  {testResult && (\n                    <Box sx={{ mt: 2 }}>\n                      <Alert \n                        severity={testResult.success ? 'success' : 'error'}\n                        sx={{ mb: 2 }}\n                        action={\n                          <IconButton\n                            aria-label=\"close\"\n                            color=\"inherit\"\n                            size=\"small\"\n                            onClick={() => setTestResult(null)}\n                          >\n                            <CloseIcon fontSize=\"inherit\" />\n                          </IconButton>\n                        }\n                      >\n                        {testResult.message}\n                      </Alert>\n                      \n                      {/* Detailed diagnostic results */}\n                      {testResult.diagnosticSteps && (\n                        <Paper variant=\"outlined\" sx={{ p: 2 }}>\n                          <Typography variant=\"h6\" gutterBottom>\n                            Diagnostic Results\n                          </Typography>\n                          <List dense>\n                            {testResult.diagnosticSteps.map((step, index) => (\n                              <ListItem \n                                key={index} \n                                divider={index < testResult.diagnosticSteps.length - 1}\n                                sx={{\n                                  py: 1.5,\n                                  backgroundColor: step.success ? 'success.lighter' : (index === testResult.diagnosticSteps.findIndex(s => !s.success) ? 'error.lighter' : 'inherit')\n                                }}\n                              >\n                                <ListItemIcon>\n                                  {step.success ? (\n                                    <CheckCircleIcon color=\"success\" />\n                                  ) : (\n                                    <ErrorIcon color=\"error\" />\n                                  )}\n                                </ListItemIcon>\n                                <ListItemText \n                                  primary={step.name}\n                                  secondary={step.message}\n                                  primaryTypographyProps={{\n                                    fontWeight: 'medium'\n                                  }}\n                                />\n                                <Tooltip \n                                  title={\n                                    <Box>\n                                      <Typography variant=\"subtitle2\">Details</Typography>\n                                      <pre style={{ whiteSpace: 'pre-wrap', fontSize: '0.8rem' }}>\n                                        {JSON.stringify(step.details, null, 2)}\n                                      </pre>\n                                    </Box>\n                                  }\n                                >\n                                  <IconButton size=\"small\">\n                                    <InfoIcon fontSize=\"small\" />\n                                  </IconButton>\n                                </Tooltip>\n                              </ListItem>\n                            ))}\n                          </List>\n                          \n                          {/* Recommendations */}\n                          {testResult.details && testResult.details.recommendation && (\n                            <Box sx={{ mt: 2, bgcolor: 'info.lighter', p: 2, borderRadius: 1 }}>\n                              <Typography variant=\"subtitle2\" color=\"info.dark\">\n                                Recommendation\n                              </Typography>\n                              <Typography variant=\"body2\">\n                                {testResult.details.recommendation}\n                              </Typography>\n                            </Box>\n                          )}\n                          \n                          {/* Possible Issues */}\n                          {testResult.details && testResult.details.possibleIssues && (\n                            <Box sx={{ mt: 2, bgcolor: 'warning.lighter', p: 2, borderRadius: 1 }}>\n                              <Typography variant=\"subtitle2\" color=\"warning.dark\">\n                                Possible Issues\n                              </Typography>\n                              <List dense disablePadding>\n                                {testResult.details.possibleIssues.map((issue, index) => (\n                                  <ListItem key={index} disableGutters>\n                                    <ListItemIcon sx={{ minWidth: 24 }}>\n                                      <WarningIcon fontSize=\"small\" color=\"warning\" />\n                                    </ListItemIcon>\n                                    <ListItemText \n                                      primary={issue}\n                                      primaryTypographyProps={{ variant: 'body2' }}\n                                    />\n                                  </ListItem>\n                                ))}\n                              </List>\n                            </Box>\n                          )}\n                          \n                          {/* Missing Components */}\n                          {testResult.details && testResult.details.missingComponents && (\n                            <Box sx={{ mt: 2, bgcolor: 'error.lighter', p: 2, borderRadius: 1 }}>\n                              <Typography variant=\"subtitle2\" color=\"error.dark\">\n                                Missing Components\n                              </Typography>\n                              <List dense disablePadding>\n                                {testResult.details.missingComponents.map((component, index) => (\n                                  <ListItem key={index} disableGutters>\n                                    <ListItemIcon sx={{ minWidth: 24 }}>\n                                      <ErrorOutlineIcon fontSize=\"small\" color=\"error\" />\n                                    </ListItemIcon>\n                                    <ListItemText \n                                      primary={component}\n                                      primaryTypographyProps={{ variant: 'body2' }}\n                                    />\n                                  </ListItem>\n                                ))}\n                              </List>\n                            </Box>\n                          )}\n                          \n                          {/* Issues */}\n                          {testResult.details && testResult.details.issues && (\n                            <Box sx={{ mt: 2, bgcolor: 'error.lighter', p: 2, borderRadius: 1 }}>\n                              <Typography variant=\"subtitle2\" color=\"error.dark\">\n                                Validation Issues\n                              </Typography>\n                              <List dense disablePadding>\n                                {testResult.details.issues.map((issue, index) => (\n                                  <ListItem key={index} disableGutters>\n                                    <ListItemIcon sx={{ minWidth: 24 }}>\n                                      <ErrorOutlineIcon fontSize=\"small\" color=\"error\" />\n                                    </ListItemIcon>\n                                    <ListItemText \n                                      primary={issue}\n                                      primaryTypographyProps={{ variant: 'body2' }}\n                                    />\n                                  </ListItem>\n                                ))}\n                              </List>\n                            </Box>\n                          )}\n                        </Paper>\n                      )}\n                    </Box>\n                  )}\n                </Grid>\n              </Grid>\n            </Box>\n          )}\n        </DialogContent>\n        \n        <DialogActions>\n          <Button onClick={handleCloseBrowser}>Close</Button>\n          \n          {activeTab === 0 && (\n            <Button \n              onClick={() => {\n                handleCloseBrowser();\n              }}\n              color=\"primary\"\n              variant=\"contained\"\n            >\n              Apply Selection\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n      \n      {/* Test Connection Result Snackbar */}\n      <Snackbar\n        open={testSnackbarOpen}\n        autoHideDuration={6000}\n        onClose={() => setTestSnackbarOpen(false)}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n      >\n        <Alert \n          onClose={() => setTestSnackbarOpen(false)} \n          severity={testResult?.success ? 'success' : 'error'}\n          sx={{ width: '100%' }}\n          action={\n            <Button \n              color=\"inherit\" \n              size=\"small\" \n              onClick={() => {\n                setTestSnackbarOpen(false);\n                setActiveTab(1); // Switch to the Connection Settings tab\n              }}\n            >\n              See Details\n            </Button>\n          }\n        >\n          <AlertTitle>\n            {testResult?.success ? 'Connection Successful' : 'Connection Failed'}\n          </AlertTitle>\n          {testResult?.message}\n          {testResult?.diagnosticSteps && (\n            <Typography variant=\"caption\" display=\"block\" sx={{ mt: 1 }}>\n              {testResult.diagnosticSteps.filter(step => step.success).length} of {testResult.diagnosticSteps.length} diagnostic checks passed\n            </Typography>\n          )}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\n// Helper functions for formatted display\nconst formatFileSize = (bytes) => {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nconst formatDate = (dateString) => {\n  if (!dateString) return 'Unknown';\n  \n  const date = new Date(dateString);\n  return date.toLocaleString();\n};\n\n// Additional imports\nimport Checkbox from '@mui/material/Checkbox';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport List from '@mui/material/List';\nimport FileIcon from '@mui/icons-material/InsertDriveFile';\n// CloseIcon already imported on line 49\nimport WarningIcon from '@mui/icons-material/Warning';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\nexport default AzureBlobConfiguration;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}