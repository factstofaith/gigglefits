{"ast":null,"code":"/**\n * Flow Edge\n *\n * A custom edge component for the integration flow canvas.\n * This component visualizes the connection between nodes with validation indicators\n * and interactive controls for edge management.\n *\n * @component\n */\n\nimport React, { memo, useState, useCallback, useEffect } from 'react';\nimport { getBezierPath, getMarkerEnd } from 'reactflow';\nimport { Typography, Tooltip, Box, Popover, IconButton, Chip, Menu, MenuItem, ListItemIcon, ListItemText, Fade } from '@mui/material';\nimport { Check as CheckIcon, Error as ErrorIcon, Info as InfoIcon, Delete as DeleteIcon, Label as LabelIcon, Settings as SettingsIcon, BugReport as BugReportIcon, PlayArrow as TestIcon, ExpandMore as ExpandMoreIcon, TrendingFlat as FlowIcon, PriorityHigh as PriorityIcon, Bolt as DataFlowIcon, EventNote as EventIcon, SettingsEthernet as ControlIcon } from '@mui/icons-material';\n\n// Connection type definitions\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nconst CONNECTION_TYPES = {\n  DATA: {\n    label: 'Data',\n    icon: DataFlowIcon,\n    description: 'Transfers data records between nodes',\n    color: '#2196F3'\n  },\n  CONTROL: {\n    label: 'Control',\n    icon: ControlIcon,\n    description: 'Controls execution flow between nodes',\n    color: '#9C27B0'\n  },\n  EVENT: {\n    label: 'Event',\n    icon: EventIcon,\n    description: 'Triggers based on events',\n    color: '#FF9800'\n  }\n};\n\n// Map edge types to colors based on source/target nodes\nconst EDGE_TYPES = {\n  'sourceNode-destinationNode': '#4CAF50',\n  // Green\n  'sourceNode-transformationNode': '#FF9800',\n  // Orange\n  'sourceNode-filterNode': '#9C27B0',\n  // Purple\n  'transformationNode-destinationNode': '#2196F3',\n  // Blue\n  'transformationNode-transformationNode': '#FF9800',\n  // Orange\n  'transformationNode-filterNode': '#9C27B0',\n  // Purple\n  'filterNode-destinationNode': '#2196F3',\n  // Blue\n  'filterNode-transformationNode': '#FF9800',\n  // Orange\n  'filterNode-filterNode': '#9C27B0',\n  // Purple\n  'default': '#666666' // Default gray\n};\n\n// Priority levels for connections\nconst PRIORITY_LEVELS = {\n  HIGH: {\n    label: 'High',\n    color: '#f44336'\n  },\n  MEDIUM: {\n    label: 'Medium',\n    color: '#ff9800'\n  },\n  LOW: {\n    label: 'Low',\n    color: '#4caf50'\n  }\n};\n\n/**\n * Edge context menu for edge actions\n */\nconst EdgeContextMenu = /*#__PURE__*/memo(_ref => {\n  let {\n    anchorEl,\n    open,\n    onClose,\n    onDelete,\n    onLabelEdit,\n    onPriorityChange,\n    onConnectionTypeChange,\n    onTest,\n    onAddBreakpoint,\n    connectionType,\n    priority\n  } = _ref;\n  return /*#__PURE__*/_jsxs(Menu, {\n    anchorEl: anchorEl,\n    open: Boolean(anchorEl),\n    onClose: onClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    },\n    children: [/*#__PURE__*/_jsxs(MenuItem, {\n      onClick: onLabelEdit,\n      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n        children: /*#__PURE__*/_jsx(LabelIcon, {\n          fontSize: \"small\"\n        })\n      }), /*#__PURE__*/_jsx(ListItemText, {\n        children: \"Edit Label\"\n      })]\n    }), /*#__PURE__*/_jsxs(MenuItem, {\n      onClick: e => {\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n        children: /*#__PURE__*/_jsx(FlowIcon, {\n          fontSize: \"small\"\n        })\n      }), /*#__PURE__*/_jsx(ListItemText, {\n        children: \"Connection Type\"\n      }), /*#__PURE__*/_jsx(ExpandMoreIcon, {\n        fontSize: \"small\"\n      }), /*#__PURE__*/_jsx(Menu, {\n        anchorEl: anchorEl,\n        open: Boolean(anchorEl),\n        onClose: e => e.stopPropagation(),\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'left'\n        },\n        children: Object.entries(CONNECTION_TYPES).map(_ref2 => {\n          let [type, config] = _ref2;\n          const TypeIcon = config.icon;\n          return /*#__PURE__*/_jsxs(MenuItem, {\n            onClick: () => onConnectionTypeChange(type),\n            selected: connectionType === type,\n            children: [/*#__PURE__*/_jsx(ListItemIcon, {\n              children: /*#__PURE__*/_jsx(TypeIcon, {\n                fontSize: \"small\",\n                style: {\n                  color: config.color\n                }\n              })\n            }), /*#__PURE__*/_jsx(ListItemText, {\n              children: config.label\n            })]\n          }, type);\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(MenuItem, {\n      onClick: e => {\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n        children: /*#__PURE__*/_jsx(PriorityIcon, {\n          fontSize: \"small\"\n        })\n      }), /*#__PURE__*/_jsx(ListItemText, {\n        children: \"Priority\"\n      }), /*#__PURE__*/_jsx(ExpandMoreIcon, {\n        fontSize: \"small\"\n      }), /*#__PURE__*/_jsx(Menu, {\n        anchorEl: anchorEl,\n        open: Boolean(anchorEl),\n        onClose: e => e.stopPropagation(),\n        anchorOrigin: {\n          vertical: 'top',\n          horizontal: 'right'\n        },\n        transformOrigin: {\n          vertical: 'top',\n          horizontal: 'left'\n        },\n        children: Object.entries(PRIORITY_LEVELS).map(_ref3 => {\n          let [level, config] = _ref3;\n          return /*#__PURE__*/_jsxs(MenuItem, {\n            onClick: () => onPriorityChange(level),\n            selected: priority === level,\n            children: [/*#__PURE__*/_jsx(ListItemIcon, {\n              children: /*#__PURE__*/_jsx(Box, {\n                component: \"span\",\n                sx: {\n                  width: 12,\n                  height: 12,\n                  borderRadius: '50%',\n                  backgroundColor: config.color,\n                  display: 'inline-block'\n                }\n              })\n            }), /*#__PURE__*/_jsx(ListItemText, {\n              children: config.label\n            })]\n          }, level);\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(MenuItem, {\n      onClick: onAddBreakpoint,\n      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n        children: /*#__PURE__*/_jsx(BugReportIcon, {\n          fontSize: \"small\"\n        })\n      }), /*#__PURE__*/_jsx(ListItemText, {\n        children: \"Add Breakpoint\"\n      })]\n    }), /*#__PURE__*/_jsxs(MenuItem, {\n      onClick: onTest,\n      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n        children: /*#__PURE__*/_jsx(TestIcon, {\n          fontSize: \"small\"\n        })\n      }), /*#__PURE__*/_jsx(ListItemText, {\n        children: \"Test Connection\"\n      })]\n    }), /*#__PURE__*/_jsxs(MenuItem, {\n      onClick: onDelete,\n      children: [/*#__PURE__*/_jsx(ListItemIcon, {\n        children: /*#__PURE__*/_jsx(DeleteIcon, {\n          fontSize: \"small\",\n          color: \"error\"\n        })\n      }), /*#__PURE__*/_jsx(ListItemText, {\n        primary: \"Delete\",\n        primaryTypographyProps: {\n          color: 'error'\n        }\n      })]\n    })]\n  });\n});\n\n/**\n * Flow Edge component\n */\nconst FlowEdge = /*#__PURE__*/memo(_ref4 => {\n  var _data$animated;\n  let {\n    id,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    style = {},\n    data = {},\n    arrowHeadType,\n    markerEndId,\n    selected,\n    source,\n    target,\n    sourceHandleId,\n    targetHandleId,\n    onClick,\n    edgeUpdaterRadius\n  } = _ref4;\n  // State for edge interaction\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [isHovered, setIsHovered] = useState(false);\n  const [showControls, setShowControls] = useState(false);\n  const [edgeValidation, setEdgeValidation] = useState(null);\n\n  // Get animated status from data\n  const isAnimated = (_data$animated = data === null || data === void 0 ? void 0 : data.animated) !== null && _data$animated !== void 0 ? _data$animated : false;\n\n  // Determine connection type based on source and target node types\n  const sourceType = (source === null || source === void 0 ? void 0 : source.split('-')[0]) || 'unknown';\n  const targetType = (target === null || target === void 0 ? void 0 : target.split('-')[0]) || 'unknown';\n  const connectionType = `${sourceType}-${targetType}`;\n\n  // Get edge color based on connection type\n  const connectionData = data !== null && data !== void 0 && data.connectionType ? CONNECTION_TYPES[data.connectionType] : null;\n  const edgeColor = (connectionData === null || connectionData === void 0 ? void 0 : connectionData.color) || EDGE_TYPES[connectionType] || EDGE_TYPES.default;\n\n  // Get priority data\n  const priorityData = data !== null && data !== void 0 && data.priority ? PRIORITY_LEVELS[data.priority] : null;\n\n  // Merge custom style with defaults\n  const edgeStyle = {\n    stroke: edgeColor,\n    strokeWidth: selected ? 3 : 2,\n    ...style\n  };\n\n  // Apply dashed style for control and event connections\n  if ((data === null || data === void 0 ? void 0 : data.connectionType) === 'CONTROL' || (data === null || data === void 0 ? void 0 : data.connectionType) === 'EVENT') {\n    edgeStyle.strokeDasharray = '5,5';\n  }\n\n  // Apply animation for animated edges\n  if (isAnimated) {\n    edgeStyle.strokeDasharray = '5,5';\n    edgeStyle.animation = 'flowAnimation 1s linear infinite';\n  }\n\n  // Get path and label position\n  const [edgePath, labelX, labelY] = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition\n  });\n\n  // Get marker end (arrow)\n  const markerEnd = getMarkerEnd(arrowHeadType, markerEndId);\n\n  // Calculate center point for label manually\n  const centerX = (sourceX + targetX) / 2;\n  const centerY = (sourceY + targetY) / 2;\n\n  // Determine if edge has errors based on data.validation or data.error\n  const validationData = (data === null || data === void 0 ? void 0 : data.validation) || {};\n  const hasError = validationData.hasError || (data === null || data === void 0 ? void 0 : data.error);\n  const hasWarning = validationData.hasWarning || (data === null || data === void 0 ? void 0 : data.warning);\n  const isValidated = validationData.isValid || (data === null || data === void 0 ? void 0 : data.validated);\n\n  // Get validation message\n  const validationMessage = validationData.message || (data === null || data === void 0 ? void 0 : data.message) || (hasError ? 'Invalid connection' : hasWarning ? 'Warning' : 'Valid connection');\n\n  // Function to show edge context menu\n  const handleContextMenu = useCallback(event => {\n    event.preventDefault();\n    setAnchorEl(event.currentTarget);\n  }, []);\n\n  // Function to close edge context menu\n  const handleCloseContextMenu = useCallback(() => {\n    setAnchorEl(null);\n  }, []);\n\n  // Function to handle edge deletion\n  const handleDelete = useCallback(() => {\n    if (data !== null && data !== void 0 && data.onDelete) {\n      data.onDelete(id);\n    }\n    handleCloseContextMenu();\n  }, [data, id, handleCloseContextMenu]);\n\n  // Function to handle label editing\n  const handleLabelEdit = useCallback(() => {\n    if (data !== null && data !== void 0 && data.onLabelEdit) {\n      data.onLabelEdit(id);\n    }\n    handleCloseContextMenu();\n  }, [data, id, handleCloseContextMenu]);\n\n  // Function to handle connection type change\n  const handleConnectionTypeChange = useCallback(type => {\n    if (data !== null && data !== void 0 && data.onConnectionTypeChange) {\n      data.onConnectionTypeChange(id, type);\n    }\n    handleCloseContextMenu();\n  }, [data, id, handleCloseContextMenu]);\n\n  // Function to handle priority change\n  const handlePriorityChange = useCallback(priority => {\n    if (data !== null && data !== void 0 && data.onPriorityChange) {\n      data.onPriorityChange(id, priority);\n    }\n    handleCloseContextMenu();\n  }, [data, id, handleCloseContextMenu]);\n\n  // Function to handle connection testing\n  const handleTest = useCallback(() => {\n    if (data !== null && data !== void 0 && data.onTest) {\n      data.onTest(id);\n    }\n    handleCloseContextMenu();\n  }, [data, id, handleCloseContextMenu]);\n\n  // Function to handle breakpoint addition\n  const handleAddBreakpoint = useCallback(() => {\n    if (data !== null && data !== void 0 && data.onAddBreakpoint) {\n      data.onAddBreakpoint(id);\n    }\n    handleCloseContextMenu();\n  }, [data, id, handleCloseContextMenu]);\n\n  // Validate edge on mount and when source/target change\n  useEffect(() => {\n    const validateEdge = async () => {\n      // Skip validation if there's no validation function\n      if (!(data !== null && data !== void 0 && data.onValidate)) return;\n      try {\n        const result = await data.onValidate({\n          source,\n          target,\n          sourceHandleId,\n          targetHandleId,\n          data\n        });\n        setEdgeValidation(result);\n      } catch (error) {\n        console.error('Edge validation error:', error);\n        setEdgeValidation({\n          isValid: false,\n          hasError: true,\n          message: error.message || 'Validation error'\n        });\n      }\n    };\n    validateEdge();\n  }, [source, target, sourceHandleId, targetHandleId, data]);\n\n  // Use both passed validation and calculated validation\n  const finalValidation = edgeValidation || validationData;\n\n  // Determine path styling based on validation, priority and hover state\n  const getPathStyle = () => {\n    let pathStyle = {\n      ...edgeStyle\n    };\n\n    // Apply validation colors if not already set by connection type\n    if (finalValidation !== null && finalValidation !== void 0 && finalValidation.hasError) {\n      pathStyle.stroke = '#f44336'; // Error red\n    } else if (finalValidation !== null && finalValidation !== void 0 && finalValidation.hasWarning) {\n      pathStyle.stroke = '#ff9800'; // Warning orange\n    }\n\n    // Apply priority color if set and no validation errors\n    if (priorityData && !(finalValidation !== null && finalValidation !== void 0 && finalValidation.hasError)) {\n      pathStyle.stroke = priorityData.color;\n    }\n\n    // Highlight on hover or selection\n    if (isHovered || selected) {\n      pathStyle.strokeWidth = 3;\n      pathStyle.filter = 'drop-shadow(0 0 2px rgba(0,0,0,0.3))';\n    }\n    return pathStyle;\n  };\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"path\", {\n      className: \"react-flow__edge-interaction-path\",\n      d: edgePath,\n      strokeWidth: 15,\n      stroke: \"transparent\",\n      fill: \"none\",\n      onClick: onClick,\n      onContextMenu: handleContextMenu,\n      onMouseEnter: () => setIsHovered(true),\n      onMouseLeave: () => setIsHovered(false)\n    }), /*#__PURE__*/_jsx(\"path\", {\n      id: id,\n      style: getPathStyle(),\n      className: \"react-flow__edge-path\",\n      d: edgePath,\n      markerEnd: markerEnd,\n      onContextMenu: handleContextMenu\n    }), isAnimated && /*#__PURE__*/_jsx(\"path\", {\n      className: \"react-flow__edge-path react-flow__edge-animated\",\n      d: edgePath,\n      style: {\n        stroke: edgeColor,\n        strokeWidth: 2,\n        strokeDasharray: '5,5',\n        animation: 'flowAnimation 1s linear infinite'\n      }\n    }), connectionData && /*#__PURE__*/_jsx(\"foreignObject\", {\n      width: 24,\n      height: 24,\n      x: labelX - 24 - 5,\n      y: labelY - 12,\n      requiredExtensions: \"http://www.w3.org/1999/xhtml\",\n      className: \"react-flow__edge-type-indicator\",\n      children: /*#__PURE__*/_jsx(Tooltip, {\n        title: `${connectionData.label} Connection: ${connectionData.description}`,\n        children: /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '100%',\n            height: '100%',\n            borderRadius: '4px',\n            backgroundColor: 'background.paper',\n            border: `1px solid ${connectionData.color}`,\n            boxShadow: 1\n          },\n          children: /*#__PURE__*/_jsx(connectionData.icon, {\n            style: {\n              color: connectionData.color,\n              fontSize: 16\n            }\n          })\n        })\n      })\n    }), ((finalValidation === null || finalValidation === void 0 ? void 0 : finalValidation.hasError) || (finalValidation === null || finalValidation === void 0 ? void 0 : finalValidation.hasWarning) || (finalValidation === null || finalValidation === void 0 ? void 0 : finalValidation.isValid)) && /*#__PURE__*/_jsx(Tooltip, {\n      title: finalValidation.message || validationMessage,\n      children: /*#__PURE__*/_jsx(\"foreignObject\", {\n        width: 20,\n        height: 20,\n        x: centerX - 10,\n        y: centerY - 10,\n        requiredExtensions: \"http://www.w3.org/1999/xhtml\",\n        className: \"react-flow__edge-validation\",\n        children: /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '100%',\n            height: '100%',\n            borderRadius: '50%',\n            backgroundColor: finalValidation.hasError ? '#f44336' : finalValidation.hasWarning ? '#ff9800' : '#4caf50',\n            color: '#fff',\n            boxShadow: 1\n          },\n          children: finalValidation.hasError ? /*#__PURE__*/_jsx(ErrorIcon, {\n            style: {\n              fontSize: 14\n            }\n          }) : finalValidation.hasWarning ? /*#__PURE__*/_jsx(InfoIcon, {\n            style: {\n              fontSize: 14\n            }\n          }) : /*#__PURE__*/_jsx(CheckIcon, {\n            style: {\n              fontSize: 14\n            }\n          })\n        })\n      })\n    }), priorityData && /*#__PURE__*/_jsx(\"foreignObject\", {\n      width: 24,\n      height: 24,\n      x: labelX + 5,\n      y: labelY - 12,\n      requiredExtensions: \"http://www.w3.org/1999/xhtml\",\n      className: \"react-flow__edge-priority\",\n      children: /*#__PURE__*/_jsx(Tooltip, {\n        title: `${priorityData.label} Priority`,\n        children: /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '100%',\n            height: '100%',\n            borderRadius: '4px',\n            backgroundColor: 'background.paper',\n            border: `1px solid ${priorityData.color}`,\n            boxShadow: 1\n          },\n          children: /*#__PURE__*/_jsx(PriorityIcon, {\n            style: {\n              color: priorityData.color,\n              fontSize: 16\n            }\n          })\n        })\n      })\n    }), (data === null || data === void 0 ? void 0 : data.breakpoint) && /*#__PURE__*/_jsx(\"foreignObject\", {\n      width: 20,\n      height: 20,\n      x: (centerX + labelX) / 2 - 10,\n      y: (centerY + labelY) / 2 - 10,\n      requiredExtensions: \"http://www.w3.org/1999/xhtml\",\n      className: \"react-flow__edge-breakpoint\",\n      children: /*#__PURE__*/_jsx(Tooltip, {\n        title: \"Breakpoint\",\n        children: /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '100%',\n            height: '100%',\n            borderRadius: '50%',\n            backgroundColor: '#e91e63',\n            color: '#fff',\n            boxShadow: 1\n          },\n          children: /*#__PURE__*/_jsx(BugReportIcon, {\n            style: {\n              fontSize: 14\n            }\n          })\n        })\n      })\n    }), (data === null || data === void 0 ? void 0 : data.label) && /*#__PURE__*/_jsx(\"foreignObject\", {\n      width: 100,\n      height: 30,\n      x: labelX - 50,\n      y: labelY - 15,\n      requiredExtensions: \"http://www.w3.org/1999/xhtml\",\n      className: \"react-flow__edge-label\",\n      children: /*#__PURE__*/_jsx(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          width: '100%',\n          height: '100%',\n          backgroundColor: 'rgba(255, 255, 255, 0.85)',\n          padding: '2px 4px',\n          borderRadius: 1,\n          border: '1px solid rgba(0, 0, 0, 0.1)',\n          boxShadow: 1,\n          transition: 'all 0.2s',\n          '&:hover': {\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\n            boxShadow: 2\n          }\n        },\n        onClick: e => {\n          e.stopPropagation();\n          if (data !== null && data !== void 0 && data.onLabelEdit) {\n            data.onLabelEdit(id);\n          }\n        },\n        children: /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          align: \"center\",\n          noWrap: true,\n          sx: {\n            fontWeight: selected ? 'bold' : 'normal'\n          },\n          children: data.label\n        })\n      })\n    }), /*#__PURE__*/_jsx(EdgeContextMenu, {\n      anchorEl: anchorEl,\n      open: Boolean(anchorEl),\n      onClose: handleCloseContextMenu,\n      onDelete: handleDelete,\n      onLabelEdit: handleLabelEdit,\n      onConnectionTypeChange: handleConnectionTypeChange,\n      onPriorityChange: handlePriorityChange,\n      onTest: handleTest,\n      onAddBreakpoint: handleAddBreakpoint,\n      connectionType: data === null || data === void 0 ? void 0 : data.connectionType,\n      priority: data === null || data === void 0 ? void 0 : data.priority\n    }), (isHovered || selected) && /*#__PURE__*/_jsx(\"foreignObject\", {\n      width: 72,\n      height: 24,\n      x: centerX - 36,\n      y: centerY - 36,\n      requiredExtensions: \"http://www.w3.org/1999/xhtml\",\n      className: \"react-flow__edge-actions\",\n      children: /*#__PURE__*/_jsx(Fade, {\n        in: true,\n        children: /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            width: '100%',\n            height: '100%',\n            backgroundColor: 'background.paper',\n            borderRadius: '4px',\n            boxShadow: 2,\n            border: '1px solid rgba(0, 0, 0, 0.12)'\n          },\n          children: [/*#__PURE__*/_jsx(Tooltip, {\n            title: \"Settings\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              size: \"small\",\n              onClick: handleContextMenu,\n              sx: {\n                width: 24,\n                height: 24\n              },\n              children: /*#__PURE__*/_jsx(SettingsIcon, {\n                style: {\n                  fontSize: 14\n                }\n              })\n            })\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Test\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              size: \"small\",\n              onClick: handleTest,\n              sx: {\n                width: 24,\n                height: 24\n              },\n              children: /*#__PURE__*/_jsx(TestIcon, {\n                style: {\n                  fontSize: 14\n                }\n              })\n            })\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Delete\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              size: \"small\",\n              onClick: handleDelete,\n              sx: {\n                width: 24,\n                height: 24\n              },\n              children: /*#__PURE__*/_jsx(DeleteIcon, {\n                style: {\n                  fontSize: 14\n                },\n                color: \"error\"\n              })\n            })\n          })]\n        })\n      })\n    })]\n  });\n});\nexport default FlowEdge;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}