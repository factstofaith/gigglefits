{"ast":null,"code":"/**\n * S3CredentialManager.jsx\n * \n * A component for securely managing AWS S3 credentials. It provides an\n * interface for entering, testing, and securely storing S3 credentials.\n */import React,{useState,useEffect,useCallback}from'react';import{Box,Button,Card,CardContent,CardHeader,CircularProgress,Dialog,DialogActions,DialogContent,DialogContentText,DialogTitle,Divider,FormControl,FormControlLabel,FormHelperText,Grid,IconButton,InputAdornment,MenuItem,Paper,Radio,RadioGroup,Select,Stack,Switch,TextField,Tooltip,Typography,Alert,AlertTitle,Collapse,Chip,InputLabel}from'@mui/material';// Icons\nimport{Info as InfoIcon,Visibility as VisibilityIcon,VisibilityOff as VisibilityOffIcon,Save as SaveIcon,Delete as DeleteIcon,CheckCircle as CheckCircleIcon,Error as ErrorIcon,LockOutlined as LockIcon,LockOpen as UnlockIcon,Refresh as RefreshIcon,Key as KeyIcon}from'@mui/icons-material';// Services\nimport{credentialService}from\"../../../services/credentialService\";// AWS Regions\nimport{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const AWS_REGIONS=[{value:'us-east-1',label:'US East (N. Virginia)'},{value:'us-east-2',label:'US East (Ohio)'},{value:'us-west-1',label:'US West (N. California)'},{value:'us-west-2',label:'US West (Oregon)'},{value:'af-south-1',label:'Africa (Cape Town)'},{value:'ap-east-1',label:'Asia Pacific (Hong Kong)'},{value:'ap-south-1',label:'Asia Pacific (Mumbai)'},{value:'ap-northeast-1',label:'Asia Pacific (Tokyo)'},{value:'ap-northeast-2',label:'Asia Pacific (Seoul)'},{value:'ap-northeast-3',label:'Asia Pacific (Osaka)'},{value:'ap-southeast-1',label:'Asia Pacific (Singapore)'},{value:'ap-southeast-2',label:'Asia Pacific (Sydney)'},{value:'ca-central-1',label:'Canada (Central)'},{value:'eu-central-1',label:'Europe (Frankfurt)'},{value:'eu-west-1',label:'Europe (Ireland)'},{value:'eu-west-2',label:'Europe (London)'},{value:'eu-west-3',label:'Europe (Paris)'},{value:'eu-north-1',label:'Europe (Stockholm)'},{value:'eu-south-1',label:'Europe (Milan)'},{value:'me-south-1',label:'Middle East (Bahrain)'},{value:'sa-east-1',label:'South America (SÃ£o Paulo)'}];/**\n * S3CredentialManager component for securely managing AWS S3 credentials\n */const S3CredentialManager=_ref=>{let{onCredentialsSaved,onCredentialsLoaded,readOnly=false,showSaveControls=true,initialVisible=false}=_ref;// Credential state\nconst[credentials,setCredentials]=useState({authMethod:'accessKey',accessKeyId:'',secretAccessKey:'',region:'us-east-1',profile:'',useIAMRole:false,assumeRoleArn:'',externalId:''});// UI state\nconst[showSecrets,setShowSecrets]=useState(false);const[loading,setLoading]=useState(false);const[saving,setSaving]=useState(false);const[expanded,setExpanded]=useState(initialVisible);const[showDeleteConfirm,setShowDeleteConfirm]=useState(false);const[hasStoredCredentials,setHasStoredCredentials]=useState(false);const[lastUpdated,setLastUpdated]=useState(null);// Status messages\nconst[status,setStatus]=useState(null);const[error,setError]=useState(null);// Test result state\nconst[testResult,setTestResult]=useState(null);/**\n   * Fetch stored credentials on component mount\n   */useEffect(()=>{const loadCredentials=async()=>{setLoading(true);try{// First check if credentials exist without requesting secrets\nconst hasCredsResult=await credentialService.hasCredentials('s3');setHasStoredCredentials(hasCredsResult);// If credentials exist and component is expanded, load them\nif(hasCredsResult&&expanded){const result=await credentialService.getCredentials('s3',true);if(result.success&&result.data){// Determine the auth method from the credentials\nlet authMethod='accessKey';if(result.data.access_key_id&&result.data.secret_access_key){authMethod='accessKey';}else if(result.data.profile){authMethod='profile';}else{authMethod='iamRole';}const newCredentials={authMethod,accessKeyId:result.data.access_key_id||'',secretAccessKey:result.data.secret_access_key||'',region:result.data.region||'us-east-1',profile:result.data.profile||'',useIAMRole:authMethod==='iamRole',assumeRoleArn:result.data.assume_role_arn||'',externalId:result.data.external_id||''};setCredentials(newCredentials);setLastUpdated(result.data.last_updated);// Notify parent component\nif(onCredentialsLoaded){onCredentialsLoaded(newCredentials);}}}}catch(err){console.error('Error loading credentials:',err);setError('Failed to load stored credentials');}finally{setLoading(false);}};loadCredentials();},[expanded,onCredentialsLoaded]);/**\n   * Handle input change\n   */const handleChange=e=>{const{name,value,type,checked}=e.target;const newValue=type==='checkbox'?checked:value;// Update credentials state\nsetCredentials(prev=>{// If changing auth method, reset related fields\nif(name==='authMethod'){const updated={...prev,[name]:newValue,// Reset all credential fields\naccessKeyId:'',secretAccessKey:'',profile:'',assumeRoleArn:'',externalId:''// Keep region for all methods\n};// Set IAM role flag\nif(newValue==='iamRole'){updated.useIAMRole=true;}else{updated.useIAMRole=false;}return updated;}return{...prev,[name]:newValue};});// Clear any status or error messages\nsetStatus(null);setError(null);setTestResult(null);};/**\n   * Toggle visibility of secret fields\n   */const toggleShowSecrets=()=>{setShowSecrets(!showSecrets);};/**\n   * Toggle expansion of the credential form\n   */const toggleExpanded=()=>{setExpanded(!expanded);};/**\n   * Save credentials to secure storage\n   */const saveCredentials=async()=>{setSaving(true);setStatus(null);setError(null);try{// Convert credentials format for storage\nconst storageCredentials={access_key_id:credentials.authMethod==='accessKey'?credentials.accessKeyId:'',secret_access_key:credentials.authMethod==='accessKey'?credentials.secretAccessKey:'',region:credentials.region,profile:credentials.authMethod==='profile'?credentials.profile:'',use_iam_role:credentials.authMethod==='iamRole',assume_role_arn:credentials.assumeRoleArn,external_id:credentials.externalId};// Store credentials\nconst result=await credentialService.storeCredentials('s3',storageCredentials);if(result.success){setStatus('Credentials saved successfully');setHasStoredCredentials(true);setLastUpdated(new Date().toISOString());// Notify parent component\nif(onCredentialsSaved){onCredentialsSaved(credentials);}}else{setError(result.message||'Failed to save credentials');}}catch(err){console.error('Error saving credentials:',err);setError('An error occurred while saving credentials');}finally{setSaving(false);}};/**\n   * Delete stored credentials\n   */const deleteCredentials=async()=>{setLoading(true);setStatus(null);setError(null);try{const result=await credentialService.deleteCredentials('s3');if(result.success){setStatus('Credentials deleted successfully');setHasStoredCredentials(false);setLastUpdated(null);// Reset form\nsetCredentials({authMethod:'accessKey',accessKeyId:'',secretAccessKey:'',region:'us-east-1',profile:'',useIAMRole:false,assumeRoleArn:'',externalId:''});// Notify parent component\nif(onCredentialsSaved){onCredentialsSaved(null);}}else{setError(result.message||'Failed to delete credentials');}}catch(err){console.error('Error deleting credentials:',err);setError('An error occurred while deleting credentials');}finally{setLoading(false);setShowDeleteConfirm(false);}};/**\n   * Test credentials by connecting to S3\n   */const testConnection=useCallback(async()=>{setLoading(true);setStatus(null);setError(null);setTestResult(null);try{// Format credentials for testing\nconst testCredentials={access_key_id:credentials.authMethod==='accessKey'?credentials.accessKeyId:'',secret_access_key:credentials.authMethod==='accessKey'?credentials.secretAccessKey:'',region:credentials.region,profile:credentials.authMethod==='profile'?credentials.profile:'',use_iam_role:credentials.authMethod==='iamRole',assume_role_arn:credentials.assumeRoleArn,external_id:credentials.externalId};// Send test request\nconst result=await credentialService.testCredentials('s3',testCredentials);setTestResult(result);if(result.success){setStatus('Connection successful');}else{setError(result.message||'Connection failed');}}catch(err){console.error('Error testing credentials:',err);setError('An error occurred during connection test');setTestResult({success:false,message:'An error occurred during connection test',details:{error:err.message}});}finally{setLoading(false);}},[credentials]);/**\n   * Validate if credentials are complete for the selected auth method\n   */const validateCredentials=useCallback(()=>{switch(credentials.authMethod){case'accessKey':return credentials.accessKeyId.trim()!==''&&credentials.secretAccessKey.trim()!==''&&credentials.region.trim()!=='';case'profile':return credentials.profile.trim()!==''&&credentials.region.trim()!=='';case'iamRole':return credentials.region.trim()!=='';default:return false;}},[credentials]);// Check if credentials are valid\nconst isValid=validateCredentials();/**\n   * Format date for display\n   */const formatDate=dateString=>{if(!dateString)return'Never';try{const date=new Date(dateString);return date.toLocaleString();}catch(err){return'Unknown';}};// Authentication method options\nconst authMethods=[{value:'accessKey',label:'Access Key'},{value:'profile',label:'AWS Profile'},{value:'iamRole',label:'IAM Role'}];// Field visibility based on selected auth method\nconst showAccessKey=credentials.authMethod==='accessKey';const showProfile=credentials.authMethod==='profile';const showAssumeRole=credentials.assumeRoleArn.trim()!=='';return/*#__PURE__*/_jsxs(Card,{variant:\"outlined\",children:[/*#__PURE__*/_jsx(CardHeader,{title:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center'},children:[/*#__PURE__*/_jsx(KeyIcon,{sx:{mr:1,color:'primary.main'}}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"AWS S3 Credentials\"}),hasStoredCredentials&&/*#__PURE__*/_jsx(Chip,{label:\"Credentials Stored\",color:\"success\",size:\"small\",icon:/*#__PURE__*/_jsx(LockIcon,{}),sx:{ml:2}})]}),/*#__PURE__*/_jsx(IconButton,{onClick:toggleExpanded,children:expanded?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})})]}),subheader:hasStoredCredentials?/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[\"Last Updated: \",formatDate(lastUpdated)]}):/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"No stored credentials\"})}),/*#__PURE__*/_jsx(Collapse,{in:expanded,children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Box,{sx:{mb:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Authentication Method\"}),/*#__PURE__*/_jsx(FormControl,{component:\"fieldset\",children:/*#__PURE__*/_jsx(RadioGroup,{row:true,name:\"authMethod\",value:credentials.authMethod,onChange:handleChange,children:authMethods.map(method=>/*#__PURE__*/_jsx(FormControlLabel,{value:method.value,control:/*#__PURE__*/_jsx(Radio,{}),label:method.label,disabled:loading||readOnly},method.value))})})]}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:showAccessKey?6:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{id:\"region-label\",children:\"AWS Region\"}),/*#__PURE__*/_jsx(Select,{labelId:\"region-label\",id:\"region\",name:\"region\",value:credentials.region,onChange:handleChange,label:\"AWS Region\",disabled:loading||readOnly,children:AWS_REGIONS.map(region=>/*#__PURE__*/_jsx(MenuItem,{value:region.value,children:region.label},region.value))}),/*#__PURE__*/_jsx(FormHelperText,{children:\"AWS region where your S3 buckets are located\"})]})}),showAccessKey&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"accessKeyId\",label:\"Access Key ID\",value:credentials.accessKeyId,onChange:handleChange,disabled:loading||readOnly}),/*#__PURE__*/_jsx(FormHelperText,{children:\"AWS IAM Access Key ID\"})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"secretAccessKey\",label:\"Secret Access Key\",value:credentials.secretAccessKey,onChange:handleChange,type:showSecrets?'text':'password',disabled:loading||readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsxs(InputAdornment,{position:\"end\",children:[/*#__PURE__*/_jsx(IconButton,{onClick:toggleShowSecrets,edge:\"end\",children:showSecrets?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})}),/*#__PURE__*/_jsx(Tooltip,{title:\"Your AWS Secret Access Key. This is sensitive information that should be kept secure.\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",children:/*#__PURE__*/_jsx(InfoIcon,{})})})]})}}),/*#__PURE__*/_jsx(FormHelperText,{children:\"AWS IAM Secret Access Key\"})]})})]}),showProfile&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"profile\",label:\"AWS Profile Name\",value:credentials.profile,onChange:handleChange,disabled:loading||readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(Tooltip,{title:\"Profile name from AWS credentials file (~/.aws/credentials)\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",children:/*#__PURE__*/_jsx(InfoIcon,{})})})})}}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Named profile from AWS credentials file (for local development)\"})]})}),credentials.authMethod==='iamRole'&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Paper,{variant:\"outlined\",sx:{p:2,bgcolor:'background.default'},children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",children:\"Using IAM Role for authentication. No additional credentials required. The application will use the IAM role attached to the environment where it's running.\"})})}),/*#__PURE__*/_jsxs(Grid,{item:true,xs:12,sx:{mt:2},children:[/*#__PURE__*/_jsx(Divider,{textAlign:\"left\",children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"Advanced Options\"})}),/*#__PURE__*/_jsxs(Box,{sx:{mt:2},children:[/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,sx:{mb:2},children:[/*#__PURE__*/_jsx(TextField,{name:\"assumeRoleArn\",label:\"Assume Role ARN (Optional)\",value:credentials.assumeRoleArn,onChange:handleChange,disabled:loading||readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(Tooltip,{title:\"The Amazon Resource Name (ARN) of the role to assume\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",children:/*#__PURE__*/_jsx(InfoIcon,{})})})})}}),/*#__PURE__*/_jsx(FormHelperText,{children:\"ARN of an IAM role to assume (for cross-account access)\"})]}),showAssumeRole&&/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"externalId\",label:\"External ID (Optional)\",value:credentials.externalId,onChange:handleChange,disabled:loading||readOnly}),/*#__PURE__*/_jsx(FormHelperText,{children:\"External ID for the assume role request (if required)\"})]})]})]})]}),(status||error||testResult)&&/*#__PURE__*/_jsxs(Box,{sx:{mt:3},children:[status&&!error&&/*#__PURE__*/_jsx(Alert,{severity:\"success\",sx:{mb:2},children:status}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mb:2},children:error}),testResult&&/*#__PURE__*/_jsxs(Alert,{severity:testResult.success?'success':'error',sx:{mb:2},children:[/*#__PURE__*/_jsx(AlertTitle,{children:testResult.success?'Connection Test Successful':'Connection Test Failed'}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:testResult.message}),testResult.details&&/*#__PURE__*/_jsx(Box,{sx:{mt:1},children:testResult.success?/*#__PURE__*/_jsxs(_Fragment,{children:[testResult.details.buckets&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Found \",testResult.details.buckets,\" bucket(s)\"]}),testResult.details.region&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Region: \",testResult.details.region]}),testResult.details.permissions&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Permissions: \",testResult.details.permissions.join(', ')]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[testResult.details.error&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Error: \",testResult.details.error]}),testResult.details.code&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Code: \",testResult.details.code]})]})})]})]}),showSaveControls&&/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',mt:3},children:[/*#__PURE__*/_jsx(Box,{children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",disabled:!isValid||loading||readOnly,onClick:testConnection,startIcon:loading?/*#__PURE__*/_jsx(CircularProgress,{size:20}):/*#__PURE__*/_jsx(RefreshIcon,{}),children:\"Test Connection\"})}),/*#__PURE__*/_jsxs(Box,{children:[hasStoredCredentials&&/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"error\",onClick:()=>setShowDeleteConfirm(true),disabled:loading||readOnly,startIcon:/*#__PURE__*/_jsx(DeleteIcon,{}),sx:{mr:1},children:\"Delete\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",disabled:!isValid||loading||readOnly,onClick:saveCredentials,startIcon:saving?/*#__PURE__*/_jsx(CircularProgress,{size:20}):/*#__PURE__*/_jsx(SaveIcon,{}),children:saving?'Saving...':hasStoredCredentials?'Update':'Save'})]})]})]})}),/*#__PURE__*/_jsxs(Dialog,{open:showDeleteConfirm,onClose:()=>setShowDeleteConfirm(false),children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"Delete Credentials?\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsx(DialogContentText,{children:\"Are you sure you want to delete the stored AWS S3 credentials? This action cannot be undone.\"})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:()=>setShowDeleteConfirm(false),autoFocus:true,children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{onClick:deleteCredentials,color:\"error\",children:\"Delete\"})]})]})]});};export default S3CredentialManager;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Button","Card","CardContent","CardHeader","CircularProgress","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Divider","FormControl","FormControlLabel","FormHelperText","Grid","IconButton","InputAdornment","MenuItem","Paper","Radio","RadioGroup","Select","Stack","Switch","TextField","Tooltip","Typography","Alert","AlertTitle","Collapse","Chip","InputLabel","Info","InfoIcon","Visibility","VisibilityIcon","VisibilityOff","VisibilityOffIcon","Save","SaveIcon","Delete","DeleteIcon","CheckCircle","CheckCircleIcon","Error","ErrorIcon","LockOutlined","LockIcon","LockOpen","UnlockIcon","Refresh","RefreshIcon","Key","KeyIcon","credentialService","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AWS_REGIONS","value","label","S3CredentialManager","_ref","onCredentialsSaved","onCredentialsLoaded","readOnly","showSaveControls","initialVisible","credentials","setCredentials","authMethod","accessKeyId","secretAccessKey","region","profile","useIAMRole","assumeRoleArn","externalId","showSecrets","setShowSecrets","loading","setLoading","saving","setSaving","expanded","setExpanded","showDeleteConfirm","setShowDeleteConfirm","hasStoredCredentials","setHasStoredCredentials","lastUpdated","setLastUpdated","status","setStatus","error","setError","testResult","setTestResult","loadCredentials","hasCredsResult","hasCredentials","result","getCredentials","success","data","access_key_id","secret_access_key","newCredentials","assume_role_arn","external_id","last_updated","err","console","handleChange","e","name","type","checked","target","newValue","prev","updated","toggleShowSecrets","toggleExpanded","saveCredentials","storageCredentials","use_iam_role","storeCredentials","Date","toISOString","message","deleteCredentials","testConnection","testCredentials","details","validateCredentials","trim","isValid","formatDate","dateString","date","toLocaleString","authMethods","showAccessKey","showProfile","showAssumeRole","variant","children","title","sx","display","alignItems","justifyContent","mr","color","size","icon","ml","onClick","subheader","in","mb","gutterBottom","component","row","onChange","map","method","control","disabled","container","spacing","item","xs","md","fullWidth","id","labelId","InputProps","endAdornment","position","edge","p","bgcolor","mt","textAlign","severity","buckets","permissions","join","code","startIcon","open","onClose","autoFocus"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/components/integration/s3/S3CredentialManager.jsx"],"sourcesContent":["/**\n * S3CredentialManager.jsx\n * \n * A component for securely managing AWS S3 credentials. It provides an\n * interface for entering, testing, and securely storing S3 credentials.\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  IconButton,\n  InputAdornment,\n  MenuItem,\n  Paper,\n  Radio,\n  RadioGroup,\n  Select,\n  Stack,\n  Switch,\n  TextField,\n  Tooltip,\n  Typography,\n  Alert,\n  AlertTitle,\n  Collapse,\n  Chip,\n  InputLabel,\n} from '@mui/material';\n\n// Icons\nimport {\n  Info as InfoIcon,\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n  Save as SaveIcon,\n  Delete as DeleteIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  LockOutlined as LockIcon,\n  LockOpen as UnlockIcon,\n  Refresh as RefreshIcon,\n  Key as KeyIcon,\n} from '@mui/icons-material';\n\n// Services\nimport { credentialService } from '../../../services/credentialService';\n\n// AWS Regions\nconst AWS_REGIONS = [\n  { value: 'us-east-1', label: 'US East (N. Virginia)' },\n  { value: 'us-east-2', label: 'US East (Ohio)' },\n  { value: 'us-west-1', label: 'US West (N. California)' },\n  { value: 'us-west-2', label: 'US West (Oregon)' },\n  { value: 'af-south-1', label: 'Africa (Cape Town)' },\n  { value: 'ap-east-1', label: 'Asia Pacific (Hong Kong)' },\n  { value: 'ap-south-1', label: 'Asia Pacific (Mumbai)' },\n  { value: 'ap-northeast-1', label: 'Asia Pacific (Tokyo)' },\n  { value: 'ap-northeast-2', label: 'Asia Pacific (Seoul)' },\n  { value: 'ap-northeast-3', label: 'Asia Pacific (Osaka)' },\n  { value: 'ap-southeast-1', label: 'Asia Pacific (Singapore)' },\n  { value: 'ap-southeast-2', label: 'Asia Pacific (Sydney)' },\n  { value: 'ca-central-1', label: 'Canada (Central)' },\n  { value: 'eu-central-1', label: 'Europe (Frankfurt)' },\n  { value: 'eu-west-1', label: 'Europe (Ireland)' },\n  { value: 'eu-west-2', label: 'Europe (London)' },\n  { value: 'eu-west-3', label: 'Europe (Paris)' },\n  { value: 'eu-north-1', label: 'Europe (Stockholm)' },\n  { value: 'eu-south-1', label: 'Europe (Milan)' },\n  { value: 'me-south-1', label: 'Middle East (Bahrain)' },\n  { value: 'sa-east-1', label: 'South America (SÃ£o Paulo)' },\n];\n\n/**\n * S3CredentialManager component for securely managing AWS S3 credentials\n */\nconst S3CredentialManager = ({ \n  onCredentialsSaved,\n  onCredentialsLoaded,\n  readOnly = false,\n  showSaveControls = true,\n  initialVisible = false,\n}) => {\n  // Credential state\n  const [credentials, setCredentials] = useState({\n    authMethod: 'accessKey',\n    accessKeyId: '',\n    secretAccessKey: '',\n    region: 'us-east-1',\n    profile: '',\n    useIAMRole: false,\n    assumeRoleArn: '',\n    externalId: '',\n  });\n  \n  // UI state\n  const [showSecrets, setShowSecrets] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [expanded, setExpanded] = useState(initialVisible);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [hasStoredCredentials, setHasStoredCredentials] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  \n  // Status messages\n  const [status, setStatus] = useState(null);\n  const [error, setError] = useState(null);\n  \n  // Test result state\n  const [testResult, setTestResult] = useState(null);\n\n  /**\n   * Fetch stored credentials on component mount\n   */\n  useEffect(() => {\n    const loadCredentials = async () => {\n      setLoading(true);\n      try {\n        // First check if credentials exist without requesting secrets\n        const hasCredsResult = await credentialService.hasCredentials('s3');\n        setHasStoredCredentials(hasCredsResult);\n        \n        // If credentials exist and component is expanded, load them\n        if (hasCredsResult && expanded) {\n          const result = await credentialService.getCredentials('s3', true);\n          \n          if (result.success && result.data) {\n            // Determine the auth method from the credentials\n            let authMethod = 'accessKey';\n            if (result.data.access_key_id && result.data.secret_access_key) {\n              authMethod = 'accessKey';\n            } else if (result.data.profile) {\n              authMethod = 'profile';\n            } else {\n              authMethod = 'iamRole';\n            }\n            \n            const newCredentials = {\n              authMethod,\n              accessKeyId: result.data.access_key_id || '',\n              secretAccessKey: result.data.secret_access_key || '',\n              region: result.data.region || 'us-east-1',\n              profile: result.data.profile || '',\n              useIAMRole: authMethod === 'iamRole',\n              assumeRoleArn: result.data.assume_role_arn || '',\n              externalId: result.data.external_id || '',\n            };\n            \n            setCredentials(newCredentials);\n            setLastUpdated(result.data.last_updated);\n            \n            // Notify parent component\n            if (onCredentialsLoaded) {\n              onCredentialsLoaded(newCredentials);\n            }\n          }\n        }\n      } catch (err) {\n        console.error('Error loading credentials:', err);\n        setError('Failed to load stored credentials');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadCredentials();\n  }, [expanded, onCredentialsLoaded]);\n  \n  /**\n   * Handle input change\n   */\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const newValue = type === 'checkbox' ? checked : value;\n    \n    // Update credentials state\n    setCredentials(prev => {\n      // If changing auth method, reset related fields\n      if (name === 'authMethod') {\n        const updated = { \n          ...prev, \n          [name]: newValue,\n          // Reset all credential fields\n          accessKeyId: '',\n          secretAccessKey: '',\n          profile: '',\n          assumeRoleArn: '',\n          externalId: '',\n          // Keep region for all methods\n        };\n        \n        // Set IAM role flag\n        if (newValue === 'iamRole') {\n          updated.useIAMRole = true;\n        } else {\n          updated.useIAMRole = false;\n        }\n        \n        return updated;\n      }\n      \n      return { ...prev, [name]: newValue };\n    });\n    \n    // Clear any status or error messages\n    setStatus(null);\n    setError(null);\n    setTestResult(null);\n  };\n  \n  /**\n   * Toggle visibility of secret fields\n   */\n  const toggleShowSecrets = () => {\n    setShowSecrets(!showSecrets);\n  };\n  \n  /**\n   * Toggle expansion of the credential form\n   */\n  const toggleExpanded = () => {\n    setExpanded(!expanded);\n  };\n  \n  /**\n   * Save credentials to secure storage\n   */\n  const saveCredentials = async () => {\n    setSaving(true);\n    setStatus(null);\n    setError(null);\n    \n    try {\n      // Convert credentials format for storage\n      const storageCredentials = {\n        access_key_id: credentials.authMethod === 'accessKey' ? credentials.accessKeyId : '',\n        secret_access_key: credentials.authMethod === 'accessKey' ? credentials.secretAccessKey : '',\n        region: credentials.region,\n        profile: credentials.authMethod === 'profile' ? credentials.profile : '',\n        use_iam_role: credentials.authMethod === 'iamRole',\n        assume_role_arn: credentials.assumeRoleArn,\n        external_id: credentials.externalId,\n      };\n      \n      // Store credentials\n      const result = await credentialService.storeCredentials('s3', storageCredentials);\n      \n      if (result.success) {\n        setStatus('Credentials saved successfully');\n        setHasStoredCredentials(true);\n        setLastUpdated(new Date().toISOString());\n        \n        // Notify parent component\n        if (onCredentialsSaved) {\n          onCredentialsSaved(credentials);\n        }\n      } else {\n        setError(result.message || 'Failed to save credentials');\n      }\n    } catch (err) {\n      console.error('Error saving credentials:', err);\n      setError('An error occurred while saving credentials');\n    } finally {\n      setSaving(false);\n    }\n  };\n  \n  /**\n   * Delete stored credentials\n   */\n  const deleteCredentials = async () => {\n    setLoading(true);\n    setStatus(null);\n    setError(null);\n    \n    try {\n      const result = await credentialService.deleteCredentials('s3');\n      \n      if (result.success) {\n        setStatus('Credentials deleted successfully');\n        setHasStoredCredentials(false);\n        setLastUpdated(null);\n        \n        // Reset form\n        setCredentials({\n          authMethod: 'accessKey',\n          accessKeyId: '',\n          secretAccessKey: '',\n          region: 'us-east-1',\n          profile: '',\n          useIAMRole: false,\n          assumeRoleArn: '',\n          externalId: '',\n        });\n        \n        // Notify parent component\n        if (onCredentialsSaved) {\n          onCredentialsSaved(null);\n        }\n      } else {\n        setError(result.message || 'Failed to delete credentials');\n      }\n    } catch (err) {\n      console.error('Error deleting credentials:', err);\n      setError('An error occurred while deleting credentials');\n    } finally {\n      setLoading(false);\n      setShowDeleteConfirm(false);\n    }\n  };\n  \n  /**\n   * Test credentials by connecting to S3\n   */\n  const testConnection = useCallback(async () => {\n    setLoading(true);\n    setStatus(null);\n    setError(null);\n    setTestResult(null);\n    \n    try {\n      // Format credentials for testing\n      const testCredentials = {\n        access_key_id: credentials.authMethod === 'accessKey' ? credentials.accessKeyId : '',\n        secret_access_key: credentials.authMethod === 'accessKey' ? credentials.secretAccessKey : '',\n        region: credentials.region,\n        profile: credentials.authMethod === 'profile' ? credentials.profile : '',\n        use_iam_role: credentials.authMethod === 'iamRole',\n        assume_role_arn: credentials.assumeRoleArn,\n        external_id: credentials.externalId,\n      };\n      \n      // Send test request\n      const result = await credentialService.testCredentials('s3', testCredentials);\n      \n      setTestResult(result);\n      \n      if (result.success) {\n        setStatus('Connection successful');\n      } else {\n        setError(result.message || 'Connection failed');\n      }\n    } catch (err) {\n      console.error('Error testing credentials:', err);\n      setError('An error occurred during connection test');\n      setTestResult({\n        success: false,\n        message: 'An error occurred during connection test',\n        details: {\n          error: err.message,\n        },\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [credentials]);\n  \n  /**\n   * Validate if credentials are complete for the selected auth method\n   */\n  const validateCredentials = useCallback(() => {\n    switch (credentials.authMethod) {\n      case 'accessKey':\n        return credentials.accessKeyId.trim() !== '' && \n               credentials.secretAccessKey.trim() !== '' &&\n               credentials.region.trim() !== '';\n      case 'profile':\n        return credentials.profile.trim() !== '' &&\n               credentials.region.trim() !== '';\n      case 'iamRole':\n        return credentials.region.trim() !== '';\n      default:\n        return false;\n    }\n  }, [credentials]);\n  \n  // Check if credentials are valid\n  const isValid = validateCredentials();\n  \n  /**\n   * Format date for display\n   */\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Never';\n    \n    try {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    } catch (err) {\n      return 'Unknown';\n    }\n  };\n  \n  // Authentication method options\n  const authMethods = [\n    { value: 'accessKey', label: 'Access Key' },\n    { value: 'profile', label: 'AWS Profile' },\n    { value: 'iamRole', label: 'IAM Role' },\n  ];\n  \n  // Field visibility based on selected auth method\n  const showAccessKey = credentials.authMethod === 'accessKey';\n  const showProfile = credentials.authMethod === 'profile';\n  const showAssumeRole = credentials.assumeRoleArn.trim() !== '';\n  \n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        title={\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <KeyIcon sx={{ mr: 1, color: 'primary.main' }} />\n              <Typography variant=\"h6\">AWS S3 Credentials</Typography>\n              {hasStoredCredentials && (\n                <Chip \n                  label=\"Credentials Stored\" \n                  color=\"success\" \n                  size=\"small\" \n                  icon={<LockIcon />}\n                  sx={{ ml: 2 }}\n                />\n              )}\n            </Box>\n            <IconButton onClick={toggleExpanded}>\n              {expanded ? <VisibilityOffIcon /> : <VisibilityIcon />}\n            </IconButton>\n          </Box>\n        }\n        subheader={\n          hasStoredCredentials ? (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Last Updated: {formatDate(lastUpdated)}\n            </Typography>\n          ) : (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No stored credentials\n            </Typography>\n          )\n        }\n      />\n      \n      <Collapse in={expanded}>\n        <CardContent>\n          {/* Authentication Method Selection */}\n          <Box sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Authentication Method\n            </Typography>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                name=\"authMethod\"\n                value={credentials.authMethod}\n                onChange={handleChange}\n              >\n                {authMethods.map((method) => (\n                  <FormControlLabel\n                    key={method.value}\n                    value={method.value}\n                    control={<Radio />}\n                    label={method.label}\n                    disabled={loading || readOnly}\n                  />\n                ))}\n              </RadioGroup>\n            </FormControl>\n          </Box>\n          \n          <Grid container spacing={2}>\n            {/* Region Selection (common to all auth methods) */}\n            <Grid item xs={12} md={showAccessKey ? 6 : 12}>\n              <FormControl fullWidth>\n                <InputLabel id=\"region-label\">AWS Region</InputLabel>\n                <Select\n                  labelId=\"region-label\"\n                  id=\"region\"\n                  name=\"region\"\n                  value={credentials.region}\n                  onChange={handleChange}\n                  label=\"AWS Region\"\n                  disabled={loading || readOnly}\n                >\n                  {AWS_REGIONS.map((region) => (\n                    <MenuItem key={region.value} value={region.value}>\n                      {region.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n                <FormHelperText>\n                  AWS region where your S3 buckets are located\n                </FormHelperText>\n              </FormControl>\n            </Grid>\n            \n            {/* Access Key Credentials */}\n            {showAccessKey && (\n              <>\n                <Grid item xs={12} md={6}>\n                  <FormControl fullWidth>\n                    <TextField\n                      name=\"accessKeyId\"\n                      label=\"Access Key ID\"\n                      value={credentials.accessKeyId}\n                      onChange={handleChange}\n                      disabled={loading || readOnly}\n                    />\n                    <FormHelperText>\n                      AWS IAM Access Key ID\n                    </FormHelperText>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControl fullWidth>\n                    <TextField\n                      name=\"secretAccessKey\"\n                      label=\"Secret Access Key\"\n                      value={credentials.secretAccessKey}\n                      onChange={handleChange}\n                      type={showSecrets ? 'text' : 'password'}\n                      disabled={loading || readOnly}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={toggleShowSecrets}\n                              edge=\"end\"\n                            >\n                              {showSecrets ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                            </IconButton>\n                            <Tooltip title=\"Your AWS Secret Access Key. This is sensitive information that should be kept secure.\">\n                              <IconButton edge=\"end\">\n                                <InfoIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </InputAdornment>\n                        )\n                      }}\n                    />\n                    <FormHelperText>\n                      AWS IAM Secret Access Key\n                    </FormHelperText>\n                  </FormControl>\n                </Grid>\n              </>\n            )}\n            \n            {/* Profile-based authentication */}\n            {showProfile && (\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <TextField\n                    name=\"profile\"\n                    label=\"AWS Profile Name\"\n                    value={credentials.profile}\n                    onChange={handleChange}\n                    disabled={loading || readOnly}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <Tooltip title=\"Profile name from AWS credentials file (~/.aws/credentials)\">\n                            <IconButton edge=\"end\">\n                              <InfoIcon />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>\n                    Named profile from AWS credentials file (for local development)\n                  </FormHelperText>\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* IAM Role */}\n            {credentials.authMethod === 'iamRole' && (\n              <Grid item xs={12}>\n                <Paper variant=\"outlined\" sx={{ p: 2, bgcolor: 'background.default' }}>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Using IAM Role for authentication. No additional credentials required.\n                    The application will use the IAM role attached to the environment where it's running.\n                  </Typography>\n                </Paper>\n              </Grid>\n            )}\n            \n            {/* Advanced Options - Assume Role (optional for all auth methods) */}\n            <Grid item xs={12} sx={{ mt: 2 }}>\n              <Divider textAlign=\"left\">\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Advanced Options\n                </Typography>\n              </Divider>\n              \n              <Box sx={{ mt: 2 }}>\n                <FormControl fullWidth sx={{ mb: 2 }}>\n                  <TextField\n                    name=\"assumeRoleArn\"\n                    label=\"Assume Role ARN (Optional)\"\n                    value={credentials.assumeRoleArn}\n                    onChange={handleChange}\n                    disabled={loading || readOnly}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <Tooltip title=\"The Amazon Resource Name (ARN) of the role to assume\">\n                            <IconButton edge=\"end\">\n                              <InfoIcon />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>\n                    ARN of an IAM role to assume (for cross-account access)\n                  </FormHelperText>\n                </FormControl>\n                \n                {showAssumeRole && (\n                  <FormControl fullWidth>\n                    <TextField\n                      name=\"externalId\"\n                      label=\"External ID (Optional)\"\n                      value={credentials.externalId}\n                      onChange={handleChange}\n                      disabled={loading || readOnly}\n                    />\n                    <FormHelperText>\n                      External ID for the assume role request (if required)\n                    </FormHelperText>\n                  </FormControl>\n                )}\n              </Box>\n            </Grid>\n          </Grid>\n          \n          {/* Status Messages */}\n          {(status || error || testResult) && (\n            <Box sx={{ mt: 3 }}>\n              {status && !error && (\n                <Alert severity=\"success\" sx={{ mb: 2 }}>\n                  {status}\n                </Alert>\n              )}\n              \n              {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                  {error}\n                </Alert>\n              )}\n              \n              {testResult && (\n                <Alert \n                  severity={testResult.success ? 'success' : 'error'} \n                  sx={{ mb: 2 }}\n                >\n                  <AlertTitle>\n                    {testResult.success ? 'Connection Test Successful' : 'Connection Test Failed'}\n                  </AlertTitle>\n                  <Typography variant=\"body2\">\n                    {testResult.message}\n                  </Typography>\n                  \n                  {testResult.details && (\n                    <Box sx={{ mt: 1 }}>\n                      {testResult.success ? (\n                        <>\n                          {testResult.details.buckets && (\n                            <Typography variant=\"body2\">\n                              Found {testResult.details.buckets} bucket(s)\n                            </Typography>\n                          )}\n                          {testResult.details.region && (\n                            <Typography variant=\"body2\">\n                              Region: {testResult.details.region}\n                            </Typography>\n                          )}\n                          {testResult.details.permissions && (\n                            <Typography variant=\"body2\">\n                              Permissions: {testResult.details.permissions.join(', ')}\n                            </Typography>\n                          )}\n                        </>\n                      ) : (\n                        <>\n                          {testResult.details.error && (\n                            <Typography variant=\"body2\">\n                              Error: {testResult.details.error}\n                            </Typography>\n                          )}\n                          {testResult.details.code && (\n                            <Typography variant=\"body2\">\n                              Code: {testResult.details.code}\n                            </Typography>\n                          )}\n                        </>\n                      )}\n                    </Box>\n                  )}\n                </Alert>\n              )}\n            </Box>\n          )}\n          \n          {/* Action Buttons */}\n          {showSaveControls && (\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>\n              <Box>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!isValid || loading || readOnly}\n                  onClick={testConnection}\n                  startIcon={loading ? <CircularProgress size={20} /> : <RefreshIcon />}\n                >\n                  Test Connection\n                </Button>\n              </Box>\n              \n              <Box>\n                {hasStoredCredentials && (\n                  <Button\n                    variant=\"outlined\"\n                    color=\"error\"\n                    onClick={() => setShowDeleteConfirm(true)}\n                    disabled={loading || readOnly}\n                    startIcon={<DeleteIcon />}\n                    sx={{ mr: 1 }}\n                  >\n                    Delete\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!isValid || loading || readOnly}\n                  onClick={saveCredentials}\n                  startIcon={saving ? <CircularProgress size={20} /> : <SaveIcon />}\n                >\n                  {saving ? 'Saving...' : (hasStoredCredentials ? 'Update' : 'Save')}\n                </Button>\n              </Box>\n            </Box>\n          )}\n        </CardContent>\n      </Collapse>\n      \n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={showDeleteConfirm}\n        onClose={() => setShowDeleteConfirm(false)}\n      >\n        <DialogTitle>Delete Credentials?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete the stored AWS S3 credentials? This action cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowDeleteConfirm(false)} autoFocus>\n            Cancel\n          </Button>\n          <Button onClick={deleteCredentials} color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  );\n};\n\nS3CredentialManager.propTypes = {\n  onCredentialsSaved: PropTypes.func,\n  onCredentialsLoaded: PropTypes.func,\n  readOnly: PropTypes.bool,\n  showSaveControls: PropTypes.bool,\n  initialVisible: PropTypes.bool,\n};\n\nexport default S3CredentialManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}