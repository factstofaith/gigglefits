{"ast":null,"code":"/**\n * Destination Node\n *\n * A custom node for data destinations in the integration flow canvas.\n * This node represents the endpoint of a data flow.\n *\n * @component\n */\n\nimport React, { memo } from 'react';\nimport { Handle } from 'react-flow-renderer';\nimport { Box, Typography, Paper, IconButton, Tooltip, Badge } from '@mui/material';\nimport { Storage as StorageIcon, CloudUpload as CloudUploadIcon, Database as DatabaseIcon, Api as ApiIcon, Settings as SettingsIcon, Error as ErrorIcon, Check as CheckIcon } from '@mui/icons-material';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DESTINATION_TYPES = {\n  S3: {\n    icon: CloudUploadIcon,\n    color: '#ff9900',\n    // AWS orange\n    label: 'S3'\n  },\n  AZURE_BLOB: {\n    icon: CloudUploadIcon,\n    color: '#0078d4',\n    // Azure blue\n    label: 'Azure Blob'\n  },\n  SHAREPOINT: {\n    icon: CloudUploadIcon,\n    color: '#0078d4',\n    // SharePoint blue\n    label: 'SharePoint'\n  },\n  API: {\n    icon: ApiIcon,\n    color: '#4285f4',\n    // Google blue\n    label: 'API'\n  },\n  DATABASE: {\n    icon: DatabaseIcon,\n    color: '#4CAF50',\n    // Green\n    label: 'Database'\n  },\n  default: {\n    icon: StorageIcon,\n    color: '#2196f3',\n    // Blue\n    label: 'Destination'\n  }\n};\n\n/**\n * Destination Node component\n */\nconst DestinationNode = /*#__PURE__*/memo(_ref => {\n  let {\n    id,\n    data,\n    isConnectable,\n    selected\n  } = _ref;\n  const destinationType = data.destinationType || 'default';\n  const destinationConfig = DESTINATION_TYPES[destinationType] || DESTINATION_TYPES.default;\n  const DestinationIconComponent = destinationConfig.icon;\n  const hasError = data.error !== undefined;\n  const isConfigured = data.isConfigured || false;\n  return /*#__PURE__*/_jsxs(Paper, {\n    elevation: selected ? 3 : 1,\n    sx: {\n      minHeight: 80,\n      width: 200,\n      padding: 1,\n      borderRadius: 1,\n      borderWidth: 2,\n      borderStyle: 'solid',\n      borderColor: selected ? 'primary.main' : destinationConfig.color,\n      backgroundColor: 'background.paper',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsx(Handle, {\n      type: \"target\",\n      position: \"left\",\n      id: \"input\",\n      style: {\n        left: -8,\n        top: '50%',\n        width: 12,\n        height: 12,\n        background: destinationConfig.color,\n        border: '2px solid #fff'\n      },\n      isConnectable: isConnectable\n    }), /*#__PURE__*/_jsxs(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 1,\n        backgroundColor: destinationConfig.color,\n        color: '#fff',\n        marginLeft: -1,\n        marginRight: -1,\n        marginTop: -1,\n        padding: 0.5,\n        borderTopLeftRadius: 4,\n        borderTopRightRadius: 4\n      },\n      children: [/*#__PURE__*/_jsx(DestinationIconComponent, {\n        fontSize: \"small\",\n        sx: {\n          mr: 1\n        }\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"subtitle2\",\n        sx: {\n          flexGrow: 1\n        },\n        children: destinationConfig.label\n      }), /*#__PURE__*/_jsx(Badge, {\n        color: hasError ? \"error\" : \"success\",\n        variant: \"dot\",\n        invisible: !isConfigured,\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Configure Destination\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            size: \"small\",\n            sx: {\n              color: '#fff',\n              '&:hover': {\n                backgroundColor: 'rgba(255, 255, 255, 0.2)'\n              }\n            },\n            children: /*#__PURE__*/_jsx(SettingsIcon, {\n              fontSize: \"small\"\n            })\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Box, {\n      sx: {\n        p: 1\n      },\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"body2\",\n        sx: {\n          mb: 0.5\n        },\n        children: data.label || 'Data Destination'\n      }), hasError ? /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          color: 'error.main'\n        },\n        children: [/*#__PURE__*/_jsx(ErrorIcon, {\n          fontSize: \"small\",\n          sx: {\n            mr: 0.5\n          }\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          color: \"error\",\n          children: data.error\n        })]\n      }) : isConfigured ? /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          color: 'success.main'\n        },\n        children: [/*#__PURE__*/_jsx(CheckIcon, {\n          fontSize: \"small\",\n          sx: {\n            mr: 0.5\n          }\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          color: \"success.main\",\n          children: \"Configured\"\n        })]\n      }) : /*#__PURE__*/_jsx(Typography, {\n        variant: \"caption\",\n        color: \"text.secondary\",\n        children: \"Click to configure\"\n      })]\n    })]\n  });\n});\nexport default DestinationNode;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}