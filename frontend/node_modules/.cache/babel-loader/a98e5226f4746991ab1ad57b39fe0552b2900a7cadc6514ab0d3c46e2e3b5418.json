{"ast":null,"code":"/**\n * credentialService.js\n * \n * A secure service for managing credentials and sensitive information in the frontend.\n * This service communicates with the backend for actual storage and encryption.\n */\n\nimport { authService } from \"./authService\";\n\n// API endpoints for credential management\nconst API_ENDPOINTS = {\n  store: '/api/credentials/store',\n  retrieve: '/api/credentials/retrieve',\n  list: '/api/credentials/list',\n  delete: '/api/credentials/delete',\n  test: '/api/credentials/test'\n};\n\n/**\n * Makes an authenticated API call\n * @param {string} url - API endpoint\n * @param {string} method - HTTP method\n * @param {Object} data - Request payload\n * @returns {Promise<Object>} - API response\n */\nconst callApi = async function (url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n  let data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  try {\n    // Get auth token\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      throw new Error('Authentication required');\n    }\n\n    // Prepare request options\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      credentials: 'include'\n    };\n\n    // Add body for non-GET requests\n    if (method !== 'GET' && data) {\n      options.body = JSON.stringify(data);\n    }\n\n    // In a development environment, simulate API responses\n    console.log(`[DEV] Simulating API call: ${method} ${url}`);\n    console.log(`[DEV] Request data:`, data);\n\n    // Simulate API response based on the request\n    let response;\n\n    // Simulate network delay\n    await new Promise(resolve => setTimeout(resolve, 800));\n    if (url.includes('/store')) {\n      // Simulate storing credentials\n      response = {\n        success: true,\n        message: 'Credentials stored successfully'\n      };\n    } else if (url.includes('/retrieve')) {\n      // Simulate retrieving credentials\n      if (data.credentialType === 'azure') {\n        response = {\n          success: true,\n          data: {\n            connection_string: data.includeSecrets ? 'DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=abcdefg==;EndpointSuffix=core.windows.net' : '',\n            account_name: 'myaccount',\n            account_key: data.includeSecrets ? 'abcdefg==' : '',\n            sas_token: data.includeSecrets ? '?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupitfx&se=2025-05-01T18:16:36Z&st=2025-04-01T10:16:36Z&spr=https&sig=abcdefg==' : '',\n            tenant_id: 'tenant-id-value',\n            client_id: 'client-id-value',\n            client_secret: data.includeSecrets ? 'secret-value' : '',\n            has_credentials: true,\n            last_updated: new Date().toISOString()\n          }\n        };\n      } else if (data.credentialType === 's3') {\n        response = {\n          success: true,\n          data: {\n            access_key_id: 'AKIAIOSFODNN7EXAMPLE',\n            secret_access_key: data.includeSecrets ? 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY' : '',\n            region: 'us-east-1',\n            profile: '',\n            has_credentials: true,\n            last_updated: new Date().toISOString()\n          }\n        };\n      } else if (data.credentialType === 'sharepoint') {\n        response = {\n          success: true,\n          data: {\n            tenant_id: 'tenant-id-value',\n            client_id: 'client-id-value',\n            client_secret: data.includeSecrets ? 'secret-value' : '',\n            username: 'user@example.com',\n            password: data.includeSecrets ? 'password-value' : '',\n            has_credentials: true,\n            last_updated: new Date().toISOString()\n          }\n        };\n      } else {\n        // Unknown credential type\n        response = {\n          success: false,\n          message: 'Unknown credential type'\n        };\n      }\n    } else if (url.includes('/list')) {\n      // Simulate listing credentials\n      response = {\n        success: true,\n        data: [{\n          name: 'azure',\n          type: 'storage',\n          last_updated: new Date().toISOString()\n        }, {\n          name: 's3',\n          type: 'storage',\n          last_updated: new Date().toISOString()\n        }, {\n          name: 'sharepoint',\n          type: 'storage',\n          last_updated: new Date().toISOString()\n        }]\n      };\n    } else if (url.includes('/delete')) {\n      // Simulate deleting credentials\n      response = {\n        success: true,\n        message: 'Credentials deleted successfully'\n      };\n    } else if (url.includes('/test')) {\n      // Simulate testing credentials\n      if (data.credentialType === 'azure') {\n        const connectionError = Math.random() < 0.2; // 20% chance of error\n        if (connectionError) {\n          response = {\n            success: false,\n            message: 'Failed to connect to Azure Blob Storage',\n            details: {\n              error: 'Connection timeout',\n              code: 'ConnectionError'\n            }\n          };\n        } else {\n          response = {\n            success: true,\n            message: 'Successfully connected to Azure Blob Storage',\n            details: {\n              containers: 5,\n              account: 'myaccount',\n              permissions: ['read', 'write', 'delete']\n            }\n          };\n        }\n      } else if (data.credentialType === 's3') {\n        response = {\n          success: true,\n          message: 'Successfully connected to S3',\n          details: {\n            buckets: 3,\n            region: 'us-east-1',\n            permissions: ['read', 'write', 'delete']\n          }\n        };\n      } else if (data.credentialType === 'sharepoint') {\n        response = {\n          success: true,\n          message: 'Successfully connected to SharePoint',\n          details: {\n            sites: 2,\n            tenant: 'example.onmicrosoft.com',\n            permissions: ['read', 'write']\n          }\n        };\n      } else {\n        // Unknown credential type\n        response = {\n          success: false,\n          message: 'Unknown credential type'\n        };\n      }\n    } else {\n      // Unknown endpoint\n      response = {\n        success: false,\n        message: 'Unknown endpoint'\n      };\n    }\n    return response;\n\n    // In a production environment, we would actually make the API call\n    /*\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'API request failed');\n    }\n    \n    return await response.json();\n    */\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n};\n\n/**\n * Credential Service for securely managing sensitive information\n */\nexport const credentialService = {\n  /**\n   * Store credentials in the secure backend storage\n   * @param {string} credentialType - Type of credentials (e.g., 'azure', 's3', 'sharepoint')\n   * @param {Object} credentials - Credential data to store\n   * @returns {Promise<Object>} - Result of the operation\n   */\n  storeCredentials: async (credentialType, credentials) => {\n    try {\n      const response = await callApi(API_ENDPOINTS.store, 'POST', {\n        credentialType,\n        credentials\n      });\n      return response;\n    } catch (error) {\n      console.error(`Failed to store ${credentialType} credentials:`, error);\n      return {\n        success: false,\n        message: error.message || `Failed to store credentials: ${error}`\n      };\n    }\n  },\n  /**\n   * Retrieve credentials from secure storage\n   * @param {string} credentialType - Type of credentials to retrieve\n   * @param {boolean} includeSecrets - Whether to include secret values\n   * @returns {Promise<Object>} - Retrieved credentials or error\n   */\n  getCredentials: async function (credentialType) {\n    let includeSecrets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    try {\n      const response = await callApi(API_ENDPOINTS.retrieve, 'POST', {\n        credentialType,\n        includeSecrets\n      });\n      return response;\n    } catch (error) {\n      console.error(`Failed to retrieve ${credentialType} credentials:`, error);\n      return {\n        success: false,\n        message: error.message || `Failed to retrieve credentials: ${error}`\n      };\n    }\n  },\n  /**\n   * List available credential types\n   * @returns {Promise<Array>} - List of available credential types\n   */\n  listCredentials: async () => {\n    try {\n      const response = await callApi(API_ENDPOINTS.list, 'GET');\n      return response;\n    } catch (error) {\n      console.error('Failed to list credentials:', error);\n      return {\n        success: false,\n        message: error.message || `Failed to list credentials: ${error}`\n      };\n    }\n  },\n  /**\n   * Delete stored credentials\n   * @param {string} credentialType - Type of credentials to delete\n   * @returns {Promise<Object>} - Result of the operation\n   */\n  deleteCredentials: async credentialType => {\n    try {\n      const response = await callApi(API_ENDPOINTS.delete, 'POST', {\n        credentialType\n      });\n      return response;\n    } catch (error) {\n      console.error(`Failed to delete ${credentialType} credentials:`, error);\n      return {\n        success: false,\n        message: error.message || `Failed to delete credentials: ${error}`\n      };\n    }\n  },\n  /**\n   * Test credentials by attempting to connect to the service\n   * @param {string} credentialType - Type of credentials to test\n   * @param {Object} credentials - Credentials to test (optional, uses stored if not provided)\n   * @returns {Promise<Object>} - Test results\n   */\n  testCredentials: async function (credentialType) {\n    let credentials = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    try {\n      const response = await callApi(API_ENDPOINTS.test, 'POST', {\n        credentialType,\n        credentials\n      });\n      return response;\n    } catch (error) {\n      console.error(`Failed to test ${credentialType} credentials:`, error);\n      return {\n        success: false,\n        message: error.message || `Failed to test credentials: ${error}`\n      };\n    }\n  },\n  /**\n   * Check if credentials exist for a specific type\n   * @param {string} credentialType - Type of credentials to check\n   * @returns {Promise<boolean>} - Whether credentials exist\n   */\n  hasCredentials: async credentialType => {\n    try {\n      const response = await callApi(API_ENDPOINTS.retrieve, 'POST', {\n        credentialType,\n        includeSecrets: false\n      });\n      return response.success && response.data && response.data.has_credentials;\n    } catch (error) {\n      console.error(`Failed to check ${credentialType} credentials:`, error);\n      return false;\n    }\n  }\n};\nexport default credentialService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}