{"ast":null,"code":"/**\n * useFeatureFlag Hook\n * \n * React hook for checking if a feature flag is enabled\n */import{useState,useEffect}from'react';import featureFlagsService from\"../services/featureFlagsService\";/**\n * Hook to check if a feature flag is enabled\n * @param {string} featureName - Name of the feature flag to check\n * @returns {boolean} Whether the feature is enabled\n */function useFeatureFlag(featureName){const[isEnabled,setIsEnabled]=useState(featureFlagsService.isEnabled(featureName));useEffect(()=>{// Re-check on mount to ensure we have the latest value\nsetIsEnabled(featureFlagsService.isEnabled(featureName));// Setup event listener for flag changes\nconst handleFlagChange=e=>{if(e.detail&&e.detail.flag===featureName){setIsEnabled(e.detail.value);}};window.addEventListener('featureFlagChanged',handleFlagChange);return()=>{window.removeEventListener('featureFlagChanged',handleFlagChange);};},[featureName]);return isEnabled;}export default useFeatureFlag;","map":{"version":3,"names":["useState","useEffect","featureFlagsService","useFeatureFlag","featureName","isEnabled","setIsEnabled","handleFlagChange","e","detail","flag","value","window","addEventListener","removeEventListener"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/hooks/useFeatureFlag.js"],"sourcesContent":["/**\n * useFeatureFlag Hook\n * \n * React hook for checking if a feature flag is enabled\n */\n\nimport { useState, useEffect } from 'react';\nimport featureFlagsService from '../services/featureFlagsService';\n\n/**\n * Hook to check if a feature flag is enabled\n * @param {string} featureName - Name of the feature flag to check\n * @returns {boolean} Whether the feature is enabled\n */\nfunction useFeatureFlag(featureName) {\n  const [isEnabled, setIsEnabled] = useState(featureFlagsService.isEnabled(featureName));\n  \n  useEffect(() => {\n    // Re-check on mount to ensure we have the latest value\n    setIsEnabled(featureFlagsService.isEnabled(featureName));\n    \n    // Setup event listener for flag changes\n    const handleFlagChange = (e) => {\n      if (e.detail && e.detail.flag === featureName) {\n        setIsEnabled(e.detail.value);\n      }\n    };\n    \n    window.addEventListener('featureFlagChanged', handleFlagChange);\n    \n    return () => {\n      window.removeEventListener('featureFlagChanged', handleFlagChange);\n    };\n  }, [featureName]);\n  \n  return isEnabled;\n}\n\nexport default useFeatureFlag;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GAEA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,MAAO,CAAAC,mBAAmB,uCAE1B;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,cAAcA,CAACC,WAAW,CAAE,CACnC,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGN,QAAQ,CAACE,mBAAmB,CAACG,SAAS,CAACD,WAAW,CAAC,CAAC,CAEtFH,SAAS,CAAC,IAAM,CACd;AACAK,YAAY,CAACJ,mBAAmB,CAACG,SAAS,CAACD,WAAW,CAAC,CAAC,CAExD;AACA,KAAM,CAAAG,gBAAgB,CAAIC,CAAC,EAAK,CAC9B,GAAIA,CAAC,CAACC,MAAM,EAAID,CAAC,CAACC,MAAM,CAACC,IAAI,GAAKN,WAAW,CAAE,CAC7CE,YAAY,CAACE,CAAC,CAACC,MAAM,CAACE,KAAK,CAAC,CAC9B,CACF,CAAC,CAEDC,MAAM,CAACC,gBAAgB,CAAC,oBAAoB,CAAEN,gBAAgB,CAAC,CAE/D,MAAO,IAAM,CACXK,MAAM,CAACE,mBAAmB,CAAC,oBAAoB,CAAEP,gBAAgB,CAAC,CACpE,CAAC,CACH,CAAC,CAAE,CAACH,WAAW,CAAC,CAAC,CAEjB,MAAO,CAAAC,SAAS,CAClB,CAEA,cAAe,CAAAF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}