{"ast":null,"code":"import React, { useState, useCallback, useEffect } from 'react';\nimport { Container, Typography, Box, Paper, Button, Tabs, Tab } from \"../design-system/optimized\";\nimport { useParams } from 'react-router-dom';\n\n// Import components\nimport IntegrationFlowCanvas from \"../components/integration/flow/IntegrationFlowCanvas\";\nimport AzureBlobConfiguration from \"../components/integration/AzureBlobConfiguration\";\n\n/**\n * Integration Detail Page - Shows details for a specific integration\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst IntegrationDetailPage = () => {\n  const {\n    id\n  } = useParams();\n  const [activeTab, setActiveTab] = useState(0);\n  const [configTab, setConfigTab] = useState(0);\n  const [readOnly, setReadOnly] = useState(true);\n  const [flowElements, setFlowElements] = useState([]);\n\n  // Configuration state\n  const [sourceConfig, setSourceConfig] = useState({\n    authMethod: 'connectionString',\n    connectionString: 'DefaultEndpointsProtocol=https;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;EndpointSuffix=core.windows.net',\n    containerName: 'datasets',\n    filePattern: '*.csv',\n    path: 'daily/',\n    createContainerIfNotExists: true\n  });\n  const [configErrors, setConfigErrors] = useState({\n    source: {},\n    destination: {}\n  });\n\n  // Mock user permissions for demonstration\n  const userPermissions = ['database.read', 'database.write', 'script.execute', 'ai.access', 'admin.access'];\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n  const handleConfigTabChange = (event, newValue) => {\n    setConfigTab(newValue);\n  };\n  const handleSourceConfigChange = newConfig => {\n    setSourceConfig(newConfig);\n\n    // Simple validation\n    const errors = {};\n    if (newConfig.authMethod === 'connectionString' && !newConfig.connectionString) {\n      errors.connectionString = 'Connection string is required';\n    } else if (newConfig.authMethod === 'accountKey') {\n      if (!newConfig.accountName) errors.accountName = 'Account name is required';\n      if (!newConfig.accountKey) errors.accountKey = 'Account key is required';\n    } else if (newConfig.authMethod === 'sasToken') {\n      if (!newConfig.accountName) errors.accountName = 'Account name is required';\n      if (!newConfig.sasToken) errors.sasToken = 'SAS token is required';\n    } else if (newConfig.authMethod === 'managedIdentity' && !newConfig.accountName) {\n      errors.accountName = 'Account name is required for managed identity';\n    }\n    if (!newConfig.containerName) {\n      errors.containerName = 'Container name is required';\n    }\n    setConfigErrors({\n      ...configErrors,\n      source: errors\n    });\n  };\n  const handleEditToggle = useCallback(() => {\n    setReadOnly(!readOnly);\n  }, [readOnly]);\n  const handleFlowSave = useCallback(elements => {\n    console.log('Saving flow:', elements);\n    // Here you would save the flow to your backend\n    setFlowElements(elements);\n  }, []);\n  const handleFlowRun = useCallback(elements => {\n    console.log('Running flow:', elements);\n    // Here you would trigger the flow execution\n  }, []);\n  const handleFlowChange = useCallback(elements => {\n    // Handle flow changes without saving\n    setFlowElements(elements);\n  }, []);\n  return /*#__PURE__*/_jsx(Container, {\n    maxWidth: \"lg\",\n    children: /*#__PURE__*/_jsxs(Box, {\n      my: 4,\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"h4\",\n        component: \"h1\",\n        gutterBottom: true,\n        children: \"Integration Details\"\n      }), /*#__PURE__*/_jsxs(Typography, {\n        variant: \"subtitle1\",\n        color: \"textSecondary\",\n        gutterBottom: true,\n        children: [\"ID: \", id]\n      }), /*#__PURE__*/_jsxs(Box, {\n        display: \"flex\",\n        justifyContent: \"flex-end\",\n        mb: 2,\n        children: [/*#__PURE__*/_jsx(Button, {\n          variant: \"outlined\",\n          color: readOnly ? \"primary\" : \"success\",\n          sx: {\n            mr: 1\n          },\n          onClick: handleEditToggle,\n          children: readOnly ? \"Edit\" : \"Editing...\"\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => handleFlowRun(flowElements),\n          children: \"Run Now\"\n        })]\n      }), /*#__PURE__*/_jsxs(Paper, {\n        sx: {\n          mb: 4\n        },\n        children: [/*#__PURE__*/_jsxs(Tabs, {\n          value: activeTab,\n          onChange: handleTabChange,\n          \"aria-label\": \"integration tabs\",\n          children: [/*#__PURE__*/_jsx(Tab, {\n            label: \"Overview\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Flow Designer\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Configuration\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"History\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Monitoring\"\n          })]\n        }), /*#__PURE__*/_jsxs(Box, {\n          children: [activeTab === 0 && /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              p: 3\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Integration Overview\"\n            }), /*#__PURE__*/_jsx(Typography, {\n              paragraph: true,\n              children: \"This integration is configured to sync data between systems.\"\n            })]\n          }), activeTab === 1 && /*#__PURE__*/_jsx(Box, {\n            sx: {\n              height: '70vh'\n            },\n            children: /*#__PURE__*/_jsx(IntegrationFlowCanvas, {\n              initialElements: flowElements,\n              readOnly: readOnly,\n              userPermissions: userPermissions,\n              onSave: handleFlowSave,\n              onRun: handleFlowRun,\n              onChange: handleFlowChange\n            })\n          }), activeTab === 2 && /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              p: 3\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Configuration Details\"\n            }), /*#__PURE__*/_jsxs(Box, {\n              mt: 3,\n              children: [/*#__PURE__*/_jsxs(Tabs, {\n                value: configTab,\n                onChange: handleConfigTabChange,\n                \"aria-label\": \"configuration tabs\",\n                children: [/*#__PURE__*/_jsx(Tab, {\n                  label: \"Source\"\n                }), /*#__PURE__*/_jsx(Tab, {\n                  label: \"Destination\"\n                }), /*#__PURE__*/_jsx(Tab, {\n                  label: \"Advanced\"\n                })]\n              }), configTab === 0 && /*#__PURE__*/_jsx(Box, {\n                mt: 2,\n                children: /*#__PURE__*/_jsx(AzureBlobConfiguration, {\n                  config: sourceConfig,\n                  onChange: handleSourceConfigChange,\n                  errors: configErrors.source || {},\n                  readOnly: readOnly,\n                  isSuperUser: userPermissions.includes('admin.access')\n                })\n              }), configTab === 1 && /*#__PURE__*/_jsx(Box, {\n                mt: 2,\n                children: /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body1\",\n                  children: \"Configure destination settings here. This will be replaced with actual destination configuration components.\"\n                })\n              }), configTab === 2 && /*#__PURE__*/_jsx(Box, {\n                mt: 2,\n                children: /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body1\",\n                  children: \"Advanced configuration options such as error handling, validation, and notification settings.\"\n                })\n              })]\n            })]\n          }), activeTab === 3 && /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              p: 3\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Execution History\"\n            }), /*#__PURE__*/_jsx(Typography, {\n              paragraph: true,\n              children: \"View past runs and their outcomes.\"\n            })]\n          }), activeTab === 4 && /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              p: 3\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"h6\",\n              gutterBottom: true,\n              children: \"Monitoring & Alerts\"\n            }), /*#__PURE__*/_jsx(Typography, {\n              paragraph: true,\n              children: \"Configure monitoring settings and alerts.\"\n            })]\n          })]\n        })]\n      })]\n    })\n  });\n};\nexport default IntegrationDetailPage;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}