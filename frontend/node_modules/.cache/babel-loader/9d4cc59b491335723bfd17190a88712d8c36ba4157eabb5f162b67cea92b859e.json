{"ast":null,"code":"/**\n * Contextual Help Hook\n * \n * A custom hook for working with contextual help and guided tours.\n * Provides an easy-to-use interface for implementing help features across components.\n */import{useCallback}from'react';import{useHelp}from\"../contexts/HelpContext\";/**\n * Custom hook for implementing contextual help and guided tours\n * \n * @param {string} section - The section identifier (e.g., 'integration', 'transformation')\n * @returns {Object} Helper functions and data for implementing contextual help\n */const useContextualHelp=section=>{const{helpContent,tours,startTour,addHelpContent,getHelpContent,helpPreferences,handleTourComplete}=useHelp();/**\n   * Get help content for a specific feature in this section\n   * \n   * @param {string} key - The key for the specific feature\n   * @returns {Object|null} The help content or null if not found\n   */const getHelp=useCallback(key=>getHelpContent(section,key),[section,getHelpContent]);/**\n   * Add new help content for this section\n   * \n   * @param {string} key - The key for the specific feature\n   * @param {Object} content - The help content to add\n   */const addHelp=useCallback((key,content)=>addHelpContent(section,key,content),[section,addHelpContent]);/**\n   * Check if help is enabled\n   * \n   * @returns {boolean} Whether help is enabled\n   */const isHelpEnabled=helpPreferences.showHelp;/**\n   * Get all tours related to this section\n   * \n   * @returns {Array} Tours related to this section\n   */const getSectionTours=useCallback(()=>tours.filter(tour=>tour.id.startsWith(`${section}-`)),[section,tours]);/**\n   * Start a tour specific to this section\n   * \n   * @param {string} tourId - The ID of the tour to start\n   */const startSectionTour=useCallback(tourId=>{const fullTourId=tourId.includes('-')?tourId:`${section}-${tourId}`;startTour(fullTourId);},[section,startTour]);/**\n   * Check if a tour has been completed\n   * \n   * @param {string} tourId - The ID of the tour to check\n   * @returns {boolean} Whether the tour has been completed\n   */const isTourCompleted=useCallback(tourId=>{const fullTourId=tourId.includes('-')?tourId:`${section}-${tourId}`;return helpPreferences.completedTours.includes(fullTourId);},[section,helpPreferences.completedTours]);return{getHelp,addHelp,isHelpEnabled,tours,getSectionTours,startTour:startSectionTour,isTourCompleted,completeTour:handleTourComplete};};export default useContextualHelp;","map":{"version":3,"names":["useCallback","useHelp","useContextualHelp","section","helpContent","tours","startTour","addHelpContent","getHelpContent","helpPreferences","handleTourComplete","getHelp","key","addHelp","content","isHelpEnabled","showHelp","getSectionTours","filter","tour","id","startsWith","startSectionTour","tourId","fullTourId","includes","isTourCompleted","completedTours","completeTour"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/hooks/useContextualHelp.js"],"sourcesContent":["/**\n * Contextual Help Hook\n * \n * A custom hook for working with contextual help and guided tours.\n * Provides an easy-to-use interface for implementing help features across components.\n */\n\nimport { useCallback } from 'react';\nimport { useHelp } from '../contexts/HelpContext';\n\n/**\n * Custom hook for implementing contextual help and guided tours\n * \n * @param {string} section - The section identifier (e.g., 'integration', 'transformation')\n * @returns {Object} Helper functions and data for implementing contextual help\n */\nconst useContextualHelp = (section) => {\n  const {\n    helpContent,\n    tours,\n    startTour,\n    addHelpContent,\n    getHelpContent,\n    helpPreferences,\n    handleTourComplete,\n  } = useHelp();\n\n  /**\n   * Get help content for a specific feature in this section\n   * \n   * @param {string} key - The key for the specific feature\n   * @returns {Object|null} The help content or null if not found\n   */\n  const getHelp = useCallback(\n    (key) => getHelpContent(section, key),\n    [section, getHelpContent]\n  );\n\n  /**\n   * Add new help content for this section\n   * \n   * @param {string} key - The key for the specific feature\n   * @param {Object} content - The help content to add\n   */\n  const addHelp = useCallback(\n    (key, content) => addHelpContent(section, key, content),\n    [section, addHelpContent]\n  );\n  \n  /**\n   * Check if help is enabled\n   * \n   * @returns {boolean} Whether help is enabled\n   */\n  const isHelpEnabled = helpPreferences.showHelp;\n  \n  /**\n   * Get all tours related to this section\n   * \n   * @returns {Array} Tours related to this section\n   */\n  const getSectionTours = useCallback(\n    () => tours.filter(tour => tour.id.startsWith(`${section}-`)),\n    [section, tours]\n  );\n  \n  /**\n   * Start a tour specific to this section\n   * \n   * @param {string} tourId - The ID of the tour to start\n   */\n  const startSectionTour = useCallback(\n    (tourId) => {\n      const fullTourId = tourId.includes('-') ? tourId : `${section}-${tourId}`;\n      startTour(fullTourId);\n    },\n    [section, startTour]\n  );\n  \n  /**\n   * Check if a tour has been completed\n   * \n   * @param {string} tourId - The ID of the tour to check\n   * @returns {boolean} Whether the tour has been completed\n   */\n  const isTourCompleted = useCallback(\n    (tourId) => {\n      const fullTourId = tourId.includes('-') ? tourId : `${section}-${tourId}`;\n      return helpPreferences.completedTours.includes(fullTourId);\n    },\n    [section, helpPreferences.completedTours]\n  );\n\n  return {\n    getHelp,\n    addHelp,\n    isHelpEnabled,\n    tours,\n    getSectionTours,\n    startTour: startSectionTour,\n    isTourCompleted,\n    completeTour: handleTourComplete,\n  };\n};\n\nexport default useContextualHelp;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GAEA,OAASA,WAAW,KAAQ,OAAO,CACnC,OAASC,OAAO,+BAEhB;AACA;AACA;AACA;AACA;AACA,GACA,KAAM,CAAAC,iBAAiB,CAAIC,OAAO,EAAK,CACrC,KAAM,CACJC,WAAW,CACXC,KAAK,CACLC,SAAS,CACTC,cAAc,CACdC,cAAc,CACdC,eAAe,CACfC,kBACF,CAAC,CAAGT,OAAO,CAAC,CAAC,CAEb;AACF;AACA;AACA;AACA;AACA,KACE,KAAM,CAAAU,OAAO,CAAGX,WAAW,CACxBY,GAAG,EAAKJ,cAAc,CAACL,OAAO,CAAES,GAAG,CAAC,CACrC,CAACT,OAAO,CAAEK,cAAc,CAC1B,CAAC,CAED;AACF;AACA;AACA;AACA;AACA,KACE,KAAM,CAAAK,OAAO,CAAGb,WAAW,CACzB,CAACY,GAAG,CAAEE,OAAO,GAAKP,cAAc,CAACJ,OAAO,CAAES,GAAG,CAAEE,OAAO,CAAC,CACvD,CAACX,OAAO,CAAEI,cAAc,CAC1B,CAAC,CAED;AACF;AACA;AACA;AACA,KACE,KAAM,CAAAQ,aAAa,CAAGN,eAAe,CAACO,QAAQ,CAE9C;AACF;AACA;AACA;AACA,KACE,KAAM,CAAAC,eAAe,CAAGjB,WAAW,CACjC,IAAMK,KAAK,CAACa,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACC,EAAE,CAACC,UAAU,CAAC,GAAGlB,OAAO,GAAG,CAAC,CAAC,CAC7D,CAACA,OAAO,CAAEE,KAAK,CACjB,CAAC,CAED;AACF;AACA;AACA;AACA,KACE,KAAM,CAAAiB,gBAAgB,CAAGtB,WAAW,CACjCuB,MAAM,EAAK,CACV,KAAM,CAAAC,UAAU,CAAGD,MAAM,CAACE,QAAQ,CAAC,GAAG,CAAC,CAAGF,MAAM,CAAG,GAAGpB,OAAO,IAAIoB,MAAM,EAAE,CACzEjB,SAAS,CAACkB,UAAU,CAAC,CACvB,CAAC,CACD,CAACrB,OAAO,CAAEG,SAAS,CACrB,CAAC,CAED;AACF;AACA;AACA;AACA;AACA,KACE,KAAM,CAAAoB,eAAe,CAAG1B,WAAW,CAChCuB,MAAM,EAAK,CACV,KAAM,CAAAC,UAAU,CAAGD,MAAM,CAACE,QAAQ,CAAC,GAAG,CAAC,CAAGF,MAAM,CAAG,GAAGpB,OAAO,IAAIoB,MAAM,EAAE,CACzE,MAAO,CAAAd,eAAe,CAACkB,cAAc,CAACF,QAAQ,CAACD,UAAU,CAAC,CAC5D,CAAC,CACD,CAACrB,OAAO,CAAEM,eAAe,CAACkB,cAAc,CAC1C,CAAC,CAED,MAAO,CACLhB,OAAO,CACPE,OAAO,CACPE,aAAa,CACbV,KAAK,CACLY,eAAe,CACfX,SAAS,CAAEgB,gBAAgB,CAC3BI,eAAe,CACfE,YAAY,CAAElB,kBAChB,CAAC,CACH,CAAC,CAED,cAAe,CAAAR,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}