{"ast":null,"code":"/**\n * Accessibility Announcement Hook\n * \n * A custom hook for managing screen reader announcements in an accessible way.\n * Part of the zero technical debt accessibility implementation.\n * \n * @module hooks/a11y/useA11yAnnouncement\n */\n\nimport { useCallback, useEffect, useState, useRef } from 'react';\n\n// Default ID for the announcement container if not provided\nconst DEFAULT_ANNOUNCER_ID = 'a11y-announcer';\n\n/**\n * Politeness levels for ARIA live regions\n */\nexport const PolitenessLevel = {\n  POLITE: 'polite',\n  ASSERTIVE: 'assertive',\n  OFF: 'off'\n};\n\n/**\n * Custom hook for managing screen reader announcements\n * \n * @param {Object} options - Configuration options\n * @param {string} [options.announcerId=DEFAULT_ANNOUNCER_ID] - ID for the announcer element\n * @param {number} [options.maxAnnouncements=10] - Maximum number of announcements to keep in history\n * @param {boolean} [options.createAnnouncerElement=true] - Whether to create an announcer element if it doesn't exist\n * @returns {Object} Object containing announcement functions and state\n */\nconst useA11yAnnouncement = function () {\n  let {\n    announcerId = DEFAULT_ANNOUNCER_ID,\n    maxAnnouncements = 10,\n    createAnnouncerElement = true\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Queue of pending announcements\n  const announcementQueue = useRef([]);\n\n  // Currently active announcement\n  const [currentAnnouncement, setCurrentAnnouncement] = useState(null);\n\n  // History of previous announcements\n  const [announcementHistory, setAnnouncementHistory] = useState([]);\n\n  // Reference to the announcer elements (polite and assertive)\n  const politeAnnouncerRef = useRef(null);\n  const assertiveAnnouncerRef = useRef(null);\n\n  // Track if the hook has initialized\n  const initializedRef = useRef(false);\n\n  /**\n   * Initialize or get announcer elements\n   */\n  useEffect(() => {\n    if (initializedRef.current) return;\n    initializedRef.current = true;\n    const getOrCreateAnnouncer = politeness => {\n      const id = `${announcerId}-${politeness}`;\n      let announcer = document.getElementById(id);\n      if (!announcer && createAnnouncerElement) {\n        announcer = document.createElement('div');\n        announcer.id = id;\n        announcer.setAttribute('aria-live', politeness);\n        announcer.setAttribute('aria-atomic', 'true');\n        announcer.setAttribute('role', 'status');\n        announcer.setAttribute('aria-relevant', 'additions text');\n        announcer.className = 'sr-only a11y-announcer';\n        announcer.style.position = 'absolute';\n        announcer.style.width = '1px';\n        announcer.style.height = '1px';\n        announcer.style.padding = '0';\n        announcer.style.overflow = 'hidden';\n        announcer.style.clip = 'rect(0, 0, 0, 0)';\n        announcer.style.whiteSpace = 'nowrap';\n        announcer.style.border = '0';\n        document.body.appendChild(announcer);\n      }\n      return announcer;\n    };\n    politeAnnouncerRef.current = getOrCreateAnnouncer(PolitenessLevel.POLITE);\n    assertiveAnnouncerRef.current = getOrCreateAnnouncer(PolitenessLevel.ASSERTIVE);\n\n    // Cleanup function\n    return () => {\n      if (createAnnouncerElement) {\n        // Only remove the elements if we created them\n        [politeAnnouncerRef.current, assertiveAnnouncerRef.current].forEach(el => {\n          if (el && el.parentNode) {\n            el.parentNode.removeChild(el);\n          }\n        });\n      }\n    };\n  }, [announcerId, createAnnouncerElement]);\n\n  /**\n   * Process the announcement queue\n   */\n  useEffect(() => {\n    if (currentAnnouncement) return;\n    if (announcementQueue.current.length > 0) {\n      const nextAnnouncement = announcementQueue.current.shift();\n      setCurrentAnnouncement(nextAnnouncement);\n\n      // Add to history\n      setAnnouncementHistory(prevHistory => {\n        const newHistory = [nextAnnouncement, ...prevHistory];\n        // Limit history length\n        return newHistory.slice(0, maxAnnouncements);\n      });\n\n      // Set the announcement in the proper live region\n      const announcer = nextAnnouncement.politeness === PolitenessLevel.ASSERTIVE ? assertiveAnnouncerRef.current : politeAnnouncerRef.current;\n      if (announcer) {\n        // Clear previous content first (helps with some screen readers)\n        announcer.textContent = '';\n\n        // Small delay to ensure the clearing takes effect\n        setTimeout(() => {\n          announcer.textContent = nextAnnouncement.message;\n        }, 50);\n\n        // Clear the current announcement after a delay\n        const clearTimeout = setTimeout(() => {\n          setCurrentAnnouncement(null);\n        }, nextAnnouncement.duration);\n        return () => clearTimeout(clearTimeout);\n      } else {\n        console.warn('Announcer element not found for screen reader announcement');\n        setCurrentAnnouncement(null);\n      }\n    }\n  }, [currentAnnouncement, maxAnnouncements]);\n\n  /**\n   * Announce a message to screen readers\n   * @param {string} message - The message to announce\n   * @param {Object} options - Announcement options\n   * @param {string} [options.politeness=PolitenessLevel.POLITE] - Politeness level\n   * @param {number} [options.duration=3000] - How long to keep in the announcer (ms)\n   * @param {number} [options.priority=0] - Priority (higher means more important)\n   */\n  const announce = useCallback(function (message) {\n    let {\n      politeness = PolitenessLevel.POLITE,\n      duration = 3000,\n      priority = 0\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!message) return;\n    const announcement = {\n      id: `announcement-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`,\n      message,\n      politeness,\n      duration,\n      priority,\n      timestamp: Date.now()\n    };\n\n    // Add to queue, sorted by priority (higher priority first)\n    announcementQueue.current.push(announcement);\n    announcementQueue.current.sort((a, b) => b.priority - a.priority);\n\n    // Trigger update if no current announcement\n    if (!currentAnnouncement) {\n      setCurrentAnnouncement(null);\n    }\n  }, [currentAnnouncement]);\n\n  /**\n   * Announce a message with \"polite\" politeness level\n   */\n  const announcePolite = useCallback(function (message) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    announce(message, {\n      ...options,\n      politeness: PolitenessLevel.POLITE\n    });\n  }, [announce]);\n\n  /**\n   * Announce a message with \"assertive\" politeness level\n   */\n  const announceAssertive = useCallback(function (message) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    announce(message, {\n      ...options,\n      politeness: PolitenessLevel.ASSERTIVE\n    });\n  }, [announce]);\n\n  /**\n   * Clear all pending announcements and optionally the current one\n   */\n  const clearAnnouncements = useCallback(function () {\n    let includeCurrentAnnouncement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    announcementQueue.current = [];\n    if (includeCurrentAnnouncement) {\n      setCurrentAnnouncement(null);\n\n      // Clear announcer elements\n      if (politeAnnouncerRef.current) {\n        politeAnnouncerRef.current.textContent = '';\n      }\n      if (assertiveAnnouncerRef.current) {\n        assertiveAnnouncerRef.current.textContent = '';\n      }\n    }\n  }, []);\n\n  /**\n   * Clear the announcement history\n   */\n  const clearHistory = useCallback(() => {\n    setAnnouncementHistory([]);\n  }, []);\n  return {\n    announce,\n    announcePolite,\n    announceAssertive,\n    clearAnnouncements,\n    clearHistory,\n    currentAnnouncement,\n    announcementHistory,\n    politeAnnouncer: politeAnnouncerRef.current,\n    assertiveAnnouncer: assertiveAnnouncerRef.current\n  };\n};\nexport default useA11yAnnouncement;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}