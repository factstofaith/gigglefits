{"ast":null,"code":"/**\n * fileTypeUtils.js\n * \n * Comprehensive utilities for handling various file types in the application.\n * This module provides functions for file type detection, validation, visualization,\n * and processing of different file formats.\n */\n\n// Common MIME Types grouped by category\nexport const MimeTypeCategories = {\n  TEXT: ['text/plain', 'text/csv', 'text/tab-separated-values', 'text/markdown', 'text/html', 'text/css', 'text/javascript', 'text/xml', 'application/json', 'application/ld+json', 'application/x-yaml', 'application/yaml'],\n  DOCUMENT: ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  // .docx\n  'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  // .xlsx\n  'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  // .pptx\n  'application/rtf', 'application/vnd.oasis.opendocument.text', 'application/vnd.oasis.opendocument.spreadsheet', 'application/vnd.oasis.opendocument.presentation'],\n  IMAGE: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml', 'image/bmp', 'image/tiff', 'image/x-icon'],\n  AUDIO: ['audio/mpeg', 'audio/ogg', 'audio/wav', 'audio/webm', 'audio/aac', 'audio/flac'],\n  VIDEO: ['video/mp4', 'video/webm', 'video/ogg', 'video/quicktime', 'video/x-msvideo', 'video/x-ms-wmv'],\n  ARCHIVE: ['application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed', 'application/x-tar', 'application/gzip', 'application/x-bzip', 'application/x-bzip2'],\n  DATA: ['text/csv', 'application/json', 'application/xml', 'text/xml', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/tab-separated-values', 'application/parquet', 'application/avro', 'application/octet-stream'],\n  CODE: ['text/javascript', 'application/javascript', 'text/css', 'text/html', 'application/json', 'text/x-python', 'text/x-java', 'text/x-c', 'text/x-c++', 'text/x-csharp', 'text/x-php', 'text/x-ruby', 'text/x-go', 'text/x-rust', 'text/x-typescript']\n};\n\n// File extensions mapped to MIME types\nexport const FileExtensionToMimeType = {\n  // Text files\n  'txt': 'text/plain',\n  'csv': 'text/csv',\n  'tsv': 'text/tab-separated-values',\n  'md': 'text/markdown',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'css': 'text/css',\n  'js': 'text/javascript',\n  'json': 'application/json',\n  'xml': 'text/xml',\n  'yaml': 'application/yaml',\n  'yml': 'application/yaml',\n  // Document files\n  'pdf': 'application/pdf',\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'rtf': 'application/rtf',\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  // Image files\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'png': 'image/png',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'tiff': 'image/tiff',\n  'tif': 'image/tiff',\n  'ico': 'image/x-icon',\n  // Audio files\n  'mp3': 'audio/mpeg',\n  'ogg': 'audio/ogg',\n  'wav': 'audio/wav',\n  'aac': 'audio/aac',\n  'flac': 'audio/flac',\n  // Video files\n  'mp4': 'video/mp4',\n  'webm': 'video/webm',\n  'ogv': 'video/ogg',\n  'mov': 'video/quicktime',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  // Archive files\n  'zip': 'application/zip',\n  'rar': 'application/x-rar-compressed',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz': 'application/x-bzip',\n  'bz2': 'application/x-bzip2',\n  // Data files\n  'parquet': 'application/parquet',\n  'avro': 'application/avro',\n  'bin': 'application/octet-stream',\n  // Code files\n  'ts': 'text/x-typescript',\n  'py': 'text/x-python',\n  'java': 'text/x-java',\n  'c': 'text/x-c',\n  'cpp': 'text/x-c++',\n  'cs': 'text/x-csharp',\n  'php': 'text/x-php',\n  'rb': 'text/x-ruby',\n  'go': 'text/x-go',\n  'rs': 'text/x-rust'\n};\n\n/**\n * Gets MIME type from file extension\n * @param {string} filename - The filename or file path\n * @returns {string} The MIME type or 'application/octet-stream' if unknown\n */\nexport const getMimeTypeFromFilename = filename => {\n  if (!filename) return 'application/octet-stream';\n  const extension = filename.split('.').pop().toLowerCase();\n  return FileExtensionToMimeType[extension] || 'application/octet-stream';\n};\n\n/**\n * Gets file extension from filename\n * @param {string} filename - The filename or file path\n * @returns {string} The file extension (without the dot) or empty string if none\n */\nexport const getFileExtension = filename => {\n  if (!filename) return '';\n  const parts = filename.split('.');\n  return parts.length > 1 ? parts.pop().toLowerCase() : '';\n};\n\n/**\n * Checks if a file is of a specific category based on its MIME type\n * @param {string} mimeType - The MIME type to check\n * @param {string} category - The category to check against (TEXT, DOCUMENT, IMAGE, etc.)\n * @returns {boolean} True if the file is of the specified category\n */\nexport const isFileCategory = (mimeType, category) => {\n  if (!mimeType || !category || !MimeTypeCategories[category]) return false;\n  return MimeTypeCategories[category].includes(mimeType);\n};\n\n/**\n * Gets the file category for a given MIME type\n * @param {string} mimeType - The MIME type\n * @returns {string} The category name or 'OTHER' if unknown\n */\nexport const getFileCategory = mimeType => {\n  if (!mimeType) return 'OTHER';\n  for (const [category, types] of Object.entries(MimeTypeCategories)) {\n    if (types.includes(mimeType)) {\n      return category;\n    }\n  }\n  return 'OTHER';\n};\n\n/**\n * Gets a readable file type description from MIME type\n * @param {string} mimeType - The MIME type\n * @returns {string} A human-readable description of the file type\n */\nexport const getFileTypeDescription = mimeType => {\n  if (!mimeType) return 'Unknown File';\n\n  // Common descriptions for specific MIME types\n  const specificMimeTypes = {\n    'text/plain': 'Text File',\n    'text/csv': 'CSV File',\n    'text/tab-separated-values': 'TSV File',\n    'text/markdown': 'Markdown File',\n    'text/html': 'HTML File',\n    'application/json': 'JSON File',\n    'application/xml': 'XML File',\n    'text/xml': 'XML File',\n    'application/pdf': 'PDF Document',\n    'application/msword': 'Word Document',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'Word Document',\n    'application/vnd.ms-excel': 'Excel Spreadsheet',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'Excel Spreadsheet',\n    'image/jpeg': 'JPEG Image',\n    'image/png': 'PNG Image',\n    'image/gif': 'GIF Image',\n    'image/svg+xml': 'SVG Image',\n    'audio/mpeg': 'MP3 Audio',\n    'video/mp4': 'MP4 Video',\n    'application/zip': 'ZIP Archive',\n    'application/x-tar': 'TAR Archive',\n    'application/gzip': 'GZIP Archive'\n  };\n  if (specificMimeTypes[mimeType]) {\n    return specificMimeTypes[mimeType];\n  }\n\n  // General descriptions based on MIME type category\n  const category = getFileCategory(mimeType);\n  switch (category) {\n    case 'TEXT':\n      return 'Text File';\n    case 'DOCUMENT':\n      return 'Document';\n    case 'IMAGE':\n      return 'Image';\n    case 'AUDIO':\n      return 'Audio File';\n    case 'VIDEO':\n      return 'Video File';\n    case 'ARCHIVE':\n      return 'Archive';\n    case 'DATA':\n      return 'Data File';\n    case 'CODE':\n      return 'Source Code';\n    default:\n      return 'Binary File';\n  }\n};\n\n/**\n * Gets appropriate Material UI icon for file type\n * @param {string} mimeType - The MIME type\n * @returns {string} The name of the Material UI icon to use\n */\nexport const getFileTypeIcon = mimeType => {\n  if (!mimeType) return 'InsertDriveFile';\n  const category = getFileCategory(mimeType);\n  switch (category) {\n    case 'TEXT':\n      if (mimeType === 'text/csv' || mimeType === 'text/tab-separated-values') {\n        return 'TableChart';\n      }\n      if (mimeType === 'application/json') {\n        return 'Code';\n      }\n      return 'Description';\n    case 'DOCUMENT':\n      if (mimeType === 'application/pdf') {\n        return 'PictureAsPdf';\n      }\n      if (mimeType.includes('spreadsheet') || mimeType.includes('excel')) {\n        return 'GridOn';\n      }\n      if (mimeType.includes('presentation') || mimeType.includes('powerpoint')) {\n        return 'Slideshow';\n      }\n      return 'Description';\n    case 'IMAGE':\n      return 'Image';\n    case 'AUDIO':\n      return 'AudioFile';\n    case 'VIDEO':\n      return 'VideoFile';\n    case 'ARCHIVE':\n      return 'FolderZip';\n    case 'DATA':\n      if (mimeType === 'text/csv' || mimeType === 'text/tab-separated-values') {\n        return 'TableChart';\n      }\n      return 'Storage';\n    case 'CODE':\n      return 'Code';\n    default:\n      return 'InsertDriveFile';\n  }\n};\n\n/**\n * Gets color for file type icon\n * @param {string} mimeType - The MIME type\n * @returns {string} Material UI color to use for the icon\n */\nexport const getFileTypeColor = mimeType => {\n  if (!mimeType) return 'action.active';\n  const category = getFileCategory(mimeType);\n  switch (category) {\n    case 'TEXT':\n      return 'info.main';\n    case 'DOCUMENT':\n      if (mimeType === 'application/pdf') {\n        return 'error.main';\n      }\n      if (mimeType.includes('spreadsheet') || mimeType.includes('excel')) {\n        return 'success.main';\n      }\n      if (mimeType.includes('presentation') || mimeType.includes('powerpoint')) {\n        return 'warning.main';\n      }\n      return 'primary.main';\n    case 'IMAGE':\n      return 'success.main';\n    case 'AUDIO':\n      return 'secondary.main';\n    case 'VIDEO':\n      return 'error.main';\n    case 'ARCHIVE':\n      return 'warning.dark';\n    case 'DATA':\n      return 'info.dark';\n    case 'CODE':\n      return 'secondary.dark';\n    default:\n      return 'text.secondary';\n  }\n};\n\n/**\n * Checks if a file type is supported for preview\n * @param {string} mimeType - The MIME type\n * @returns {boolean} True if the file type is supported for preview\n */\nexport const isPreviewSupported = mimeType => {\n  if (!mimeType) return false;\n\n  // List of supported MIME types for preview\n  const supportedMimeTypes = [\n  // Text files\n  'text/plain', 'text/csv', 'text/tab-separated-values', 'text/markdown', 'text/html', 'text/css', 'text/javascript', 'application/json', 'application/xml', 'text/xml', 'application/yaml',\n  // Images\n  'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml', 'image/bmp',\n  // PDFs\n  'application/pdf',\n  // Special code types we can syntax highlight\n  'text/x-python', 'text/x-java', 'text/javascript', 'application/javascript', 'text/x-typescript'];\n  return supportedMimeTypes.includes(mimeType);\n};\n\n/**\n * Gets the appropriate preview component type for a file\n * @param {string} mimeType - The MIME type\n * @returns {string} The preview type: 'text', 'image', 'pdf', 'code', or 'none'\n */\nexport const getPreviewType = mimeType => {\n  if (!isPreviewSupported(mimeType)) return 'none';\n  if (mimeType.startsWith('image/')) {\n    return 'image';\n  }\n  if (mimeType === 'application/pdf') {\n    return 'pdf';\n  }\n  if (MimeTypeCategories.CODE.includes(mimeType)) {\n    return 'code';\n  }\n  if (MimeTypeCategories.TEXT.includes(mimeType) || mimeType === 'application/json' || mimeType === 'application/xml' || mimeType === 'text/xml') {\n    return 'text';\n  }\n  return 'none';\n};\n\n/**\n * Gets the appropriate syntax highlighting language for code preview\n * @param {string} mimeType - The MIME type\n * @returns {string} The syntax highlighting language\n */\nexport const getSyntaxHighlightLanguage = mimeType => {\n  const mimeToLanguage = {\n    'text/javascript': 'javascript',\n    'application/javascript': 'javascript',\n    'text/x-typescript': 'typescript',\n    'text/x-python': 'python',\n    'text/x-java': 'java',\n    'text/x-c': 'c',\n    'text/x-c++': 'cpp',\n    'text/x-csharp': 'csharp',\n    'text/x-php': 'php',\n    'text/x-ruby': 'ruby',\n    'text/x-go': 'go',\n    'text/x-rust': 'rust',\n    'text/css': 'css',\n    'text/html': 'html',\n    'application/json': 'json',\n    'application/ld+json': 'json',\n    'application/xml': 'xml',\n    'text/xml': 'xml',\n    'application/yaml': 'yaml',\n    'text/markdown': 'markdown',\n    'text/csv': 'csv',\n    'text/tab-separated-values': 'tsv'\n  };\n  return mimeToLanguage[mimeType] || 'plaintext';\n};\n\n/**\n * Generates simplified metadata for a file\n * @param {Object} file - The file object or file info\n * @returns {Object} Simplified metadata object with useful properties\n */\nexport const generateFileMetadata = file => {\n  if (!file) return null;\n\n  // Extract filename from path if needed\n  const filename = file.name || file.filename || (file.path ? file.path.split('/').pop() : 'unknown');\n\n  // Determine MIME type\n  const mimeType = file.contentType || file.type || getMimeTypeFromFilename(filename);\n\n  // Get file extension\n  const extension = getFileExtension(filename);\n  return {\n    filename,\n    mimeType,\n    extension,\n    size: file.size || file.contentLength || 0,\n    lastModified: file.lastModified || file.modifiedDate || new Date().toISOString(),\n    category: getFileCategory(mimeType),\n    description: getFileTypeDescription(mimeType),\n    icon: getFileTypeIcon(mimeType),\n    color: getFileTypeColor(mimeType),\n    isPreviewable: isPreviewSupported(mimeType),\n    previewType: getPreviewType(mimeType)\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}