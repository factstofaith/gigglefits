{"ast":null,"code":"/**\n * Feature Flags Service\n * \n * Service for managing feature flags to enable gradual rollout of features\n * and A/B testing in the application.\n */\n\n// Default feature flags configuration\nconst defaultFeatureFlags = {\n  // Core features\n  newDesignSystem: true,\n  enhancedErrorHandling: true,\n  advancedAnalytics: false,\n  // UI components\n  newNavigationBar: false,\n  enhancedDataTable: false,\n  newDashboardLayout: false,\n  // Features\n  multiTenantSupport: true,\n  advancedFileUpload: false,\n  enhancedDataVisualization: false,\n  // Experimental\n  betaFeatures: false,\n  experimentalUI: false\n};\n\n// Current feature flags state\nlet currentFeatureFlags = {\n  ...defaultFeatureFlags\n};\n\n// Override flags based on environment variables\nfunction initializeFromEnvironment() {\n  // Check for environment variable overrides\n  const envVars = typeof window !== 'undefined' && window.env ? window.env : typeof process !== 'undefined' && process.env ? process.env : {};\n  Object.keys(defaultFeatureFlags).forEach(flag => {\n    const envKey = `REACT_APP_FEATURE_${flag.toUpperCase()}`;\n    if (envVars[envKey] !== undefined) {\n      const value = typeof envVars[envKey] === 'string' ? envVars[envKey].toLowerCase() : envVars[envKey];\n      currentFeatureFlags[flag] = value === 'true' || value === '1' || value === true;\n    }\n  });\n\n  // Check for localStorage overrides (for development)\n  const isDevelopment = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'development' || typeof window !== 'undefined' && window.isDevelopment;\n  if (typeof localStorage !== 'undefined' && isDevelopment) {\n    try {\n      const localFlags = localStorage.getItem('featureFlags');\n      if (localFlags) {\n        const parsedFlags = JSON.parse(localFlags);\n        currentFeatureFlags = {\n          ...currentFeatureFlags,\n          ...parsedFlags\n        };\n      }\n    } catch (e) {\n      console.error('Error loading feature flags from localStorage:', e);\n    }\n  }\n  return currentFeatureFlags;\n}\n\n// Check if a feature is enabled\nfunction isFeatureEnabled(featureName) {\n  if (!(featureName in currentFeatureFlags)) {\n    console.warn(`Feature flag \"${featureName}\" is not defined`);\n    return false;\n  }\n  return currentFeatureFlags[featureName];\n}\n\n// Set a feature flag (for testing/development)\nfunction setFeatureFlag(featureName, value) {\n  if (!(featureName in currentFeatureFlags)) {\n    console.warn(`Feature flag \"${featureName}\" is not defined`);\n    return false;\n  }\n  currentFeatureFlags[featureName] = !!value;\n\n  // Save to localStorage in development\n  const isDevelopment = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'development' || typeof window !== 'undefined' && window.isDevelopment;\n  if (typeof localStorage !== 'undefined' && isDevelopment) {\n    try {\n      localStorage.setItem('featureFlags', JSON.stringify(currentFeatureFlags));\n    } catch (e) {\n      console.error('Error saving feature flags to localStorage:', e);\n    }\n  }\n  return true;\n}\n\n// Reset all feature flags to default values\nfunction resetFeatureFlags() {\n  currentFeatureFlags = {\n    ...defaultFeatureFlags\n  };\n\n  // Remove from localStorage in development\n  const isDevelopment = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'development' || typeof window !== 'undefined' && window.isDevelopment;\n  if (typeof localStorage !== 'undefined' && isDevelopment) {\n    try {\n      localStorage.removeItem('featureFlags');\n    } catch (e) {\n      console.error('Error removing feature flags from localStorage:', e);\n    }\n  }\n  return currentFeatureFlags;\n}\n\n// Get all feature flags\nfunction getAllFeatureFlags() {\n  return {\n    ...currentFeatureFlags\n  };\n}\n\n// React hook for using feature flags\nfunction createUseFeatureFlag() {\n  return function useFeatureFlag(featureName) {\n    // This is a placeholder - real implementation will happen in hooks\n    return isFeatureEnabled(featureName);\n  };\n}\n\n// Initialize on load\ninitializeFromEnvironment();\nexport default {\n  isEnabled: isFeatureEnabled,\n  setFlag: setFeatureFlag,\n  resetFlags: resetFeatureFlags,\n  getAllFlags: getAllFeatureFlags,\n  createUseFeatureFlag\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}