{"ast":null,"code":"/**\n * Node Panel\n *\n * A panel component that displays available node types for the flow canvas.\n * Users can drag nodes from this panel onto the canvas.\n *\n * @component\n */\n\nimport React, { memo, useCallback } from 'react';\nimport { Box, Paper, Typography, Divider, List, ListItem, ListItemIcon, ListItemText, Accordion, AccordionSummary, AccordionDetails, IconButton, Tooltip, Chip } from '@mui/material';\nimport {\n// Node type icons\nStorage as StorageIcon, CloudUpload as CloudUploadIcon, Transform as TransformIcon, FilterAlt as FilterIcon,\n// UI icons\nExpandMore as ExpandMoreIcon, Search as SearchIcon, Refresh as RefreshIcon, Info as InfoIcon,\n// Source node icons\nCloudDownload as CloudDownloadIcon, Database as DatabaseIcon, Api as ApiIcon,\n// Transform node icons\nSwapHoriz as SwapHorizIcon, Functions as FunctionsIcon, Code as CodeIcon, AutoAwesome as AutoAwesomeIcon,\n// Filter node icons\nRule as RuleIcon, FilterList as FilterListIcon, FindReplace as FindReplaceIcon } from '@mui/icons-material';\n\n/**\n * Node definition with metadata\n * \n * @typedef {Object} NodeDefinition\n * @property {string} id - Unique node identifier\n * @property {string} type - Node type (matches react-flow type)\n * @property {string} label - Display label for the node\n * @property {Function} icon - Icon component to display\n * @property {string} category - Category this node belongs to\n * @property {Array<string>} [permissions] - Required permissions to use this node\n * @property {string} [description] - Description of what the node does\n */\n\n/**\n * All available node definitions\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst NODE_DEFINITIONS = [\n// Source nodes\n{\n  id: 'sourceNode',\n  type: 'sourceNode',\n  label: 'Data Source',\n  icon: StorageIcon,\n  category: 'sources',\n  description: 'Starting point for data flow'\n}, {\n  id: 's3SourceNode',\n  type: 'sourceNode',\n  data: {\n    sourceType: 'S3'\n  },\n  label: 'S3 Source',\n  icon: CloudDownloadIcon,\n  category: 'sources',\n  description: 'Import data from Amazon S3'\n}, {\n  id: 'azureBlobSourceNode',\n  type: 'sourceNode',\n  data: {\n    sourceType: 'AZURE_BLOB'\n  },\n  label: 'Azure Blob Source',\n  icon: CloudDownloadIcon,\n  category: 'sources',\n  description: 'Import data from Azure Blob Storage'\n}, {\n  id: 'sharepointSourceNode',\n  type: 'sourceNode',\n  data: {\n    sourceType: 'SHAREPOINT'\n  },\n  label: 'SharePoint Source',\n  icon: CloudDownloadIcon,\n  category: 'sources',\n  description: 'Import data from SharePoint'\n}, {\n  id: 'apiSourceNode',\n  type: 'sourceNode',\n  data: {\n    sourceType: 'API'\n  },\n  label: 'API Source',\n  icon: ApiIcon,\n  category: 'sources',\n  description: 'Import data from external API'\n}, {\n  id: 'databaseSourceNode',\n  type: 'sourceNode',\n  data: {\n    sourceType: 'DATABASE'\n  },\n  label: 'Database Source',\n  icon: DatabaseIcon,\n  category: 'sources',\n  description: 'Import data from database',\n  permissions: ['database.read']\n},\n// Destination nodes\n{\n  id: 'destinationNode',\n  type: 'destinationNode',\n  label: 'Data Destination',\n  icon: CloudUploadIcon,\n  category: 'destinations',\n  description: 'Endpoint for data flow'\n}, {\n  id: 's3DestinationNode',\n  type: 'destinationNode',\n  data: {\n    destinationType: 'S3'\n  },\n  label: 'S3 Destination',\n  icon: CloudUploadIcon,\n  category: 'destinations',\n  description: 'Export data to Amazon S3'\n}, {\n  id: 'azureBlobDestinationNode',\n  type: 'destinationNode',\n  data: {\n    destinationType: 'AZURE_BLOB'\n  },\n  label: 'Azure Blob Destination',\n  icon: CloudUploadIcon,\n  category: 'destinations',\n  description: 'Export data to Azure Blob Storage'\n}, {\n  id: 'sharepointDestinationNode',\n  type: 'destinationNode',\n  data: {\n    destinationType: 'SHAREPOINT'\n  },\n  label: 'SharePoint Destination',\n  icon: CloudUploadIcon,\n  category: 'destinations',\n  description: 'Export data to SharePoint'\n}, {\n  id: 'apiDestinationNode',\n  type: 'destinationNode',\n  data: {\n    destinationType: 'API'\n  },\n  label: 'API Destination',\n  icon: ApiIcon,\n  category: 'destinations',\n  description: 'Export data to external API'\n}, {\n  id: 'databaseDestinationNode',\n  type: 'destinationNode',\n  data: {\n    destinationType: 'DATABASE'\n  },\n  label: 'Database Destination',\n  icon: DatabaseIcon,\n  category: 'destinations',\n  description: 'Export data to database',\n  permissions: ['database.write']\n},\n// Transformation nodes\n{\n  id: 'transformationNode',\n  type: 'transformationNode',\n  label: 'Transformation',\n  icon: TransformIcon,\n  category: 'transformations',\n  description: 'Transform data passing through'\n}, {\n  id: 'mappingTransformationNode',\n  type: 'transformationNode',\n  data: {\n    transformationType: 'MAPPING'\n  },\n  label: 'Field Mapping',\n  icon: SwapHorizIcon,\n  category: 'transformations',\n  description: 'Map fields from source to destination'\n}, {\n  id: 'formulaTransformationNode',\n  type: 'transformationNode',\n  data: {\n    transformationType: 'FORMULA'\n  },\n  label: 'Formula Transform',\n  icon: FunctionsIcon,\n  category: 'transformations',\n  description: 'Apply formulas to transform data'\n}, {\n  id: 'scriptTransformationNode',\n  type: 'transformationNode',\n  data: {\n    transformationType: 'SCRIPT'\n  },\n  label: 'Script Transform',\n  icon: CodeIcon,\n  category: 'transformations',\n  description: 'Use custom script to transform data',\n  permissions: ['script.execute']\n}, {\n  id: 'aiTransformationNode',\n  type: 'transformationNode',\n  data: {\n    transformationType: 'AI'\n  },\n  label: 'AI Transform',\n  icon: AutoAwesomeIcon,\n  category: 'transformations',\n  description: 'Use AI to enhance or analyze data',\n  permissions: ['ai.access']\n},\n// Filter nodes\n{\n  id: 'filterNode',\n  type: 'filterNode',\n  label: 'Filter',\n  icon: FilterIcon,\n  category: 'filters',\n  description: 'Filter data based on conditions'\n}, {\n  id: 'conditionFilterNode',\n  type: 'filterNode',\n  data: {\n    filterType: 'CONDITION'\n  },\n  label: 'Condition Filter',\n  icon: RuleIcon,\n  category: 'filters',\n  description: 'Filter data based on conditions'\n}, {\n  id: 'validationFilterNode',\n  type: 'filterNode',\n  data: {\n    filterType: 'VALIDATION'\n  },\n  label: 'Validation Filter',\n  icon: FilterIcon,\n  category: 'filters',\n  description: 'Validate data against rules'\n}, {\n  id: 'searchReplaceFilterNode',\n  type: 'filterNode',\n  data: {\n    filterType: 'SEARCH_REPLACE'\n  },\n  label: 'Search & Replace',\n  icon: FindReplaceIcon,\n  category: 'filters',\n  description: 'Find and replace values in data'\n}, {\n  id: 'listFilterNode',\n  type: 'filterNode',\n  data: {\n    filterType: 'LIST_FILTER'\n  },\n  label: 'List Filter',\n  icon: FilterListIcon,\n  category: 'filters',\n  description: 'Filter data using lists'\n}];\n\n// Predefined categories and their display order\nconst CATEGORIES = [{\n  id: 'sources',\n  label: 'Data Sources',\n  icon: StorageIcon,\n  defaultExpanded: true\n}, {\n  id: 'destinations',\n  label: 'Data Destinations',\n  icon: CloudUploadIcon,\n  defaultExpanded: true\n}, {\n  id: 'transformations',\n  label: 'Transformations',\n  icon: TransformIcon,\n  defaultExpanded: false\n}, {\n  id: 'filters',\n  label: 'Filters',\n  icon: FilterIcon,\n  defaultExpanded: false\n}];\n\n/**\n * Node Panel component\n * \n * @param {Object} props - Component props\n * @param {Array<string>} props.userPermissions - User permissions for showing/hiding nodes\n * @param {Function} props.onRefresh - Callback when the refresh button is clicked\n * @returns {JSX.Element} The NodePanel component\n */\nconst NodePanel = /*#__PURE__*/memo(_ref => {\n  let {\n    userPermissions = [],\n    onRefresh\n  } = _ref;\n  /**\n   * Check if user has permission to use a node\n   * @param {NodeDefinition} node - The node definition to check\n   * @returns {boolean} Whether the user has permission\n   */\n  const hasPermission = useCallback(node => {\n    // If node doesn't require permissions, allow access\n    if (!node.permissions || node.permissions.length === 0) {\n      return true;\n    }\n\n    // Check if user has any of the required permissions\n    return node.permissions.some(permission => userPermissions.includes(permission));\n  }, [userPermissions]);\n\n  /**\n   * Handle dragging a node from the panel\n   * @param {Event} event - The drag event\n   * @param {NodeDefinition} node - The node being dragged\n   */\n  const onDragStart = useCallback((event, node) => {\n    // Set the transfer data to the node type\n    event.dataTransfer.setData('application/reactflow/type', node.type);\n\n    // If node has custom data, include it\n    if (node.data) {\n      event.dataTransfer.setData('application/reactflow/data', JSON.stringify(node.data));\n    }\n\n    // Set the drag image\n    event.dataTransfer.effectAllowed = 'move';\n  }, []);\n  return /*#__PURE__*/_jsxs(Paper, {\n    elevation: 2,\n    sx: {\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxs(Box, {\n      sx: {\n        p: 1,\n        backgroundColor: 'primary.main',\n        color: 'primary.contrastText',\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"subtitle1\",\n        sx: {\n          flexGrow: 1\n        },\n        children: \"Flow Nodes\"\n      }), /*#__PURE__*/_jsx(Tooltip, {\n        title: \"Refresh Available Nodes\",\n        children: /*#__PURE__*/_jsx(IconButton, {\n          size: \"small\",\n          onClick: onRefresh,\n          sx: {\n            color: 'inherit'\n          },\n          children: /*#__PURE__*/_jsx(RefreshIcon, {\n            fontSize: \"small\"\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Box, {\n      sx: {\n        p: 1,\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsx(SearchIcon, {\n        sx: {\n          mr: 1,\n          color: 'text.secondary'\n        }\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: \"Search nodes...\"\n      })]\n    }), /*#__PURE__*/_jsx(Divider, {}), /*#__PURE__*/_jsx(Box, {\n      sx: {\n        flexGrow: 1,\n        overflow: 'auto',\n        p: 1\n      },\n      children: CATEGORIES.map(category => {\n        // Filter nodes by category and permission\n        const categoryNodes = NODE_DEFINITIONS.filter(node => node.category === category.id && hasPermission(node));\n\n        // Skip empty categories\n        if (categoryNodes.length === 0) {\n          return null;\n        }\n        return /*#__PURE__*/_jsxs(Accordion, {\n          defaultExpanded: category.defaultExpanded,\n          disableGutters: true,\n          sx: {\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsx(AccordionSummary, {\n            expandIcon: /*#__PURE__*/_jsx(ExpandMoreIcon, {}),\n            children: /*#__PURE__*/_jsxs(Box, {\n              sx: {\n                display: 'flex',\n                alignItems: 'center'\n              },\n              children: [/*#__PURE__*/_jsx(category.icon, {\n                sx: {\n                  mr: 1\n                }\n              }), /*#__PURE__*/_jsx(Typography, {\n                children: category.label\n              }), /*#__PURE__*/_jsx(Chip, {\n                label: categoryNodes.length,\n                size: \"small\",\n                sx: {\n                  ml: 1\n                },\n                color: \"primary\"\n              })]\n            })\n          }), /*#__PURE__*/_jsx(AccordionDetails, {\n            sx: {\n              p: 0\n            },\n            children: /*#__PURE__*/_jsx(List, {\n              dense: true,\n              disablePadding: true,\n              children: categoryNodes.map(node => {\n                const NodeIcon = node.icon;\n                return /*#__PURE__*/_jsxs(ListItem, {\n                  draggable: true,\n                  onDragStart: event => onDragStart(event, node),\n                  sx: {\n                    cursor: 'grab',\n                    '&:hover': {\n                      backgroundColor: 'action.hover'\n                    },\n                    borderLeft: '3px solid',\n                    borderLeftColor: node.category === 'sources' ? 'success.main' : node.category === 'destinations' ? 'info.main' : node.category === 'transformations' ? 'warning.main' : 'secondary.main'\n                  },\n                  children: [/*#__PURE__*/_jsx(ListItemIcon, {\n                    children: /*#__PURE__*/_jsx(NodeIcon, {\n                      fontSize: \"small\"\n                    })\n                  }), /*#__PURE__*/_jsx(ListItemText, {\n                    primary: node.label\n                  }), node.description && /*#__PURE__*/_jsx(Tooltip, {\n                    title: node.description,\n                    children: /*#__PURE__*/_jsx(InfoIcon, {\n                      fontSize: \"small\",\n                      color: \"action\"\n                    })\n                  })]\n                }, node.id);\n              })\n            })\n          })]\n        }, category.id);\n      })\n    }), /*#__PURE__*/_jsx(Box, {\n      sx: {\n        p: 1,\n        borderTop: 1,\n        borderColor: 'divider'\n      },\n      children: /*#__PURE__*/_jsx(Typography, {\n        variant: \"caption\",\n        color: \"text.secondary\",\n        children: \"Drag and drop nodes onto the canvas\"\n      })\n    })]\n  });\n});\nexport default NodePanel;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}