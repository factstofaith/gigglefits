{"ast":null,"code":"/**\n * FilePreview Component\n * \n * A versatile component for previewing different file types.\n * Supports text, images, PDFs, and code files with syntax highlighting.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress, Paper, Typography, Tabs, Tab, Divider, Tooltip, IconButton, useTheme } from '@mui/material';\n\n// Icons\nimport CodeIcon from '@mui/icons-material/Code';\nimport DataObjectIcon from '@mui/icons-material/DataObject';\nimport TableViewIcon from '@mui/icons-material/TableView';\nimport TextFieldsIcon from '@mui/icons-material/TextFields';\nimport TerminalIcon from '@mui/icons-material/Terminal';\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport FullscreenIcon from '@mui/icons-material/Fullscreen';\nimport FullscreenExitIcon from '@mui/icons-material/FullscreenExit';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport BrokenImageIcon from '@mui/icons-material/BrokenImage';\n\n// File type utilities\nimport { getPreviewType, getSyntaxHighlightLanguage, generateFileMetadata, isPreviewSupported } from \"../../utils/fileTypeUtils\";\n\n// PlaceholderDisplay component for unsupported file types\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nconst PlaceholderDisplay = _ref => {\n  let {\n    error,\n    fileType,\n    onDownload\n  } = _ref;\n  return /*#__PURE__*/_jsxs(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      p: 4,\n      height: '100%',\n      bgcolor: 'background.default'\n    },\n    children: [error ? /*#__PURE__*/_jsx(ErrorOutlineIcon, {\n      sx: {\n        fontSize: 64,\n        color: 'error.main',\n        mb: 2\n      }\n    }) : /*#__PURE__*/_jsx(BrokenImageIcon, {\n      sx: {\n        fontSize: 64,\n        color: 'action.disabled',\n        mb: 2\n      }\n    }), /*#__PURE__*/_jsx(Typography, {\n      variant: \"h6\",\n      color: \"text.secondary\",\n      align: \"center\",\n      gutterBottom: true,\n      children: error ? 'Error Loading Preview' : 'Preview Not Available'\n    }), /*#__PURE__*/_jsx(Typography, {\n      variant: \"body2\",\n      color: \"text.secondary\",\n      align: \"center\",\n      paragraph: true,\n      children: error ? 'There was an error loading the file preview. Please try downloading the file instead.' : `This file type (${fileType}) is not supported for preview. You can download the file to view it.`\n    }), /*#__PURE__*/_jsx(Button, {\n      variant: \"outlined\",\n      startIcon: /*#__PURE__*/_jsx(DownloadIcon, {}),\n      onClick: onDownload,\n      sx: {\n        mt: 2\n      },\n      children: \"Download File\"\n    })]\n  });\n};\n\n// ImagePreview component for image files\nconst ImagePreview = _ref2 => {\n  let {\n    url,\n    alt,\n    error,\n    onError\n  } = _ref2;\n  return /*#__PURE__*/_jsx(Box, {\n    sx: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: '100%',\n      overflow: 'auto',\n      bgcolor: 'background.default'\n    },\n    children: error ? /*#__PURE__*/_jsx(PlaceholderDisplay, {\n      error: error,\n      fileType: \"image\"\n    }) : /*#__PURE__*/_jsx(\"img\", {\n      src: url,\n      alt: alt || 'File preview',\n      onError: onError,\n      style: {\n        maxWidth: '100%',\n        maxHeight: '100%',\n        objectFit: 'contain'\n      }\n    })\n  });\n};\n\n// PDFPreview component for PDF files\nconst PDFPreview = _ref3 => {\n  let {\n    url,\n    error\n  } = _ref3;\n  return /*#__PURE__*/_jsx(Box, {\n    sx: {\n      height: '100%',\n      overflow: 'hidden'\n    },\n    children: error ? /*#__PURE__*/_jsx(PlaceholderDisplay, {\n      error: error,\n      fileType: \"PDF\"\n    }) : /*#__PURE__*/_jsx(\"iframe\", {\n      src: url,\n      title: \"PDF Preview\",\n      width: \"100%\",\n      height: \"100%\",\n      style: {\n        border: 'none'\n      },\n      children: /*#__PURE__*/_jsx(\"p\", {\n        children: \"Your browser does not support PDF previews.\"\n      })\n    })\n  });\n};\n\n// TextPreview component for text files\nconst TextPreview = _ref4 => {\n  let {\n    content,\n    error,\n    mimeType\n  } = _ref4;\n  const [copied, setCopied] = useState(false);\n  const handleCopy = () => {\n    navigator.clipboard.writeText(content).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }).catch(err => console.error('Failed to copy:', err));\n  };\n\n  // Determine if content should be treated as code\n  const isCode = mimeType && (mimeType.includes('javascript') || mimeType.includes('json') || mimeType.includes('xml') || mimeType.includes('html') || mimeType.includes('css'));\n  return /*#__PURE__*/_jsx(Box, {\n    sx: {\n      position: 'relative',\n      height: '100%'\n    },\n    children: error ? /*#__PURE__*/_jsx(PlaceholderDisplay, {\n      error: error,\n      fileType: \"text\"\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Box, {\n        sx: {\n          position: 'absolute',\n          top: 8,\n          right: 8,\n          zIndex: 10\n        },\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          title: copied ? \"Copied!\" : \"Copy to clipboard\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            onClick: handleCopy,\n            size: \"small\",\n            color: copied ? \"success\" : \"default\",\n            children: /*#__PURE__*/_jsx(ContentCopyIcon, {\n              fontSize: \"small\"\n            })\n          })\n        })\n      }), /*#__PURE__*/_jsx(Box, {\n        sx: {\n          height: '100%',\n          overflow: 'auto',\n          bgcolor: isCode ? 'grey.900' : 'background.paper',\n          color: isCode ? 'grey.300' : 'text.primary',\n          p: 2,\n          fontFamily: 'monospace',\n          fontSize: '0.875rem',\n          whiteSpace: 'pre-wrap',\n          wordBreak: 'break-word',\n          borderRadius: 1\n        },\n        children: content || 'No content available'\n      })]\n    })\n  });\n};\n\n// CodePreview component for code files with syntax highlighting\n// This is a simple version - in a production app, you'd use a library like prism.js or highlight.js\nconst CodePreview = _ref5 => {\n  let {\n    content,\n    language,\n    error\n  } = _ref5;\n  const [copied, setCopied] = useState(false);\n  const theme = useTheme();\n  const handleCopy = () => {\n    navigator.clipboard.writeText(content).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }).catch(err => console.error('Failed to copy:', err));\n  };\n\n  // Simple syntax highlighting styles - in a real app, use a proper syntax highlighting library\n  const codeStyle = {\n    fontFamily: 'monospace',\n    whiteSpace: 'pre-wrap',\n    wordBreak: 'break-word',\n    padding: theme.spacing(2),\n    backgroundColor: theme.palette.mode === 'dark' ? '#1e1e1e' : '#f5f5f5',\n    color: theme.palette.mode === 'dark' ? '#d4d4d4' : '#333333',\n    borderRadius: 4,\n    overflowX: 'auto',\n    height: '100%'\n  };\n  return /*#__PURE__*/_jsx(Box, {\n    sx: {\n      position: 'relative',\n      height: '100%'\n    },\n    children: error ? /*#__PURE__*/_jsx(PlaceholderDisplay, {\n      error: error,\n      fileType: \"code\"\n    }) : /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Box, {\n        sx: {\n          position: 'absolute',\n          top: 8,\n          right: 8,\n          zIndex: 10,\n          display: 'flex'\n        },\n        children: [/*#__PURE__*/_jsx(Tooltip, {\n          title: \"Language: \",\n          children: /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              display: 'flex',\n              alignItems: 'center',\n              mr: 1,\n              px: 1,\n              py: 0.5,\n              borderRadius: 1,\n              bgcolor: 'background.paper',\n              fontSize: '0.75rem',\n              color: 'text.secondary',\n              border: '1px solid',\n              borderColor: 'divider'\n            },\n            children: [/*#__PURE__*/_jsx(CodeIcon, {\n              fontSize: \"inherit\",\n              sx: {\n                mr: 0.5\n              }\n            }), language || 'plaintext']\n          })\n        }), /*#__PURE__*/_jsx(Tooltip, {\n          title: copied ? \"Copied!\" : \"Copy to clipboard\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            onClick: handleCopy,\n            size: \"small\",\n            color: copied ? \"success\" : \"default\",\n            children: /*#__PURE__*/_jsx(ContentCopyIcon, {\n              fontSize: \"small\"\n            })\n          })\n        })]\n      }), /*#__PURE__*/_jsx(Box, {\n        sx: {\n          height: '100%',\n          overflow: 'auto'\n        },\n        children: /*#__PURE__*/_jsx(\"pre\", {\n          style: codeStyle,\n          children: /*#__PURE__*/_jsx(\"code\", {\n            children: content || '// No content available'\n          })\n        })\n      })]\n    })\n  });\n};\n\n/**\n * FilePreview component - Universal file preview component\n * @component\n */\nconst FilePreview = _ref6 => {\n  let {\n    file,\n    url,\n    content,\n    mimeType,\n    filename,\n    maxHeight,\n    fullWidth,\n    showToolbar,\n    onDownload,\n    isLoading,\n    error\n  } = _ref6;\n  const [expanded, setExpanded] = useState(false);\n  const [activeTab, setActiveTab] = useState(0);\n  const [previewError, setPreviewError] = useState(error || null);\n  const [fileMetadata, setFileMetadata] = useState(null);\n\n  // Generate file metadata\n  useEffect(() => {\n    const fileObj = file || {\n      name: filename,\n      type: mimeType,\n      url: url\n    };\n    setFileMetadata(generateFileMetadata(fileObj));\n  }, [file, filename, mimeType, url]);\n\n  // Reset error state when props change\n  useEffect(() => {\n    setPreviewError(error || null);\n  }, [error, url, content, file]);\n  if (!fileMetadata) {\n    return /*#__PURE__*/_jsx(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'center',\n        py: 4\n      },\n      children: /*#__PURE__*/_jsx(CircularProgress, {})\n    });\n  }\n\n  // Determine preview type\n  const previewType = getPreviewType(fileMetadata.mimeType);\n\n  // Handle image load error\n  const handleImageError = () => {\n    setPreviewError('Failed to load image');\n  };\n\n  // Handle download\n  const handleDownload = () => {\n    if (onDownload) {\n      onDownload();\n    } else if (url) {\n      // Create a temporary anchor and trigger download\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileMetadata.filename || 'download';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  };\n\n  // Toggle fullscreen mode\n  const toggleExpanded = () => {\n    setExpanded(!expanded);\n  };\n\n  // Handle tab change\n  const handleTabChange = (event, newValue) => {\n    setActiveTab(newValue);\n  };\n\n  // Determine if there's something to preview\n  const hasPreview = isPreviewSupported(fileMetadata.mimeType) && (url || content);\n  const previewHeight = expanded ? '80vh' : maxHeight || '400px';\n\n  // Render preview based on file type\n  const renderPreview = () => {\n    if (isLoading) {\n      return /*#__PURE__*/_jsx(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '100%'\n        },\n        children: /*#__PURE__*/_jsx(CircularProgress, {})\n      });\n    }\n    if (previewError || !hasPreview) {\n      return /*#__PURE__*/_jsx(PlaceholderDisplay, {\n        error: previewError,\n        fileType: fileMetadata.description,\n        onDownload: handleDownload\n      });\n    }\n    switch (previewType) {\n      case 'image':\n        return /*#__PURE__*/_jsx(ImagePreview, {\n          url: url,\n          alt: fileMetadata.filename,\n          onError: handleImageError,\n          error: previewError\n        });\n      case 'pdf':\n        return /*#__PURE__*/_jsx(PDFPreview, {\n          url: url,\n          error: previewError\n        });\n      case 'code':\n        return /*#__PURE__*/_jsx(CodePreview, {\n          content: content,\n          language: getSyntaxHighlightLanguage(fileMetadata.mimeType),\n          error: previewError\n        });\n      case 'text':\n        return /*#__PURE__*/_jsx(TextPreview, {\n          content: content,\n          mimeType: fileMetadata.mimeType,\n          error: previewError\n        });\n      default:\n        return /*#__PURE__*/_jsx(PlaceholderDisplay, {\n          fileType: fileMetadata.description,\n          onDownload: handleDownload\n        });\n    }\n  };\n\n  // Render content based on active tab\n  const renderTabContent = () => {\n    if (activeTab === 0) {\n      return renderPreview();\n    }\n    if (activeTab === 1) {\n      // File details tab\n      return /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"File Information\"\n        }), /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            display: 'grid',\n            gridTemplateColumns: '1fr 2fr',\n            gap: 1\n          },\n          children: [/*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle2\",\n            children: \"Filename:\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"body2\",\n            children: fileMetadata.filename\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle2\",\n            children: \"Type:\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"body2\",\n            children: fileMetadata.description\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle2\",\n            children: \"MIME Type:\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"body2\",\n            sx: {\n              fontFamily: 'monospace'\n            },\n            children: fileMetadata.mimeType\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle2\",\n            children: \"Size:\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"body2\",\n            children: formatFileSize(fileMetadata.size)\n          }), fileMetadata.lastModified && /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"subtitle2\",\n              children: \"Last Modified:\"\n            }), /*#__PURE__*/_jsx(Typography, {\n              variant: \"body2\",\n              children: new Date(fileMetadata.lastModified).toLocaleString()\n            })]\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle2\",\n            children: \"Preview Status:\"\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"body2\",\n            children: fileMetadata.isPreviewable ? 'Preview available' : 'Preview not supported for this file type'\n          })]\n        })]\n      });\n    }\n    return null;\n  };\n\n  // Format file size\n  const formatFileSize = bytes => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  // Icon based on file type\n  const getFileTypeIcon = () => {\n    switch (fileMetadata.previewType) {\n      case 'code':\n        return /*#__PURE__*/_jsx(CodeIcon, {});\n      case 'text':\n        if (fileMetadata.mimeType === 'text/csv' || fileMetadata.mimeType === 'text/tab-separated-values') {\n          return /*#__PURE__*/_jsx(TableViewIcon, {});\n        }\n        if (fileMetadata.mimeType === 'application/json') {\n          return /*#__PURE__*/_jsx(DataObjectIcon, {});\n        }\n        return /*#__PURE__*/_jsx(TextFieldsIcon, {});\n      default:\n        return /*#__PURE__*/_jsx(TerminalIcon, {});\n    }\n  };\n  return /*#__PURE__*/_jsxs(Paper, {\n    variant: \"outlined\",\n    sx: {\n      height: previewHeight,\n      width: fullWidth ? '100%' : 'auto',\n      display: 'flex',\n      flexDirection: 'column',\n      overflow: 'hidden',\n      transition: 'height 0.3s ease'\n    },\n    children: [showToolbar && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          px: 2,\n          py: 1,\n          borderBottom: 1,\n          borderColor: 'divider'\n        },\n        children: [/*#__PURE__*/_jsxs(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsx(Box, {\n            sx: {\n              mr: 1,\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: getFileTypeIcon()\n          }), /*#__PURE__*/_jsx(Typography, {\n            variant: \"subtitle1\",\n            noWrap: true,\n            sx: {\n              maxWidth: '300px'\n            },\n            children: fileMetadata.filename\n          })]\n        }), /*#__PURE__*/_jsxs(Box, {\n          children: [/*#__PURE__*/_jsx(Tooltip, {\n            title: \"Download\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              onClick: handleDownload,\n              size: \"small\",\n              children: /*#__PURE__*/_jsx(DownloadIcon, {})\n            })\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            title: expanded ? \"Exit Fullscreen\" : \"Fullscreen\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              onClick: toggleExpanded,\n              size: \"small\",\n              children: expanded ? /*#__PURE__*/_jsx(FullscreenExitIcon, {}) : /*#__PURE__*/_jsx(FullscreenIcon, {})\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Tabs, {\n        value: activeTab,\n        onChange: handleTabChange,\n        sx: {\n          px: 2,\n          borderBottom: 1,\n          borderColor: 'divider'\n        },\n        children: [/*#__PURE__*/_jsx(Tab, {\n          label: \"Preview\"\n        }), /*#__PURE__*/_jsx(Tab, {\n          label: \"Details\"\n        })]\n      })]\n    }), /*#__PURE__*/_jsx(Box, {\n      sx: {\n        flexGrow: 1,\n        overflow: 'auto'\n      },\n      children: renderTabContent()\n    })]\n  });\n};\nFilePreview.defaultProps = {\n  maxHeight: '400px',\n  fullWidth: true,\n  showToolbar: true,\n  isLoading: false\n};\nexport default FilePreview;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}