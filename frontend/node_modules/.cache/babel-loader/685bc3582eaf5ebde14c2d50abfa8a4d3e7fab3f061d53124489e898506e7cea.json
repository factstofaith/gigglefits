{"ast":null,"code":"// authService.js\n// -----------------------------------------------------------------------------\n// Authentication service supporting Office 365 and Gmail authentication\nconst AUTH_TOKEN_KEY='auth_token';const USER_INFO_KEY='user_info';// Mock authentication endpoints - in a real app these would point to your backend\nconst API_ENDPOINTS={login:'/api/auth/login',logout:'/api/auth/logout',office365:'/api/auth/office365',gmail:'/api/auth/gmail',userInfo:'/api/auth/user',refreshToken:'/api/auth/refresh'};// Mock implementation for local development\n// In a real app, these would make API calls to your backend\nexport const authService={// Initialize auth on app start\ninitialize:()=>{const token=localStorage.getItem(AUTH_TOKEN_KEY);const userInfo=JSON.parse(localStorage.getItem(USER_INFO_KEY)||'null');return{token,userInfo};},// Login with username and password\nlogin:async(username,password)=>{// Mock successful login\nconst token='mock_token_'+Math.random().toString(36).substring(2);const userInfo={id:'user_1',username,email:`${username}@example.com`,name:username.charAt(0).toUpperCase()+username.slice(1),role:username==='admin'?'admin':'user'};localStorage.setItem(AUTH_TOKEN_KEY,token);localStorage.setItem(USER_INFO_KEY,JSON.stringify(userInfo));return{token,userInfo};},// Logout\nlogout:async()=>{localStorage.removeItem(AUTH_TOKEN_KEY);localStorage.removeItem(USER_INFO_KEY);return true;},// Office 365 authentication\nloginWithOffice365:async()=>{// In a real app, this would redirect to Microsoft's OAuth endpoint\nwindow.alert('Redirecting to Office 365 login...');// Mock successful login after OAuth flow\nconst token='mock_o365_token_'+Math.random().toString(36).substring(2);const userInfo={id:'o365_user_1',username:'o365user',email:'user@company.onmicrosoft.com',name:'Office 365 User',role:'user',provider:'office365'};localStorage.setItem(AUTH_TOKEN_KEY,token);localStorage.setItem(USER_INFO_KEY,JSON.stringify(userInfo));return{token,userInfo};},// Gmail authentication\nloginWithGmail:async()=>{// In a real app, this would redirect to Google's OAuth endpoint\nwindow.alert('Redirecting to Gmail login...');// Mock successful login after OAuth flow\nconst token='mock_gmail_token_'+Math.random().toString(36).substring(2);const userInfo={id:'gmail_user_1',username:'gmailuser',email:'user@gmail.com',name:'Gmail User',role:'user',provider:'gmail'};localStorage.setItem(AUTH_TOKEN_KEY,token);localStorage.setItem(USER_INFO_KEY,JSON.stringify(userInfo));return{token,userInfo};},// Get current user info\ngetCurrentUser:async()=>{const userInfo=JSON.parse(localStorage.getItem(USER_INFO_KEY)||'null');return userInfo;},// Check if user is authenticated\nisAuthenticated:()=>{return!!localStorage.getItem(AUTH_TOKEN_KEY);},// Check if user is an admin\nisAdmin:async()=>{const userInfo=JSON.parse(localStorage.getItem(USER_INFO_KEY)||'null');return(userInfo===null||userInfo===void 0?void 0:userInfo.role)==='admin';},// Refresh token\nrefreshToken:async()=>{// In a real app, this would send the refresh token to get a new access token\nconst token='refreshed_token_'+Math.random().toString(36).substring(2);localStorage.setItem(AUTH_TOKEN_KEY,token);return token;}};export default authService;","map":{"version":3,"names":["AUTH_TOKEN_KEY","USER_INFO_KEY","API_ENDPOINTS","login","logout","office365","gmail","userInfo","refreshToken","authService","initialize","token","localStorage","getItem","JSON","parse","username","password","Math","random","toString","substring","id","email","name","charAt","toUpperCase","slice","role","setItem","stringify","removeItem","loginWithOffice365","window","alert","provider","loginWithGmail","getCurrentUser","isAuthenticated","isAdmin"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/services/authService.js"],"sourcesContent":["// authService.js\n// -----------------------------------------------------------------------------\n// Authentication service supporting Office 365 and Gmail authentication\n\nconst AUTH_TOKEN_KEY = 'auth_token';\nconst USER_INFO_KEY = 'user_info';\n\n// Mock authentication endpoints - in a real app these would point to your backend\nconst API_ENDPOINTS = {\n  login: '/api/auth/login',\n  logout: '/api/auth/logout',\n  office365: '/api/auth/office365',\n  gmail: '/api/auth/gmail',\n  userInfo: '/api/auth/user',\n  refreshToken: '/api/auth/refresh'\n};\n\n// Mock implementation for local development\n// In a real app, these would make API calls to your backend\nexport const authService = {\n  // Initialize auth on app start\n  initialize: () => {\n    const token = localStorage.getItem(AUTH_TOKEN_KEY);\n    const userInfo = JSON.parse(localStorage.getItem(USER_INFO_KEY) || 'null');\n    return { token, userInfo };\n  },\n\n  // Login with username and password\n  login: async (username, password) => {\n    // Mock successful login\n    const token = 'mock_token_' + Math.random().toString(36).substring(2);\n    const userInfo = {\n      id: 'user_1',\n      username,\n      email: `${username}@example.com`,\n      name: username.charAt(0).toUpperCase() + username.slice(1),\n      role: username === 'admin' ? 'admin' : 'user'\n    };\n    \n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n    \n    return { token, userInfo };\n  },\n\n  // Logout\n  logout: async () => {\n    localStorage.removeItem(AUTH_TOKEN_KEY);\n    localStorage.removeItem(USER_INFO_KEY);\n    return true;\n  },\n\n  // Office 365 authentication\n  loginWithOffice365: async () => {\n    // In a real app, this would redirect to Microsoft's OAuth endpoint\n    window.alert('Redirecting to Office 365 login...');\n    \n    // Mock successful login after OAuth flow\n    const token = 'mock_o365_token_' + Math.random().toString(36).substring(2);\n    const userInfo = {\n      id: 'o365_user_1',\n      username: 'o365user',\n      email: 'user@company.onmicrosoft.com',\n      name: 'Office 365 User',\n      role: 'user',\n      provider: 'office365'\n    };\n    \n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n    \n    return { token, userInfo };\n  },\n\n  // Gmail authentication\n  loginWithGmail: async () => {\n    // In a real app, this would redirect to Google's OAuth endpoint\n    window.alert('Redirecting to Gmail login...');\n    \n    // Mock successful login after OAuth flow\n    const token = 'mock_gmail_token_' + Math.random().toString(36).substring(2);\n    const userInfo = {\n      id: 'gmail_user_1',\n      username: 'gmailuser',\n      email: 'user@gmail.com',\n      name: 'Gmail User',\n      role: 'user',\n      provider: 'gmail'\n    };\n    \n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    localStorage.setItem(USER_INFO_KEY, JSON.stringify(userInfo));\n    \n    return { token, userInfo };\n  },\n\n  // Get current user info\n  getCurrentUser: async () => {\n    const userInfo = JSON.parse(localStorage.getItem(USER_INFO_KEY) || 'null');\n    return userInfo;\n  },\n\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    return !!localStorage.getItem(AUTH_TOKEN_KEY);\n  },\n\n  // Check if user is an admin\n  isAdmin: async () => {\n    const userInfo = JSON.parse(localStorage.getItem(USER_INFO_KEY) || 'null');\n    return userInfo?.role === 'admin';\n  },\n\n  // Refresh token\n  refreshToken: async () => {\n    // In a real app, this would send the refresh token to get a new access token\n    const token = 'refreshed_token_' + Math.random().toString(36).substring(2);\n    localStorage.setItem(AUTH_TOKEN_KEY, token);\n    return token;\n  }\n};\n\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}