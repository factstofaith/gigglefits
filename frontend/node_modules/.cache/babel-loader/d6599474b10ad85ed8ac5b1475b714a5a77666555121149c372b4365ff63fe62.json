{"ast":null,"code":"/**\n * Transformation Node\n *\n * A custom node for data transformations in the integration flow canvas.\n * This node represents a data transformation operation.\n *\n * @component\n */\n\nimport React, { memo } from 'react';\nimport { Handle } from 'reactflow';\nimport { Box, Typography, Paper, IconButton, Tooltip, Badge, Chip } from '@mui/material';\nimport { Transform as TransformIcon, Code as CodeIcon, Functions as FunctionsIcon, AutoAwesome as AutoAwesomeIcon, SwapHoriz as SwapHorizIcon, Settings as SettingsIcon, Error as ErrorIcon, Check as CheckIcon } from '@mui/icons-material';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst TRANSFORMATION_TYPES = {\n  MAPPING: {\n    icon: SwapHorizIcon,\n    color: '#ff9800',\n    // Orange\n    label: 'Mapping'\n  },\n  FORMULA: {\n    icon: FunctionsIcon,\n    color: '#ff9800',\n    // Orange\n    label: 'Formula'\n  },\n  SCRIPT: {\n    icon: CodeIcon,\n    color: '#ff9800',\n    // Orange\n    label: 'Script'\n  },\n  AI: {\n    icon: AutoAwesomeIcon,\n    color: '#ff9800',\n    // Orange\n    label: 'AI Transform'\n  },\n  default: {\n    icon: TransformIcon,\n    color: '#ff9800',\n    // Orange\n    label: 'Transform'\n  }\n};\n\n/**\n * Transformation Node component\n */\nconst TransformationNode = /*#__PURE__*/memo(_ref => {\n  let {\n    id,\n    data,\n    isConnectable,\n    selected\n  } = _ref;\n  const transformationType = data.transformationType || 'default';\n  const transformationConfig = TRANSFORMATION_TYPES[transformationType] || TRANSFORMATION_TYPES.default;\n  const TransformationIconComponent = transformationConfig.icon;\n  const hasError = data.error !== undefined;\n  const isConfigured = data.isConfigured || false;\n  return /*#__PURE__*/_jsxs(Paper, {\n    elevation: selected ? 3 : 1,\n    sx: {\n      minHeight: 80,\n      width: 200,\n      padding: 1,\n      borderRadius: 1,\n      borderWidth: 2,\n      borderStyle: 'solid',\n      borderColor: selected ? 'primary.main' : transformationConfig.color,\n      backgroundColor: 'background.paper',\n      position: 'relative'\n    },\n    children: [/*#__PURE__*/_jsx(Handle, {\n      type: \"target\",\n      position: \"left\",\n      id: \"input\",\n      style: {\n        left: -8,\n        top: '50%',\n        width: 12,\n        height: 12,\n        background: transformationConfig.color,\n        border: '2px solid #fff'\n      },\n      isConnectable: isConnectable\n    }), /*#__PURE__*/_jsx(Handle, {\n      type: \"source\",\n      position: \"right\",\n      id: \"output\",\n      style: {\n        right: -8,\n        top: '50%',\n        width: 12,\n        height: 12,\n        background: transformationConfig.color,\n        border: '2px solid #fff'\n      },\n      isConnectable: isConnectable\n    }), /*#__PURE__*/_jsxs(Box, {\n      sx: {\n        display: 'flex',\n        alignItems: 'center',\n        mb: 1,\n        backgroundColor: transformationConfig.color,\n        color: '#fff',\n        marginLeft: -1,\n        marginRight: -1,\n        marginTop: -1,\n        padding: 0.5,\n        borderTopLeftRadius: 4,\n        borderTopRightRadius: 4\n      },\n      children: [/*#__PURE__*/_jsx(TransformationIconComponent, {\n        fontSize: \"small\",\n        sx: {\n          mr: 1\n        }\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"subtitle2\",\n        sx: {\n          flexGrow: 1\n        },\n        children: transformationConfig.label\n      }), /*#__PURE__*/_jsx(Badge, {\n        color: hasError ? \"error\" : \"success\",\n        variant: \"dot\",\n        invisible: !isConfigured,\n        children: /*#__PURE__*/_jsx(Tooltip, {\n          title: \"Configure Transformation\",\n          children: /*#__PURE__*/_jsx(IconButton, {\n            size: \"small\",\n            sx: {\n              color: '#fff',\n              '&:hover': {\n                backgroundColor: 'rgba(255, 255, 255, 0.2)'\n              }\n            },\n            children: /*#__PURE__*/_jsx(SettingsIcon, {\n              fontSize: \"small\"\n            })\n          })\n        })\n      })]\n    }), /*#__PURE__*/_jsxs(Box, {\n      sx: {\n        p: 1\n      },\n      children: [/*#__PURE__*/_jsx(Typography, {\n        variant: \"body2\",\n        sx: {\n          mb: 0.5\n        },\n        children: data.label || 'Data Transformation'\n      }), data.fields && data.fields.length > 0 && /*#__PURE__*/_jsx(Box, {\n        sx: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: 0.5,\n          my: 0.5\n        },\n        children: /*#__PURE__*/_jsx(Chip, {\n          label: `${data.fields.length} field${data.fields.length > 1 ? 's' : ''}`,\n          size: \"small\",\n          variant: \"outlined\",\n          color: \"primary\"\n        })\n      }), hasError ? /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          color: 'error.main'\n        },\n        children: [/*#__PURE__*/_jsx(ErrorIcon, {\n          fontSize: \"small\",\n          sx: {\n            mr: 0.5\n          }\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          color: \"error\",\n          children: data.error\n        })]\n      }) : isConfigured ? /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          color: 'success.main'\n        },\n        children: [/*#__PURE__*/_jsx(CheckIcon, {\n          fontSize: \"small\",\n          sx: {\n            mr: 0.5\n          }\n        }), /*#__PURE__*/_jsx(Typography, {\n          variant: \"caption\",\n          color: \"success.main\",\n          children: \"Configured\"\n        })]\n      }) : /*#__PURE__*/_jsx(Typography, {\n        variant: \"caption\",\n        color: \"text.secondary\",\n        children: \"Click to configure\"\n      })]\n    })]\n  });\n});\nexport default TransformationNode;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}