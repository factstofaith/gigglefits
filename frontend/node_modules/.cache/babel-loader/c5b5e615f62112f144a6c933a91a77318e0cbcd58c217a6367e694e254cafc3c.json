{"ast":null,"code":"/**\n * Webhook Configuration Component\n *\n * A comprehensive component for configuring webhook endpoints with security\n * options, payload validation, and testing capabilities.\n *\n * @component\n */\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { Box, Button, Card, CardContent, Collapse, Divider, Grid, IconButton, InputAdornment, ListItemIcon, ListItemText, Menu, MenuItem, Paper, Tab, Tabs, TextField, Typography, Alert, AlertTitle, FormControl, FormControlLabel, Radio, RadioGroup, Select, InputLabel, FormHelperText, Switch, Tooltip, CircularProgress, Chip, List, ListItem, Drawer, Slider } from '@mui/material';\nimport { Add as AddIcon, Check as CheckIcon, Close as CloseIcon, Delete as DeleteIcon, Edit as EditIcon, Refresh as RefreshIcon, Code as CodeIcon, Security as SecurityIcon, Settings as SettingsIcon, PlayArrow as PlayIcon, ReceiptLong as WebhookIcon, ContentCopy as CopyIcon, Visibility as VisibilityIcon, VisibilityOff as VisibilityOffIcon, HelpOutline as HelpIcon, Warning as WarningIcon, KeyboardArrowDown as KeyboardArrowDownIcon, KeyboardArrowUp as KeyboardArrowUpIcon, Save as SaveIcon, History as HistoryIcon, Send as SendIcon, Autorenew as AutorenewIcon, CloudDownload as CloudDownloadIcon, Timeline as TimelineIcon, Speed as SpeedIcon, BookmarkAdd as SaveTemplateIcon } from '@mui/icons-material';\n\n/**\n * Webhook Configuration Component\n * \n * @param {Object} props - Component props\n * @returns {JSX.Element} The Webhook Configuration component\n */\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nconst WebhookConfiguration = _ref => {\n  let {\n    value = {},\n    onChange = () => {},\n    onTest = () => {},\n    disabled = false\n  } = _ref;\n  // Configuration state\n  const [config, setConfig] = useState({\n    name: '',\n    description: '',\n    endpointId: '',\n    // Auto-generated or custom\n    security: {\n      type: 'none',\n      token: {\n        value: '',\n        headerName: 'X-Webhook-Token'\n      },\n      hmac: {\n        secret: '',\n        algorithm: 'sha256',\n        headerName: 'X-Webhook-Signature'\n      },\n      basicAuth: {\n        username: '',\n        password: ''\n      }\n    },\n    validation: {\n      enabled: false,\n      schema: '',\n      requiredFields: [],\n      strictMode: false,\n      failOnError: true,\n      responseCode: 422,\n      errorFormat: 'json'\n    },\n    rateLimit: {\n      enabled: false,\n      maxRequests: 100,\n      timeWindow: 60 // seconds\n    },\n    preprocessors: [],\n    // Array of functions to run before processing the webhook\n    ...value\n  });\n\n  // UI State\n  const [activeTab, setActiveTab] = useState(0);\n  const [testResults, setTestResults] = useState(null);\n  const [testingInProgress, setTestingInProgress] = useState(false);\n  const [error, setError] = useState(null);\n  const [showSecrets, setShowSecrets] = useState({});\n  const [advancedSettingsOpen, setAdvancedSettingsOpen] = useState(false);\n  const [showJsonEditor, setShowJsonEditor] = useState(false);\n  const [rawJson, setRawJson] = useState('');\n  const [jsonError, setJsonError] = useState(null);\n  const [requiredFieldToAdd, setRequiredFieldToAdd] = useState('');\n\n  // Test request state\n  const [testRequestDrawerOpen, setTestRequestDrawerOpen] = useState(false);\n  const [testRequest, setTestRequest] = useState({\n    payload: JSON.stringify({\n      test: 'data'\n    }, null, 2),\n    headers: [{\n      key: 'Content-Type',\n      value: 'application/json'\n    }]\n  });\n\n  // Webhook simulator state\n  const [simulatorOpen, setSimulatorOpen] = useState(false);\n  const [simulatedPayload, setSimulatedPayload] = useState(null);\n  const [simulationOptions, setSimulationOptions] = useState({\n    eventType: 'order.created',\n    randomizeData: true,\n    delayMs: 0,\n    simulateError: false,\n    errorRate: 0\n  });\n\n  // Webhook request history for testing\n  const [requestHistory, setRequestHistory] = useState([]);\n  const [historyMenuAnchor, setHistoryMenuAnchor] = useState(null);\n\n  // Template management for test requests\n  const [templates, setTemplates] = useState([{\n    id: 'default',\n    name: 'Default Request',\n    payload: JSON.stringify({\n      test: 'data'\n    }, null, 2),\n    headers: [{\n      key: 'Content-Type',\n      value: 'application/json'\n    }]\n  }, {\n    id: 'order-created',\n    name: 'Order Created Event',\n    payload: JSON.stringify({\n      event: 'order.created',\n      data: {\n        id: '1234567890',\n        customer_id: 'cust_9876543',\n        amount: 99.99,\n        currency: 'USD',\n        items: [{\n          product_id: 'prod_123',\n          quantity: 1,\n          price: 79.99\n        }, {\n          product_id: 'prod_456',\n          quantity: 2,\n          price: 9.99\n        }],\n        created_at: new Date().toISOString()\n      }\n    }, null, 2),\n    headers: [{\n      key: 'Content-Type',\n      value: 'application/json'\n    }, {\n      key: 'X-Event-Type',\n      value: 'order.created'\n    }]\n  }, {\n    id: 'user-registered',\n    name: 'User Registered Event',\n    payload: JSON.stringify({\n      event: 'user.registered',\n      data: {\n        id: 'user_12345',\n        email: 'user@example.com',\n        name: 'John Doe',\n        created_at: new Date().toISOString()\n      }\n    }, null, 2),\n    headers: [{\n      key: 'Content-Type',\n      value: 'application/json'\n    }, {\n      key: 'X-Event-Type',\n      value: 'user.registered'\n    }]\n  }]);\n  const [templatesMenuAnchor, setTemplatesMenuAnchor] = useState(null);\n  const [testResultsTabIndex, setTestResultsTabIndex] = useState(0);\n\n  // Initialize raw JSON when config changes\n  useEffect(() => {\n    try {\n      setRawJson(JSON.stringify(config, null, 2));\n    } catch (e) {\n      console.error('Error stringifying config:', e);\n    }\n  }, [config]);\n\n  // Update parent component with config changes\n  useEffect(() => {\n    onChange(config);\n  }, [config, onChange]);\n\n  // Generate a random endpoint ID if one isn't set\n  useEffect(() => {\n    if (!config.endpointId) {\n      const randomId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n      setConfig(prev => ({\n        ...prev,\n        endpointId: randomId\n      }));\n    }\n  }, [config.endpointId]);\n\n  /**\n   * Handle change in basic configuration fields\n   * \n   * @param {string} field - Field name\n   * @param {any} value - New value\n   */\n  const handleChange = useCallback((field, value) => {\n    setConfig(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  }, []);\n\n  /**\n   * Handle change in security settings\n   * \n   * @param {string} securityType - Security type\n   * @param {string} field - Field name\n   * @param {any} value - New value\n   */\n  const handleSecurityChange = useCallback((securityType, field, value) => {\n    setConfig(prev => ({\n      ...prev,\n      security: {\n        ...prev.security,\n        [securityType]: {\n          ...prev.security[securityType],\n          [field]: value\n        }\n      }\n    }));\n  }, []);\n\n  /**\n   * Handle change in validation settings\n   * \n   * @param {string} field - Field name\n   * @param {any} value - New value\n   */\n  const handleValidationChange = useCallback((field, value) => {\n    setConfig(prev => ({\n      ...prev,\n      validation: {\n        ...prev.validation,\n        [field]: value\n      }\n    }));\n  }, []);\n\n  /**\n   * Handle change in rate limit settings\n   * \n   * @param {string} field - Field name\n   * @param {any} value - New value\n   */\n  const handleRateLimitChange = useCallback((field, value) => {\n    setConfig(prev => ({\n      ...prev,\n      rateLimit: {\n        ...prev.rateLimit,\n        [field]: value\n      }\n    }));\n  }, []);\n\n  /**\n   * Handle adding a required field\n   */\n  const handleAddRequiredField = useCallback(() => {\n    if (!requiredFieldToAdd.trim()) {\n      setError('Field name cannot be empty');\n      return;\n    }\n    setConfig(prev => ({\n      ...prev,\n      validation: {\n        ...prev.validation,\n        requiredFields: [...prev.validation.requiredFields, requiredFieldToAdd.trim()]\n      }\n    }));\n    setRequiredFieldToAdd('');\n    setError(null);\n  }, [requiredFieldToAdd]);\n\n  /**\n   * Handle removing a required field\n   * \n   * @param {number} index - Index of the field to remove\n   */\n  const handleRemoveRequiredField = useCallback(index => {\n    setConfig(prev => ({\n      ...prev,\n      validation: {\n        ...prev.validation,\n        requiredFields: prev.validation.requiredFields.filter((_, i) => i !== index)\n      }\n    }));\n  }, []);\n\n  /**\n   * Toggle showing secret values\n   * \n   * @param {string} field - Field name\n   */\n  const toggleSecretVisibility = useCallback(field => {\n    setShowSecrets(prev => ({\n      ...prev,\n      [field]: !prev[field]\n    }));\n  }, []);\n\n  /**\n   * Handle security type change\n   * \n   * @param {Event} event - Change event\n   */\n  const handleSecurityTypeChange = useCallback(event => {\n    const newSecurityType = event.target.value;\n    setConfig(prev => ({\n      ...prev,\n      security: {\n        ...prev.security,\n        type: newSecurityType\n      }\n    }));\n  }, []);\n\n  /**\n   * Handle JSON editor change\n   * \n   * @param {Event} event - Change event\n   */\n  const handleJsonChange = useCallback(event => {\n    const newJson = event.target.value;\n    setRawJson(newJson);\n    setJsonError(null);\n    try {\n      JSON.parse(newJson);\n    } catch (e) {\n      setJsonError(e.message);\n    }\n  }, []);\n\n  /**\n   * Apply changes from JSON editor\n   */\n  const applyJsonChanges = useCallback(() => {\n    try {\n      const newConfig = JSON.parse(rawJson);\n      setConfig(newConfig);\n      setJsonError(null);\n      setShowJsonEditor(false);\n    } catch (e) {\n      setJsonError(e.message);\n    }\n  }, [rawJson]);\n\n  /**\n   * Generate a new endpoint ID\n   */\n  const regenerateEndpointId = useCallback(() => {\n    const randomId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    setConfig(prev => ({\n      ...prev,\n      endpointId: randomId\n    }));\n  }, []);\n\n  /**\n   * Generate webhook URL from endpoint ID\n   * \n   * @returns {string} The full webhook URL\n   */\n  const getWebhookUrl = useCallback(() => {\n    // In production this would use environment variables or a configuration system\n    const baseUrl = 'https://api.example.com/webhooks';\n\n    // Check if we have an environment-specific path, such as dev, staging, etc.\n    const envSuffix = process.env.NODE_ENV === 'production' ? '' : `-${process.env.NODE_ENV || 'dev'}`;\n\n    // Create a deterministic but unique URL based on configuration properties\n    // This ensures consistency across sessions while allowing for unique endpoints\n    const customPath = config.name ? `/${encodeURIComponent(config.name.toLowerCase().replace(/[^a-z0-9]/g, '-'))}` : '';\n    return `${baseUrl}${customPath}${envSuffix}/${config.endpointId}`;\n  }, [config.name, config.endpointId]);\n\n  /**\n   * Copy webhook URL to clipboard\n   */\n  const copyWebhookUrl = useCallback(() => {\n    const url = getWebhookUrl();\n    navigator.clipboard.writeText(url);\n  }, [getWebhookUrl]);\n\n  /**\n   * Handle test request payload change\n   * \n   * @param {Event} event - Change event\n   */\n  const handleTestPayloadChange = useCallback(event => {\n    const newPayload = event.target.value;\n    setTestRequest(prev => ({\n      ...prev,\n      payload: newPayload\n    }));\n  }, []);\n\n  /**\n   * Add a header to the test request\n   * \n   * @param {Object} header - Header object with key and value\n   */\n  const handleAddTestHeader = useCallback(function () {\n    let header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      key: '',\n      value: ''\n    };\n    setTestRequest(prev => ({\n      ...prev,\n      headers: [...prev.headers, header]\n    }));\n  }, []);\n\n  /**\n   * Update a test request header\n   * \n   * @param {number} index - Index of the header to update\n   * @param {string} field - Field to update (key or value)\n   * @param {string} value - New value\n   */\n  const handleUpdateTestHeader = useCallback((index, field, value) => {\n    setTestRequest(prev => ({\n      ...prev,\n      headers: prev.headers.map((header, i) => i === index ? {\n        ...header,\n        [field]: value\n      } : header)\n    }));\n  }, []);\n\n  /**\n   * Remove a header from the test request\n   * \n   * @param {number} index - Index of the header to remove\n   */\n  const handleRemoveTestHeader = useCallback(index => {\n    setTestRequest(prev => ({\n      ...prev,\n      headers: prev.headers.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  /**\n   * Send a test webhook request\n   */\n  const sendTestRequest = useCallback(async () => {\n    setTestingInProgress(true);\n    setTestResults(null);\n    setError(null);\n    try {\n      var _validationDetails$va, _validationDetails, _validationDetails2;\n      // Validate the payload is proper JSON\n      let parsedPayload;\n      try {\n        parsedPayload = JSON.parse(testRequest.payload);\n      } catch (e) {\n        throw new Error('Invalid JSON payload: ' + e.message);\n      }\n\n      // In a real implementation, this would send a request to your test endpoint\n      console.log('Sending test webhook request:', {\n        url: getWebhookUrl(),\n        headers: testRequest.headers,\n        payload: parsedPayload\n      });\n\n      // Simulating API call with a timeout\n      await new Promise(resolve => setTimeout(resolve, 1200));\n\n      // Create timeline information\n      const timeline = [{\n        stage: 'received',\n        timestamp: new Date().toISOString(),\n        durationMs: 0,\n        // Initial event\n        details: 'Request received by webhook endpoint'\n      }, {\n        stage: 'authentication',\n        timestamp: new Date(Date.now() + 50).toISOString(),\n        durationMs: 50,\n        details: config.security.type !== 'none' ? `Authentication using ${config.security.type}` : 'No authentication configured'\n      }, {\n        stage: 'validation',\n        timestamp: new Date(Date.now() + 150).toISOString(),\n        durationMs: 100,\n        details: config.validation.enabled ? 'Validating payload against JSON schema' : 'Validation not enabled'\n      }];\n\n      // Add processing stages\n      timeline.push({\n        stage: 'processing',\n        timestamp: new Date(Date.now() + 250).toISOString(),\n        durationMs: 100,\n        details: 'Processing webhook payload'\n      });\n\n      // Add rate limiting if enabled\n      if (config.rateLimit.enabled) {\n        timeline.push({\n          stage: 'rateLimit',\n          timestamp: new Date(Date.now() + 270).toISOString(),\n          durationMs: 20,\n          details: `Rate limit check (${config.rateLimit.maxRequests}/${config.rateLimit.timeWindow}s)`\n        });\n      }\n\n      // Add completion stage\n      const processingTime = Math.floor(Math.random() * 300) + 200; // Simulate 200-500ms processing time\n      timeline.push({\n        stage: 'completed',\n        timestamp: new Date(Date.now() + processingTime).toISOString(),\n        durationMs: processingTime - 270,\n        details: 'Webhook processing completed successfully'\n      });\n\n      // Performance metrics\n      const performanceMetrics = {\n        totalTime: processingTime,\n        breakdowns: [{\n          stage: 'Authentication',\n          timeMs: 50,\n          percentage: Math.round(50 / processingTime * 100)\n        }, {\n          stage: 'Validation',\n          timeMs: 100,\n          percentage: Math.round(100 / processingTime * 100)\n        }, {\n          stage: 'Processing',\n          timeMs: processingTime - 150,\n          percentage: Math.round((processingTime - 150) / processingTime * 100)\n        }],\n        bottlenecks: config.validation.enabled && config.validation.schema ? ['Schema validation is the most time-consuming stage'] : []\n      };\n\n      // Create a new history entry\n      const historyEntry = {\n        timestamp: new Date(),\n        payload: parsedPayload,\n        headers: testRequest.headers,\n        id: Math.random().toString(36).substring(2, 9),\n        timeline,\n        performanceMetrics\n      };\n\n      // Add to request history\n      setRequestHistory(prev => [historyEntry, ...prev].slice(0, 10));\n\n      // Simulate validation if schema validation is enabled\n      let validationDetails = null;\n      if (config.validation.enabled && config.validation.schema) {\n        try {\n          var _schema$required$ever, _schema$required, _schema$required2;\n          // In a real implementation, this would use a JSON Schema validator library\n          const schema = JSON.parse(config.validation.schema);\n          const parsedPayload = JSON.parse(testRequest.payload);\n\n          // Simulate validation results - in this case a simple check\n          // to see if required properties exist in the payload\n          const valid = (_schema$required$ever = (_schema$required = schema.required) === null || _schema$required === void 0 ? void 0 : _schema$required.every(field => typeof parsedPayload[field] !== 'undefined')) !== null && _schema$required$ever !== void 0 ? _schema$required$ever : true;\n          validationDetails = {\n            valid,\n            schema: schema,\n            errors: valid ? [] : [{\n              instancePath: \"\",\n              schemaPath: \"#/required\",\n              keyword: \"required\",\n              params: {\n                missingProperty: (_schema$required2 = schema.required) === null || _schema$required2 === void 0 ? void 0 : _schema$required2.find(field => typeof parsedPayload[field] === 'undefined')\n              },\n              message: \"must have required property\"\n            }]\n          };\n        } catch (e) {\n          // If there's an error parsing the schema, set validation as failed\n          validationDetails = {\n            valid: false,\n            schema: config.validation.schema,\n            errors: [{\n              message: `Error parsing schema: ${e.message}`\n            }]\n          };\n        }\n      }\n\n      // Create a success result with validation information\n      const result = {\n        success: true,\n        message: 'Test webhook request sent successfully',\n        receivedAt: new Date().toISOString(),\n        validationPassed: (_validationDetails$va = (_validationDetails = validationDetails) === null || _validationDetails === void 0 ? void 0 : _validationDetails.valid) !== null && _validationDetails$va !== void 0 ? _validationDetails$va : true,\n        processingTime,\n        details: {\n          endpoint: getWebhookUrl(),\n          securityChecks: config.security.type !== 'none' ? 'Passed' : 'Not configured',\n          validationChecks: config.validation.enabled ? (_validationDetails2 = validationDetails) !== null && _validationDetails2 !== void 0 && _validationDetails2.valid ? 'Passed' : 'Failed' : 'Not enabled',\n          rateLimiting: config.rateLimit.enabled ? 'Active' : 'Not enabled'\n        },\n        // Include validation details if available\n        validationDetails,\n        // Include timeline for request processing visualization\n        timeline,\n        // Include performance metrics\n        performanceMetrics\n      };\n      setTestResults(result);\n    } catch (err) {\n      setError(err.message || 'Error sending test webhook request');\n      setTestResults({\n        success: false,\n        message: err.message || 'Unknown error'\n      });\n    } finally {\n      setTestingInProgress(false);\n    }\n  }, [testRequest, getWebhookUrl, config.security.type, config.validation.enabled, config.rateLimit.enabled]);\n\n  /**\n   * Load a historical request into the test form\n   * \n   * @param {Object} historyItem - Request history item\n   */\n  const loadHistoryItem = useCallback(historyItem => {\n    setTestRequest({\n      payload: JSON.stringify(historyItem.payload, null, 2),\n      headers: [...historyItem.headers]\n    });\n    setHistoryMenuAnchor(null);\n  }, []);\n\n  /**\n   * Load a template into the test form\n   * \n   * @param {Object} template - Request template\n   */\n  const loadTemplateItem = useCallback(template => {\n    setTestRequest({\n      payload: template.payload,\n      headers: [...template.headers]\n    });\n    setTemplatesMenuAnchor(null);\n  }, []);\n\n  /**\n   * Save current request as a template\n   */\n  const saveAsTemplate = useCallback(() => {\n    // Create a simple dialog to enter template name (In a real app, this would be a proper form dialog)\n    const templateName = prompt('Enter a name for this template', 'My Template');\n    if (!templateName) return;\n    const newTemplate = {\n      id: `template-${Date.now()}`,\n      name: templateName,\n      payload: testRequest.payload,\n      headers: [...testRequest.headers]\n    };\n    setTemplates(prev => [...prev, newTemplate]);\n  }, [testRequest]);\n\n  /**\n   * Generate a simulated webhook payload\n   */\n  const generateSimulatedPayload = useCallback(() => {\n    // Create a simulated payload based on the selected event type\n    const timestamp = new Date().toISOString();\n    const randomId = Math.random().toString(36).substring(2, 15);\n    let payload;\n    switch (simulationOptions.eventType) {\n      case 'order.created':\n        payload = {\n          event: 'order.created',\n          data: {\n            id: simulationOptions.randomizeData ? `order_${randomId}` : 'order_123456',\n            customer_id: simulationOptions.randomizeData ? `cust_${randomId.substring(0, 8)}` : 'cust_9876543',\n            amount: simulationOptions.randomizeData ? Math.round(Math.random() * 10000) / 100 : 99.99,\n            currency: 'USD',\n            items: [{\n              product_id: simulationOptions.randomizeData ? `prod_${randomId.substring(0, 6)}` : 'prod_123',\n              quantity: simulationOptions.randomizeData ? Math.floor(Math.random() * 5) + 1 : 1,\n              price: simulationOptions.randomizeData ? Math.round(Math.random() * 10000) / 100 : 79.99\n            }, {\n              product_id: simulationOptions.randomizeData ? `prod_${randomId.substring(6, 12)}` : 'prod_456',\n              quantity: simulationOptions.randomizeData ? Math.floor(Math.random() * 3) + 1 : 2,\n              price: simulationOptions.randomizeData ? Math.round(Math.random() * 1000) / 100 : 9.99\n            }],\n            created_at: timestamp\n          }\n        };\n        break;\n      case 'user.registered':\n        payload = {\n          event: 'user.registered',\n          data: {\n            id: simulationOptions.randomizeData ? `user_${randomId}` : 'user_12345',\n            email: simulationOptions.randomizeData ? `user_${randomId.substring(0, 6)}@example.com` : 'user@example.com',\n            name: 'John Doe',\n            created_at: timestamp\n          }\n        };\n        break;\n      case 'payment.succeeded':\n        payload = {\n          event: 'payment.succeeded',\n          data: {\n            id: simulationOptions.randomizeData ? `payment_${randomId}` : 'payment_12345',\n            order_id: simulationOptions.randomizeData ? `order_${randomId.substring(0, 8)}` : 'order_123456',\n            amount: simulationOptions.randomizeData ? Math.round(Math.random() * 10000) / 100 : 99.99,\n            currency: 'USD',\n            payment_method: 'credit_card',\n            created_at: timestamp\n          }\n        };\n        break;\n      default:\n        payload = {\n          event: simulationOptions.eventType,\n          data: {\n            id: randomId,\n            timestamp\n          }\n        };\n    }\n\n    // If error simulation is enabled, randomly determine if it should fail\n    if (simulationOptions.simulateError && Math.random() < simulationOptions.errorRate / 100) {\n      // Simulate error by removing required fields or adding invalid data\n      if (payload.data) {\n        delete payload.data.id; // Remove a required field to cause validation error\n      }\n    }\n    return payload;\n  }, [simulationOptions]);\n\n  /**\n   * Start webhook simulator\n   */\n  const startSimulator = useCallback(async () => {\n    setSimulatorOpen(false);\n    setTestingInProgress(true);\n    setTestResults(null);\n    setError(null);\n    try {\n      // Generate a simulated payload\n      const payload = generateSimulatedPayload();\n      setSimulatedPayload(payload);\n\n      // Create headers for the simulated request\n      const headers = [{\n        key: 'Content-Type',\n        value: 'application/json'\n      }, {\n        key: 'X-Event-Type',\n        value: simulationOptions.eventType\n      }];\n\n      // Update the test request to show the simulated data\n      setTestRequest({\n        payload: JSON.stringify(payload, null, 2),\n        headers\n      });\n\n      // Apply delay if specified\n      if (simulationOptions.delayMs > 0) {\n        await new Promise(resolve => setTimeout(resolve, simulationOptions.delayMs));\n      }\n\n      // Now send the test request as normal\n      sendTestRequest();\n    } catch (err) {\n      setError(err.message || 'Error simulating webhook request');\n      setTestingInProgress(false);\n    }\n  }, [simulationOptions, generateSimulatedPayload, sendTestRequest]);\n\n  // Security type options\n  const securityTypes = [{\n    value: 'none',\n    label: 'No Security'\n  }, {\n    value: 'token',\n    label: 'Static Token'\n  }, {\n    value: 'hmac',\n    label: 'HMAC Signature'\n  }, {\n    value: 'basicAuth',\n    label: 'Basic Authentication'\n  }];\n\n  // HMAC algorithm options\n  const hmacAlgorithms = [{\n    value: 'sha256',\n    label: 'SHA-256'\n  }, {\n    value: 'sha384',\n    label: 'SHA-384'\n  }, {\n    value: 'sha512',\n    label: 'SHA-512'\n  }];\n  return /*#__PURE__*/_jsxs(Card, {\n    variant: \"outlined\",\n    children: [/*#__PURE__*/_jsxs(CardContent, {\n      children: [/*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsxs(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          sx: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsx(WebhookIcon, {\n            sx: {\n              mr: 1\n            }\n          }), \"Webhook Configuration\"]\n        }), /*#__PURE__*/_jsxs(Box, {\n          children: [/*#__PURE__*/_jsx(Tooltip, {\n            title: \"Test Webhook\",\n            children: /*#__PURE__*/_jsx(\"span\", {\n              children: /*#__PURE__*/_jsx(IconButton, {\n                onClick: () => setTestRequestDrawerOpen(true),\n                disabled: disabled || !config.endpointId,\n                color: \"primary\",\n                children: /*#__PURE__*/_jsx(PlayIcon, {})\n              })\n            })\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Webhook Simulator\",\n            children: /*#__PURE__*/_jsx(\"span\", {\n              children: /*#__PURE__*/_jsx(IconButton, {\n                onClick: () => setSimulatorOpen(true),\n                disabled: disabled || !config.endpointId,\n                color: \"primary\",\n                children: /*#__PURE__*/_jsx(AutorenewIcon, {})\n              })\n            })\n          }), /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Show JSON Editor\",\n            children: /*#__PURE__*/_jsx(IconButton, {\n              onClick: () => setShowJsonEditor(!showJsonEditor),\n              color: showJsonEditor ? 'primary' : 'default',\n              children: /*#__PURE__*/_jsx(CodeIcon, {})\n            })\n          })]\n        })]\n      }), showJsonEditor ? /*#__PURE__*/_jsx(Box, {\n        sx: {\n          mb: 3\n        },\n        children: /*#__PURE__*/_jsx(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 20,\n          label: \"Configuration JSON\",\n          value: rawJson,\n          onChange: handleJsonChange,\n          error: !!jsonError,\n          helperText: jsonError,\n          sx: {\n            fontFamily: 'monospace'\n          },\n          InputProps: {\n            endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n              position: \"end\",\n              children: /*#__PURE__*/_jsx(Button, {\n                onClick: applyJsonChanges,\n                disabled: !!jsonError,\n                variant: \"contained\",\n                startIcon: /*#__PURE__*/_jsx(SaveIcon, {}),\n                children: \"Apply\"\n              })\n            })\n          }\n        })\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(Tabs, {\n          value: activeTab,\n          onChange: (e, newValue) => setActiveTab(newValue),\n          sx: {\n            borderBottom: 1,\n            borderColor: 'divider',\n            mb: 3\n          },\n          children: [/*#__PURE__*/_jsx(Tab, {\n            label: \"Basic\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Security\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Validation\"\n          }), /*#__PURE__*/_jsx(Tab, {\n            label: \"Advanced\"\n          })]\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: activeTab === 0 ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(TextField, {\n                fullWidth: true,\n                label: \"Webhook Name\",\n                value: config.name,\n                onChange: e => handleChange('name', e.target.value),\n                disabled: disabled,\n                helperText: \"A descriptive name for this webhook\"\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(TextField, {\n                fullWidth: true,\n                multiline: true,\n                rows: 2,\n                label: \"Description\",\n                value: config.description,\n                onChange: e => handleChange('description', e.target.value),\n                disabled: disabled,\n                helperText: \"A description of this webhook's purpose\"\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle1\",\n                  gutterBottom: true,\n                  children: \"Webhook Endpoint\"\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  alignItems: \"center\",\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 8,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Endpoint ID\",\n                      value: config.endpointId,\n                      onChange: e => handleChange('endpointId', e.target.value),\n                      disabled: disabled,\n                      InputProps: {\n                        endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                          position: \"end\",\n                          children: /*#__PURE__*/_jsx(Tooltip, {\n                            title: \"Regenerate Endpoint ID\",\n                            children: /*#__PURE__*/_jsx(IconButton, {\n                              onClick: regenerateEndpointId,\n                              edge: \"end\",\n                              disabled: disabled,\n                              children: /*#__PURE__*/_jsx(AutorenewIcon, {})\n                            })\n                          })\n                        })\n                      }\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 4,\n                    children: /*#__PURE__*/_jsx(Button, {\n                      fullWidth: true,\n                      variant: \"outlined\",\n                      startIcon: /*#__PURE__*/_jsx(CopyIcon, {}),\n                      onClick: copyWebhookUrl,\n                      disabled: disabled || !config.endpointId,\n                      children: \"Copy URL\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      variant: \"filled\",\n                      label: \"Webhook URL\",\n                      value: getWebhookUrl(),\n                      InputProps: {\n                        readOnly: true\n                      }\n                    })\n                  })]\n                })]\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: activeTab === 1 ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsxs(Grid, {\n              item: true,\n              xs: 12,\n              children: [/*#__PURE__*/_jsxs(Alert, {\n                severity: \"info\",\n                sx: {\n                  mb: 3\n                },\n                children: [/*#__PURE__*/_jsx(AlertTitle, {\n                  children: \"Security Recommendation\"\n                }), \"We recommend implementing security for your webhook to ensure that only authorized systems can send requests to your endpoint.\"]\n              }), /*#__PURE__*/_jsxs(FormControl, {\n                component: \"fieldset\",\n                sx: {\n                  mb: 3\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"h6\",\n                  gutterBottom: true,\n                  children: \"Security Method\"\n                }), /*#__PURE__*/_jsx(RadioGroup, {\n                  \"aria-label\": \"security-type\",\n                  name: \"security-type\",\n                  value: config.security.type,\n                  onChange: handleSecurityTypeChange,\n                  children: securityTypes.map(type => /*#__PURE__*/_jsx(FormControlLabel, {\n                    value: type.value,\n                    control: /*#__PURE__*/_jsx(Radio, {\n                      disabled: disabled\n                    }),\n                    label: type.label\n                  }, type.value))\n                })]\n              })]\n            }), config.security.type === 'token' && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle1\",\n                  gutterBottom: true,\n                  children: \"Static Token Validation\"\n                }), /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  paragraph: true,\n                  children: \"A static token is sent with each request. The sender must include this token in a header.\"\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Token Header Name\",\n                      value: config.security.token.headerName,\n                      onChange: e => handleSecurityChange('token', 'headerName', e.target.value),\n                      disabled: disabled,\n                      helperText: \"HTTP header name for the token\",\n                      placeholder: \"X-Webhook-Token\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Token Value\",\n                      type: showSecrets.token ? 'text' : 'password',\n                      value: config.security.token.value,\n                      onChange: e => handleSecurityChange('token', 'value', e.target.value),\n                      disabled: disabled,\n                      helperText: \"Secret token value\",\n                      InputProps: {\n                        endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                          position: \"end\",\n                          children: /*#__PURE__*/_jsx(IconButton, {\n                            onClick: () => toggleSecretVisibility('token'),\n                            edge: \"end\",\n                            children: showSecrets.token ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                          })\n                        })\n                      }\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsx(Button, {\n                      variant: \"outlined\",\n                      onClick: () => {\n                        const randomToken = Array.from(crypto.getRandomValues(new Uint8Array(32))).map(b => b.toString(16).padStart(2, '0')).join('');\n                        handleSecurityChange('token', 'value', randomToken);\n                      },\n                      disabled: disabled,\n                      startIcon: /*#__PURE__*/_jsx(AutorenewIcon, {}),\n                      children: \"Generate Random Token\"\n                    })\n                  })]\n                })]\n              })\n            }), config.security.type === 'hmac' && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle1\",\n                  gutterBottom: true,\n                  children: \"HMAC Signature Validation\"\n                }), /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  paragraph: true,\n                  children: \"The sender creates a hash signature of the payload using the shared secret. This provides stronger security by validating the message integrity.\"\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Signature Header Name\",\n                      value: config.security.hmac.headerName,\n                      onChange: e => handleSecurityChange('hmac', 'headerName', e.target.value),\n                      disabled: disabled,\n                      helperText: \"HTTP header name for the signature\",\n                      placeholder: \"X-Webhook-Signature\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsxs(FormControl, {\n                      fullWidth: true,\n                      disabled: disabled,\n                      children: [/*#__PURE__*/_jsx(InputLabel, {\n                        children: \"HMAC Algorithm\"\n                      }), /*#__PURE__*/_jsx(Select, {\n                        value: config.security.hmac.algorithm,\n                        label: \"HMAC Algorithm\",\n                        onChange: e => handleSecurityChange('hmac', 'algorithm', e.target.value),\n                        children: hmacAlgorithms.map(algorithm => /*#__PURE__*/_jsx(MenuItem, {\n                          value: algorithm.value,\n                          children: algorithm.label\n                        }, algorithm.value))\n                      }), /*#__PURE__*/_jsx(FormHelperText, {\n                        children: \"The hashing algorithm to use\"\n                      })]\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Secret Key\",\n                      type: showSecrets.hmacSecret ? 'text' : 'password',\n                      value: config.security.hmac.secret,\n                      onChange: e => handleSecurityChange('hmac', 'secret', e.target.value),\n                      disabled: disabled,\n                      helperText: \"Secret key for HMAC signature generation\",\n                      InputProps: {\n                        endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                          position: \"end\",\n                          children: /*#__PURE__*/_jsx(IconButton, {\n                            onClick: () => toggleSecretVisibility('hmacSecret'),\n                            edge: \"end\",\n                            children: showSecrets.hmacSecret ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                          })\n                        })\n                      }\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsx(Button, {\n                      variant: \"outlined\",\n                      onClick: () => {\n                        const randomSecret = Array.from(crypto.getRandomValues(new Uint8Array(32))).map(b => b.toString(16).padStart(2, '0')).join('');\n                        handleSecurityChange('hmac', 'secret', randomSecret);\n                      },\n                      disabled: disabled,\n                      startIcon: /*#__PURE__*/_jsx(AutorenewIcon, {}),\n                      children: \"Generate Random Secret\"\n                    })\n                  })]\n                })]\n              })\n            }), config.security.type === 'basicAuth' && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle1\",\n                  gutterBottom: true,\n                  children: \"Basic Authentication\"\n                }), /*#__PURE__*/_jsx(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  paragraph: true,\n                  children: \"The sender must provide basic HTTP authentication credentials with each request.\"\n                }), /*#__PURE__*/_jsxs(Grid, {\n                  container: true,\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Username\",\n                      value: config.security.basicAuth.username,\n                      onChange: e => handleSecurityChange('basicAuth', 'username', e.target.value),\n                      disabled: disabled,\n                      helperText: \"Basic Auth username\"\n                    })\n                  }), /*#__PURE__*/_jsx(Grid, {\n                    item: true,\n                    xs: 12,\n                    sm: 6,\n                    children: /*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      label: \"Password\",\n                      type: showSecrets.basicAuthPassword ? 'text' : 'password',\n                      value: config.security.basicAuth.password,\n                      onChange: e => handleSecurityChange('basicAuth', 'password', e.target.value),\n                      disabled: disabled,\n                      helperText: \"Basic Auth password\",\n                      InputProps: {\n                        endAdornment: /*#__PURE__*/_jsx(InputAdornment, {\n                          position: \"end\",\n                          children: /*#__PURE__*/_jsx(IconButton, {\n                            onClick: () => toggleSecretVisibility('basicAuthPassword'),\n                            edge: \"end\",\n                            children: showSecrets.basicAuthPassword ? /*#__PURE__*/_jsx(VisibilityOffIcon, {}) : /*#__PURE__*/_jsx(VisibilityIcon, {})\n                          })\n                        })\n                      }\n                    })\n                  })]\n                })]\n              })\n            }), config.security.type === 'none' && /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Alert, {\n                severity: \"warning\",\n                children: [/*#__PURE__*/_jsx(AlertTitle, {\n                  children: \"No Security Configured\"\n                }), \"Your webhook endpoint will accept requests from any source without validation. This is not recommended for production environments.\"]\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: activeTab === 2 ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            spacing: 3,\n            children: [/*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(FormControlLabel, {\n                control: /*#__PURE__*/_jsx(Switch, {\n                  checked: config.validation.enabled,\n                  onChange: e => handleValidationChange('enabled', e.target.checked),\n                  disabled: disabled\n                }),\n                label: \"Enable Payload Validation\"\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(Collapse, {\n                in: config.validation.enabled,\n                children: /*#__PURE__*/_jsxs(Paper, {\n                  variant: \"outlined\",\n                  sx: {\n                    p: 2\n                  },\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"subtitle1\",\n                    gutterBottom: true,\n                    children: \"Required Fields\"\n                  }), /*#__PURE__*/_jsx(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    paragraph: true,\n                    children: \"Specify fields that must be present in the webhook payload.\"\n                  }), config.validation.requiredFields.length > 0 ? /*#__PURE__*/_jsx(Box, {\n                    sx: {\n                      mb: 2\n                    },\n                    children: config.validation.requiredFields.map((field, index) => /*#__PURE__*/_jsx(Chip, {\n                      label: field,\n                      onDelete: () => handleRemoveRequiredField(index),\n                      disabled: disabled,\n                      sx: {\n                        m: 0.5\n                      }\n                    }, index))\n                  }) : /*#__PURE__*/_jsx(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    sx: {\n                      mb: 2\n                    },\n                    children: \"No required fields configured.\"\n                  }), /*#__PURE__*/_jsxs(Grid, {\n                    container: true,\n                    spacing: 2,\n                    alignItems: \"center\",\n                    children: [/*#__PURE__*/_jsx(Grid, {\n                      item: true,\n                      xs: true,\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        fullWidth: true,\n                        size: \"small\",\n                        label: \"Field Path\",\n                        value: requiredFieldToAdd,\n                        onChange: e => setRequiredFieldToAdd(e.target.value),\n                        disabled: disabled || !config.validation.enabled,\n                        placeholder: \"data.id\",\n                        helperText: \"JSON path to a required field (e.g., 'data.id')\"\n                      })\n                    }), /*#__PURE__*/_jsx(Grid, {\n                      item: true,\n                      children: /*#__PURE__*/_jsx(Button, {\n                        variant: \"outlined\",\n                        onClick: handleAddRequiredField,\n                        disabled: disabled || !config.validation.enabled || !requiredFieldToAdd.trim(),\n                        startIcon: /*#__PURE__*/_jsx(AddIcon, {}),\n                        children: \"Add\"\n                      })\n                    })]\n                  })]\n                })\n              })\n            }), /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsx(Collapse, {\n                in: config.validation.enabled,\n                children: /*#__PURE__*/_jsxs(Paper, {\n                  variant: \"outlined\",\n                  sx: {\n                    p: 2\n                  },\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"subtitle1\",\n                    gutterBottom: true,\n                    children: \"JSON Schema Validation\"\n                  }), /*#__PURE__*/_jsx(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    paragraph: true,\n                    children: \"Provide a JSON Schema to validate the structure and data types of incoming webhooks.\"\n                  }), /*#__PURE__*/_jsxs(Box, {\n                    children: [/*#__PURE__*/_jsx(TextField, {\n                      fullWidth: true,\n                      multiline: true,\n                      rows: 10,\n                      label: \"JSON Schema\",\n                      value: config.validation.schema,\n                      onChange: e => handleValidationChange('schema', e.target.value),\n                      disabled: disabled || !config.validation.enabled,\n                      placeholder: `{\n  \"type\": \"object\",\n  \"required\": [\"data\"],\n  \"properties\": {\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": { \"type\": \"string\" },\n        \"type\": { \"type\": \"string\" }\n      }\n    }\n  }\n}`,\n                      sx: {\n                        fontFamily: 'monospace',\n                        mb: 2\n                      },\n                      error: (() => {\n                        try {\n                          if (!config.validation.schema) return false;\n                          JSON.parse(config.validation.schema);\n                          return false;\n                        } catch (e) {\n                          return true;\n                        }\n                      })(),\n                      helperText: (() => {\n                        try {\n                          if (!config.validation.schema) return \"Enter a JSON Schema to validate webhook payloads\";\n                          JSON.parse(config.validation.schema);\n                          return \"Valid JSON Schema\";\n                        } catch (e) {\n                          return `Invalid JSON: ${e.message}`;\n                        }\n                      })()\n                    }), /*#__PURE__*/_jsxs(Box, {\n                      sx: {\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        mt: 2\n                      },\n                      children: [/*#__PURE__*/_jsx(Button, {\n                        variant: \"outlined\",\n                        onClick: () => {\n                          handleValidationChange('schema', `{\n  \"type\": \"object\",\n  \"required\": [\"data\"],\n  \"properties\": {\n    \"data\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": { \"type\": \"string\" },\n        \"type\": { \"type\": \"string\" },\n        \"attributes\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"name\": { \"type\": \"string\" },\n            \"created_at\": { \"type\": \"string\", \"format\": \"date-time\" }\n          }\n        }\n      },\n      \"required\": [\"id\", \"type\"]\n    },\n    \"meta\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"request_id\": { \"type\": \"string\" }\n      }\n    }\n  }\n}`);\n                        },\n                        disabled: disabled || !config.validation.enabled,\n                        startIcon: /*#__PURE__*/_jsx(AddIcon, {}),\n                        children: \"Load Example Schema\"\n                      }), /*#__PURE__*/_jsx(Button, {\n                        variant: \"outlined\",\n                        color: \"secondary\",\n                        onClick: () => handleValidationChange('schema', ''),\n                        disabled: disabled || !config.validation.enabled || !config.validation.schema,\n                        startIcon: /*#__PURE__*/_jsx(CloseIcon, {}),\n                        children: \"Clear Schema\"\n                      })]\n                    }), /*#__PURE__*/_jsx(Divider, {\n                      sx: {\n                        my: 3\n                      }\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      variant: \"subtitle1\",\n                      gutterBottom: true,\n                      children: \"Schema Validation Options\"\n                    }), /*#__PURE__*/_jsxs(Grid, {\n                      container: true,\n                      spacing: 2,\n                      children: [/*#__PURE__*/_jsxs(Grid, {\n                        item: true,\n                        xs: 12,\n                        sm: 6,\n                        children: [/*#__PURE__*/_jsx(FormControlLabel, {\n                          control: /*#__PURE__*/_jsx(Switch, {\n                            checked: config.validation.strictMode,\n                            onChange: e => handleValidationChange('strictMode', e.target.checked),\n                            disabled: disabled || !config.validation.enabled\n                          }),\n                          label: \"Strict Mode\"\n                        }), /*#__PURE__*/_jsx(Typography, {\n                          variant: \"caption\",\n                          display: \"block\",\n                          color: \"text.secondary\",\n                          children: \"Reject payloads with additional properties not in schema\"\n                        })]\n                      }), /*#__PURE__*/_jsxs(Grid, {\n                        item: true,\n                        xs: 12,\n                        sm: 6,\n                        children: [/*#__PURE__*/_jsx(FormControlLabel, {\n                          control: /*#__PURE__*/_jsx(Switch, {\n                            checked: config.validation.failOnError,\n                            onChange: e => handleValidationChange('failOnError', e.target.checked),\n                            disabled: disabled || !config.validation.enabled\n                          }),\n                          label: \"Fail on Error\"\n                        }), /*#__PURE__*/_jsx(Typography, {\n                          variant: \"caption\",\n                          display: \"block\",\n                          color: \"text.secondary\",\n                          children: \"Reject webhook completely if validation fails\"\n                        })]\n                      })]\n                    })]\n                  })]\n                })\n              })\n            })]\n          })\n        }), /*#__PURE__*/_jsx(Box, {\n          sx: {\n            display: activeTab === 3 ? 'block' : 'none'\n          },\n          children: /*#__PURE__*/_jsx(Grid, {\n            container: true,\n            spacing: 3,\n            children: /*#__PURE__*/_jsx(Grid, {\n              item: true,\n              xs: 12,\n              children: /*#__PURE__*/_jsxs(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2\n                },\n                children: [/*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    mb: 2\n                  },\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"h6\",\n                    children: \"Rate Limiting\"\n                  }), /*#__PURE__*/_jsx(FormControlLabel, {\n                    control: /*#__PURE__*/_jsx(Switch, {\n                      checked: config.rateLimit.enabled,\n                      onChange: e => handleRateLimitChange('enabled', e.target.checked),\n                      disabled: disabled\n                    }),\n                    label: \"Enable Rate Limiting\"\n                  })]\n                }), /*#__PURE__*/_jsxs(Collapse, {\n                  in: config.rateLimit.enabled,\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"body2\",\n                    color: \"text.secondary\",\n                    paragraph: true,\n                    children: \"Limit the number of webhook requests that can be processed within a time window.\"\n                  }), /*#__PURE__*/_jsxs(Grid, {\n                    container: true,\n                    spacing: 2,\n                    children: [/*#__PURE__*/_jsx(Grid, {\n                      item: true,\n                      xs: 12,\n                      sm: 6,\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        fullWidth: true,\n                        type: \"number\",\n                        label: \"Max Requests\",\n                        value: config.rateLimit.maxRequests,\n                        onChange: e => handleRateLimitChange('maxRequests', parseInt(e.target.value, 10) || 100),\n                        disabled: disabled || !config.rateLimit.enabled,\n                        InputProps: {\n                          inputProps: {\n                            min: 1\n                          }\n                        },\n                        helperText: \"Maximum number of requests allowed\"\n                      })\n                    }), /*#__PURE__*/_jsx(Grid, {\n                      item: true,\n                      xs: 12,\n                      sm: 6,\n                      children: /*#__PURE__*/_jsx(TextField, {\n                        fullWidth: true,\n                        type: \"number\",\n                        label: \"Time Window (seconds)\",\n                        value: config.rateLimit.timeWindow,\n                        onChange: e => handleRateLimitChange('timeWindow', parseInt(e.target.value, 10) || 60),\n                        disabled: disabled || !config.rateLimit.enabled,\n                        InputProps: {\n                          inputProps: {\n                            min: 1\n                          }\n                        },\n                        helperText: \"Time window in seconds\"\n                      })\n                    })]\n                  })]\n                })]\n              })\n            })\n          })\n        })]\n      }), error && !testResults && /*#__PURE__*/_jsx(Alert, {\n        severity: \"error\",\n        sx: {\n          mt: 3\n        },\n        onClose: () => setError(null),\n        children: error\n      })]\n    }), /*#__PURE__*/_jsxs(Drawer, {\n      anchor: \"right\",\n      open: simulatorOpen,\n      onClose: () => setSimulatorOpen(false),\n      sx: {\n        '& .MuiDrawer-paper': {\n          width: '500px',\n          maxWidth: '100%',\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h6\",\n          children: \"Webhook Simulator\"\n        }), /*#__PURE__*/_jsx(IconButton, {\n          onClick: () => setSimulatorOpen(false),\n          children: /*#__PURE__*/_jsx(CloseIcon, {})\n        })]\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"body2\",\n        paragraph: true,\n        children: \"Generate webhook payloads based on common event types or create custom events. Simulated webhooks help test your endpoint's handling of different scenarios.\"\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle2\",\n          gutterBottom: true,\n          children: \"Event Type\"\n        }), /*#__PURE__*/_jsxs(Select, {\n          fullWidth: true,\n          value: simulationOptions.eventType,\n          onChange: e => setSimulationOptions(prev => ({\n            ...prev,\n            eventType: e.target.value\n          })),\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsx(MenuItem, {\n            value: \"order.created\",\n            children: \"Order Created\"\n          }), /*#__PURE__*/_jsx(MenuItem, {\n            value: \"user.registered\",\n            children: \"User Registered\"\n          }), /*#__PURE__*/_jsx(MenuItem, {\n            value: \"payment.succeeded\",\n            children: \"Payment Succeeded\"\n          }), /*#__PURE__*/_jsx(MenuItem, {\n            value: \"custom.event\",\n            children: \"Custom Event\"\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle2\",\n          gutterBottom: true,\n          children: \"Simulation Options\"\n        }), /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Switch, {\n            checked: simulationOptions.randomizeData,\n            onChange: e => setSimulationOptions(prev => ({\n              ...prev,\n              randomizeData: e.target.checked\n            }))\n          }),\n          label: \"Randomize data values\"\n        }), /*#__PURE__*/_jsx(FormControlLabel, {\n          control: /*#__PURE__*/_jsx(Switch, {\n            checked: simulationOptions.simulateError,\n            onChange: e => setSimulationOptions(prev => ({\n              ...prev,\n              simulateError: e.target.checked\n            }))\n          }),\n          label: \"Simulate validation errors\"\n        }), simulationOptions.simulateError && /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            ml: 4,\n            mt: 1,\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            variant: \"body2\",\n            gutterBottom: true,\n            children: [\"Error rate: \", simulationOptions.errorRate, \"%\"]\n          }), /*#__PURE__*/_jsx(Slider, {\n            value: simulationOptions.errorRate,\n            onChange: (e, newValue) => setSimulationOptions(prev => ({\n              ...prev,\n              errorRate: newValue\n            })),\n            min: 0,\n            max: 100,\n            step: 5,\n            valueLabelDisplay: \"auto\",\n            valueLabelFormat: value => `${value}%`\n          })]\n        }), /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxs(Typography, {\n            variant: \"body2\",\n            gutterBottom: true,\n            children: [\"Request delay: \", simulationOptions.delayMs, \"ms\"]\n          }), /*#__PURE__*/_jsx(Slider, {\n            value: simulationOptions.delayMs,\n            onChange: (e, newValue) => setSimulationOptions(prev => ({\n              ...prev,\n              delayMs: newValue\n            })),\n            min: 0,\n            max: 3000,\n            step: 100,\n            valueLabelDisplay: \"auto\",\n            valueLabelFormat: value => `${value}ms`\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsx(Button, {\n          onClick: () => setSimulatorOpen(false),\n          children: \"Cancel\"\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: startSimulator,\n          disabled: testingInProgress,\n          children: \"Start Simulation\"\n        })]\n      })]\n    }), /*#__PURE__*/_jsxs(Drawer, {\n      anchor: \"right\",\n      open: testRequestDrawerOpen,\n      onClose: () => setTestRequestDrawerOpen(false),\n      sx: {\n        '& .MuiDrawer-paper': {\n          width: '500px',\n          maxWidth: '100%',\n          p: 2\n        }\n      },\n      children: [/*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"h6\",\n          children: \"Test Webhook\"\n        }), /*#__PURE__*/_jsx(IconButton, {\n          onClick: () => setTestRequestDrawerOpen(false),\n          children: /*#__PURE__*/_jsx(CloseIcon, {})\n        })]\n      }), /*#__PURE__*/_jsx(Typography, {\n        variant: \"subtitle1\",\n        gutterBottom: true,\n        children: \"Request Headers\"\n      }), /*#__PURE__*/_jsxs(Paper, {\n        variant: \"outlined\",\n        sx: {\n          p: 2,\n          mb: 3\n        },\n        children: [testRequest.headers.map((header, index) => /*#__PURE__*/_jsxs(Grid, {\n          container: true,\n          spacing: 1,\n          alignItems: \"center\",\n          sx: {\n            mb: 1\n          },\n          children: [/*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 5,\n            children: /*#__PURE__*/_jsx(TextField, {\n              fullWidth: true,\n              size: \"small\",\n              label: \"Header\",\n              value: header.key,\n              onChange: e => handleUpdateTestHeader(index, 'key', e.target.value)\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsx(TextField, {\n              fullWidth: true,\n              size: \"small\",\n              label: \"Value\",\n              value: header.value,\n              onChange: e => handleUpdateTestHeader(index, 'value', e.target.value)\n            })\n          }), /*#__PURE__*/_jsx(Grid, {\n            item: true,\n            xs: 1,\n            children: /*#__PURE__*/_jsx(IconButton, {\n              size: \"small\",\n              onClick: () => handleRemoveTestHeader(index),\n              children: /*#__PURE__*/_jsx(CloseIcon, {\n                fontSize: \"small\"\n              })\n            })\n          })]\n        }, index)), /*#__PURE__*/_jsx(Button, {\n          startIcon: /*#__PURE__*/_jsx(AddIcon, {}),\n          onClick: () => handleAddTestHeader(),\n          size: \"small\",\n          sx: {\n            mt: 1\n          },\n          children: \"Add Header\"\n        })]\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          mb: 2\n        },\n        children: [/*#__PURE__*/_jsx(Typography, {\n          variant: \"subtitle1\",\n          children: \"Request Payload\"\n        }), /*#__PURE__*/_jsxs(Box, {\n          children: [/*#__PURE__*/_jsx(IconButton, {\n            size: \"small\",\n            onClick: e => setTemplatesMenuAnchor(e.currentTarget),\n            sx: {\n              mr: 1\n            },\n            children: /*#__PURE__*/_jsx(AddIcon, {})\n          }), /*#__PURE__*/_jsx(IconButton, {\n            size: \"small\",\n            onClick: e => setHistoryMenuAnchor(e.currentTarget),\n            disabled: requestHistory.length === 0,\n            children: /*#__PURE__*/_jsx(HistoryIcon, {})\n          }), /*#__PURE__*/_jsxs(Menu, {\n            anchorEl: templatesMenuAnchor,\n            open: Boolean(templatesMenuAnchor),\n            onClose: () => setTemplatesMenuAnchor(null),\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              disabled: true,\n              children: /*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                children: \"Request Templates\"\n              })\n            }), /*#__PURE__*/_jsx(Divider, {}), templates.map(template => /*#__PURE__*/_jsxs(MenuItem, {\n              onClick: () => loadTemplateItem(template),\n              children: [/*#__PURE__*/_jsx(ListItemIcon, {\n                children: /*#__PURE__*/_jsx(AddIcon, {\n                  fontSize: \"small\"\n                })\n              }), /*#__PURE__*/_jsx(ListItemText, {\n                primary: template.name,\n                secondary: `Headers: ${template.headers.length}, Payload: ${template.payload.substring(0, 30)}...`\n              })]\n            }, template.id))]\n          }), /*#__PURE__*/_jsxs(Menu, {\n            anchorEl: historyMenuAnchor,\n            open: Boolean(historyMenuAnchor),\n            onClose: () => setHistoryMenuAnchor(null),\n            children: [/*#__PURE__*/_jsx(MenuItem, {\n              disabled: true,\n              children: /*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                children: \"Recent Requests\"\n              })\n            }), /*#__PURE__*/_jsx(Divider, {}), requestHistory.map((item, index) => /*#__PURE__*/_jsxs(MenuItem, {\n              onClick: () => loadHistoryItem(item),\n              children: [/*#__PURE__*/_jsx(ListItemIcon, {\n                children: /*#__PURE__*/_jsx(SendIcon, {\n                  fontSize: \"small\"\n                })\n              }), /*#__PURE__*/_jsx(ListItemText, {\n                primary: new Date(item.timestamp).toLocaleTimeString(),\n                secondary: `Payload: ${JSON.stringify(item.payload).substring(0, 30)}...`\n              })]\n            }, item.id))]\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(TextField, {\n        fullWidth: true,\n        multiline: true,\n        rows: 10,\n        value: testRequest.payload,\n        onChange: handleTestPayloadChange,\n        sx: {\n          mb: 3,\n          fontFamily: 'monospace'\n        },\n        error: (() => {\n          try {\n            JSON.parse(testRequest.payload);\n            return false;\n          } catch (e) {\n            return true;\n          }\n        })(),\n        helperText: (() => {\n          try {\n            JSON.parse(testRequest.payload);\n            return null;\n          } catch (e) {\n            return e.message;\n          }\n        })()\n      }), /*#__PURE__*/_jsxs(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsx(Button, {\n          onClick: () => setTestRequestDrawerOpen(false),\n          children: \"Cancel\"\n        }), /*#__PURE__*/_jsx(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: testingInProgress ? /*#__PURE__*/_jsx(CircularProgress, {\n            size: 20\n          }) : /*#__PURE__*/_jsx(SendIcon, {}),\n          onClick: sendTestRequest,\n          disabled: testingInProgress || (() => {\n            try {\n              JSON.parse(testRequest.payload);\n              return false;\n            } catch (e) {\n              return true;\n            }\n          })(),\n          children: \"Send Request\"\n        })]\n      }), testResults && /*#__PURE__*/_jsxs(Paper, {\n        sx: {\n          mt: 3,\n          p: 2\n        },\n        children: [/*#__PURE__*/_jsxs(Alert, {\n          severity: testResults.success ? 'success' : 'error',\n          sx: {\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsx(AlertTitle, {\n            children: testResults.success ? 'Webhook Test Successful' : 'Webhook Test Failed'\n          }), testResults.message]\n        }), /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            mb: 3\n          },\n          children: [/*#__PURE__*/_jsxs(Tabs, {\n            value: testResultsTabIndex,\n            onChange: (e, newValue) => setTestResultsTabIndex(newValue),\n            variant: \"scrollable\",\n            scrollButtons: \"auto\",\n            sx: {\n              borderBottom: 1,\n              borderColor: 'divider',\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsx(Tab, {\n              icon: /*#__PURE__*/_jsx(SendIcon, {\n                fontSize: \"small\"\n              }),\n              label: \"Request Inspector\",\n              iconPosition: \"start\"\n            }), /*#__PURE__*/_jsx(Tab, {\n              icon: /*#__PURE__*/_jsx(CheckIcon, {\n                fontSize: \"small\"\n              }),\n              label: \"Response Details\",\n              iconPosition: \"start\"\n            }), /*#__PURE__*/_jsx(Tab, {\n              icon: /*#__PURE__*/_jsx(CodeIcon, {\n                fontSize: \"small\"\n              }),\n              label: \"Validation Results\",\n              iconPosition: \"start\"\n            }), /*#__PURE__*/_jsx(Tab, {\n              icon: /*#__PURE__*/_jsx(TimelineIcon, {\n                fontSize: \"small\"\n              }),\n              label: \"Timeline\",\n              iconPosition: \"start\"\n            }), /*#__PURE__*/_jsx(Tab, {\n              icon: /*#__PURE__*/_jsx(SpeedIcon, {\n                fontSize: \"small\"\n              }),\n              label: \"Performance\",\n              iconPosition: \"start\"\n            })]\n          }), /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              display: testResultsTabIndex === 0 ? 'block' : 'none'\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"subtitle2\",\n              gutterBottom: true,\n              sx: {\n                mt: 2\n              },\n              children: \"Request Headers\"\n            }), /*#__PURE__*/_jsx(Paper, {\n              variant: \"outlined\",\n              sx: {\n                p: 1,\n                mb: 2,\n                maxHeight: 200,\n                overflow: 'auto'\n              },\n              children: /*#__PURE__*/_jsxs(\"table\", {\n                style: {\n                  width: '100%',\n                  borderCollapse: 'collapse'\n                },\n                children: [/*#__PURE__*/_jsx(\"thead\", {\n                  children: /*#__PURE__*/_jsxs(\"tr\", {\n                    children: [/*#__PURE__*/_jsx(\"th\", {\n                      style: {\n                        textAlign: 'left',\n                        padding: '8px',\n                        borderBottom: '1px solid rgba(224, 224, 224, 1)'\n                      },\n                      children: \"Header\"\n                    }), /*#__PURE__*/_jsx(\"th\", {\n                      style: {\n                        textAlign: 'left',\n                        padding: '8px',\n                        borderBottom: '1px solid rgba(224, 224, 224, 1)'\n                      },\n                      children: \"Value\"\n                    })]\n                  })\n                }), /*#__PURE__*/_jsx(\"tbody\", {\n                  children: testRequest.headers.map((header, index) => /*#__PURE__*/_jsxs(\"tr\", {\n                    children: [/*#__PURE__*/_jsx(\"td\", {\n                      style: {\n                        padding: '8px',\n                        borderBottom: '1px solid rgba(224, 224, 224, 1)'\n                      },\n                      children: header.key\n                    }), /*#__PURE__*/_jsx(\"td\", {\n                      style: {\n                        padding: '8px',\n                        borderBottom: '1px solid rgba(224, 224, 224, 1)'\n                      },\n                      children: header.value\n                    })]\n                  }, index))\n                })]\n              })\n            }), /*#__PURE__*/_jsx(Typography, {\n              variant: \"subtitle2\",\n              gutterBottom: true,\n              children: \"Request Payload\"\n            }), /*#__PURE__*/_jsx(Paper, {\n              variant: \"outlined\",\n              sx: {\n                p: 2,\n                mb: 2,\n                maxHeight: 200,\n                overflow: 'auto'\n              },\n              children: /*#__PURE__*/_jsx(Box, {\n                component: \"pre\",\n                sx: {\n                  m: 0,\n                  fontFamily: 'monospace',\n                  fontSize: '0.85rem'\n                },\n                children: (() => {\n                  try {\n                    return JSON.stringify(JSON.parse(testRequest.payload), null, 2);\n                  } catch (e) {\n                    return testRequest.payload;\n                  }\n                })()\n              })\n            })]\n          }), /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              display: testResultsTabIndex === 1 ? 'block' : 'none'\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"subtitle2\",\n              gutterBottom: true,\n              children: \"Processing Details\"\n            }), /*#__PURE__*/_jsxs(List, {\n              dense: true,\n              children: [/*#__PURE__*/_jsx(ListItem, {\n                divider: true,\n                children: /*#__PURE__*/_jsx(ListItemText, {\n                  primary: \"Received At\",\n                  secondary: new Date(testResults.receivedAt).toLocaleString()\n                })\n              }), /*#__PURE__*/_jsx(ListItem, {\n                divider: true,\n                children: /*#__PURE__*/_jsx(ListItemText, {\n                  primary: \"Processing Time\",\n                  secondary: `${testResults.processingTime}ms`\n                })\n              }), /*#__PURE__*/_jsx(ListItem, {\n                divider: true,\n                children: /*#__PURE__*/_jsx(ListItemText, {\n                  primary: \"Security Checks\",\n                  secondary: /*#__PURE__*/_jsxs(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [testResults.details.securityChecks === 'Passed' ? /*#__PURE__*/_jsx(CheckIcon, {\n                      fontSize: \"small\",\n                      color: \"success\",\n                      sx: {\n                        mr: 1\n                      }\n                    }) : testResults.details.securityChecks === 'Not configured' ? /*#__PURE__*/_jsx(WarningIcon, {\n                      fontSize: \"small\",\n                      color: \"warning\",\n                      sx: {\n                        mr: 1\n                      }\n                    }) : /*#__PURE__*/_jsx(CloseIcon, {\n                      fontSize: \"small\",\n                      color: \"error\",\n                      sx: {\n                        mr: 1\n                      }\n                    }), testResults.details.securityChecks]\n                  })\n                })\n              }), /*#__PURE__*/_jsx(ListItem, {\n                divider: true,\n                children: /*#__PURE__*/_jsx(ListItemText, {\n                  primary: \"Validation Checks\",\n                  secondary: /*#__PURE__*/_jsxs(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [testResults.details.validationChecks === 'Passed' ? /*#__PURE__*/_jsx(CheckIcon, {\n                      fontSize: \"small\",\n                      color: \"success\",\n                      sx: {\n                        mr: 1\n                      }\n                    }) : testResults.details.validationChecks === 'Not enabled' ? /*#__PURE__*/_jsx(WarningIcon, {\n                      fontSize: \"small\",\n                      color: \"warning\",\n                      sx: {\n                        mr: 1\n                      }\n                    }) : /*#__PURE__*/_jsx(CloseIcon, {\n                      fontSize: \"small\",\n                      color: \"error\",\n                      sx: {\n                        mr: 1\n                      }\n                    }), testResults.details.validationChecks]\n                  })\n                })\n              }), /*#__PURE__*/_jsx(ListItem, {\n                children: /*#__PURE__*/_jsx(ListItemText, {\n                  primary: \"Rate Limiting\",\n                  secondary: /*#__PURE__*/_jsxs(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center'\n                    },\n                    children: [testResults.details.rateLimiting === 'Active' ? /*#__PURE__*/_jsx(CheckIcon, {\n                      fontSize: \"small\",\n                      color: \"success\",\n                      sx: {\n                        mr: 1\n                      }\n                    }) : /*#__PURE__*/_jsx(WarningIcon, {\n                      fontSize: \"small\",\n                      color: \"warning\",\n                      sx: {\n                        mr: 1\n                      }\n                    }), testResults.details.rateLimiting]\n                  })\n                })\n              })]\n            })]\n          }), /*#__PURE__*/_jsx(Box, {\n            sx: {\n              display: testResultsTabIndex === 2 ? 'block' : 'none',\n              mt: 3\n            },\n            children: testResults.validationDetails ? /*#__PURE__*/_jsxs(_Fragment, {\n              children: [/*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Schema Validation Results\"\n              }), /*#__PURE__*/_jsx(Paper, {\n                variant: \"outlined\",\n                sx: {\n                  p: 2,\n                  backgroundColor: testResults.validationDetails.valid ? 'success.lightest' : 'error.lightest',\n                  maxHeight: 300,\n                  overflow: 'auto'\n                },\n                children: testResults.validationDetails.valid ? /*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    display: 'flex',\n                    alignItems: 'center'\n                  },\n                  children: [/*#__PURE__*/_jsx(CheckIcon, {\n                    color: \"success\",\n                    sx: {\n                      mr: 1\n                    }\n                  }), /*#__PURE__*/_jsx(Typography, {\n                    children: \"Payload passed validation against the JSON Schema\"\n                  })]\n                }) : /*#__PURE__*/_jsxs(_Fragment, {\n                  children: [/*#__PURE__*/_jsxs(Box, {\n                    sx: {\n                      display: 'flex',\n                      alignItems: 'center',\n                      mb: 2\n                    },\n                    children: [/*#__PURE__*/_jsx(CloseIcon, {\n                      color: \"error\",\n                      sx: {\n                        mr: 1\n                      }\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      children: \"Payload failed validation against the JSON Schema\"\n                    })]\n                  }), /*#__PURE__*/_jsx(Typography, {\n                    variant: \"subtitle2\",\n                    gutterBottom: true,\n                    children: \"Validation Errors:\"\n                  }), /*#__PURE__*/_jsx(Box, {\n                    component: \"pre\",\n                    sx: {\n                      m: 0,\n                      fontFamily: 'monospace',\n                      fontSize: '0.85rem'\n                    },\n                    children: JSON.stringify(testResults.validationDetails.errors, null, 2)\n                  })]\n                })\n              })]\n            }) : /*#__PURE__*/_jsxs(Alert, {\n              severity: \"info\",\n              sx: {\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsx(AlertTitle, {\n                children: \"Validation Not Configured\"\n              }), \"Enable schema validation in the Validation tab to see validation results.\"]\n            })\n          }), /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              display: testResultsTabIndex === 3 ? 'block' : 'none',\n              mt: 3\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"subtitle2\",\n              gutterBottom: true,\n              children: \"Webhook Processing Timeline\"\n            }), testResults.timeline && /*#__PURE__*/_jsxs(Paper, {\n              variant: \"outlined\",\n              sx: {\n                p: 2,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxs(Box, {\n                sx: {\n                  position: 'relative',\n                  height: 'auto',\n                  minHeight: '200px',\n                  mt: 3,\n                  mb: 2\n                },\n                children: [/*#__PURE__*/_jsx(Box, {\n                  sx: {\n                    position: 'relative',\n                    height: '6px',\n                    bgcolor: 'grey.200',\n                    borderRadius: '3px',\n                    mb: 5,\n                    mt: 3\n                  },\n                  children: testResults.timeline.map((event, index) => {\n                    // Calculate position as percentage of total time\n                    const startTime = new Date(testResults.timeline[0].timestamp).getTime();\n                    const endTime = new Date(testResults.timeline[testResults.timeline.length - 1].timestamp).getTime();\n                    const totalDuration = endTime - startTime;\n                    const eventTime = new Date(event.timestamp).getTime();\n                    const position = (eventTime - startTime) / totalDuration * 100;\n                    return /*#__PURE__*/_jsx(Box, {\n                      sx: {\n                        position: 'absolute',\n                        left: `${position}%`,\n                        top: 0,\n                        transform: 'translate(-50%, -50%)',\n                        width: '16px',\n                        height: '16px',\n                        borderRadius: '50%',\n                        bgcolor: event.stage === 'completed' ? 'success.main' : event.stage === 'error' ? 'error.main' : 'primary.main',\n                        border: '2px solid',\n                        borderColor: 'background.paper',\n                        zIndex: 2,\n                        '&:hover': {\n                          boxShadow: '0 0 0 4px rgba(25, 118, 210, 0.2)'\n                        }\n                      }\n                    }, index);\n                  })\n                }), testResults.timeline.map((event, index) => {\n                  // Calculate position as percentage of total time\n                  const startTime = new Date(testResults.timeline[0].timestamp).getTime();\n                  const endTime = new Date(testResults.timeline[testResults.timeline.length - 1].timestamp).getTime();\n                  const totalDuration = endTime - startTime;\n                  const eventTime = new Date(event.timestamp).getTime();\n                  const position = (eventTime - startTime) / totalDuration * 100;\n\n                  // Alternate labels above and below the timeline\n                  const isAbove = index % 2 === 0;\n                  return /*#__PURE__*/_jsxs(Box, {\n                    sx: {\n                      position: 'absolute',\n                      left: `${position}%`,\n                      top: isAbove ? '-20px' : '20px',\n                      transform: 'translateX(-50%)',\n                      textAlign: 'center',\n                      width: '120px'\n                    },\n                    children: [/*#__PURE__*/_jsx(Typography, {\n                      variant: \"caption\",\n                      sx: {\n                        display: 'block',\n                        fontWeight: 'bold'\n                      },\n                      children: event.stage.charAt(0).toUpperCase() + event.stage.slice(1)\n                    }), /*#__PURE__*/_jsx(Typography, {\n                      variant: \"caption\",\n                      sx: {\n                        display: 'block'\n                      },\n                      children: `+${event.durationMs}ms`\n                    })]\n                  }, `label-${index}`);\n                })]\n              }), /*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                sx: {\n                  mt: 4\n                },\n                children: \"Event Details\"\n              }), /*#__PURE__*/_jsx(List, {\n                dense: true,\n                children: testResults.timeline.map((event, index) => /*#__PURE__*/_jsx(ListItem, {\n                  divider: index < testResults.timeline.length - 1,\n                  children: /*#__PURE__*/_jsx(ListItemText, {\n                    primary: /*#__PURE__*/_jsxs(Box, {\n                      sx: {\n                        display: 'flex',\n                        justifyContent: 'space-between'\n                      },\n                      children: [/*#__PURE__*/_jsx(Typography, {\n                        variant: \"body2\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: event.stage.charAt(0).toUpperCase() + event.stage.slice(1)\n                      }), /*#__PURE__*/_jsx(Typography, {\n                        variant: \"body2\",\n                        children: `+${event.durationMs}ms`\n                      })]\n                    }),\n                    secondary: event.details\n                  })\n                }, index))\n              })]\n            })]\n          }), /*#__PURE__*/_jsxs(Box, {\n            sx: {\n              display: testResultsTabIndex === 4 ? 'block' : 'none',\n              mt: 3\n            },\n            children: [/*#__PURE__*/_jsx(Typography, {\n              variant: \"subtitle2\",\n              gutterBottom: true,\n              children: \"Performance Analysis\"\n            }), testResults.performanceMetrics && /*#__PURE__*/_jsxs(Paper, {\n              variant: \"outlined\",\n              sx: {\n                p: 2,\n                mb: 2\n              },\n              children: [/*#__PURE__*/_jsxs(Box, {\n                sx: {\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  alignItems: 'center',\n                  mb: 2\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"body1\",\n                  sx: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"Total Processing Time\"\n                }), /*#__PURE__*/_jsxs(Typography, {\n                  variant: \"body1\",\n                  children: [testResults.performanceMetrics.totalTime, \"ms\"]\n                })]\n              }), /*#__PURE__*/_jsx(Divider, {\n                sx: {\n                  mb: 2\n                }\n              }), /*#__PURE__*/_jsx(Typography, {\n                variant: \"subtitle2\",\n                gutterBottom: true,\n                children: \"Processing Breakdown\"\n              }), testResults.performanceMetrics.breakdowns.map((breakdown, index) => /*#__PURE__*/_jsxs(Box, {\n                sx: {\n                  mb: 2\n                },\n                children: [/*#__PURE__*/_jsxs(Box, {\n                  sx: {\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    mb: 0.5\n                  },\n                  children: [/*#__PURE__*/_jsx(Typography, {\n                    variant: \"body2\",\n                    children: breakdown.stage\n                  }), /*#__PURE__*/_jsxs(Typography, {\n                    variant: \"body2\",\n                    children: [breakdown.timeMs, \"ms (\", breakdown.percentage, \"%)\"]\n                  })]\n                }), /*#__PURE__*/_jsx(Box, {\n                  sx: {\n                    width: '100%',\n                    bgcolor: 'grey.200',\n                    height: '8px',\n                    borderRadius: '4px',\n                    overflow: 'hidden'\n                  },\n                  children: /*#__PURE__*/_jsx(Box, {\n                    sx: {\n                      width: `${breakdown.percentage}%`,\n                      bgcolor: index === 0 ? 'info.main' : index === 1 ? 'success.main' : 'warning.main',\n                      height: '100%'\n                    }\n                  })\n                })]\n              }, index)), testResults.performanceMetrics.bottlenecks.length > 0 && /*#__PURE__*/_jsxs(Box, {\n                sx: {\n                  mt: 3\n                },\n                children: [/*#__PURE__*/_jsx(Typography, {\n                  variant: \"subtitle2\",\n                  gutterBottom: true,\n                  children: \"Potential Bottlenecks\"\n                }), /*#__PURE__*/_jsx(List, {\n                  dense: true,\n                  children: testResults.performanceMetrics.bottlenecks.map((bottleneck, index) => /*#__PURE__*/_jsxs(ListItem, {\n                    sx: {\n                      pl: 0\n                    },\n                    children: [/*#__PURE__*/_jsx(ListItemIcon, {\n                      sx: {\n                        minWidth: '30px'\n                      },\n                      children: /*#__PURE__*/_jsx(WarningIcon, {\n                        color: \"warning\",\n                        fontSize: \"small\"\n                      })\n                    }), /*#__PURE__*/_jsx(ListItemText, {\n                      primary: bottleneck\n                    })]\n                  }, index))\n                }), /*#__PURE__*/_jsxs(Alert, {\n                  severity: \"info\",\n                  sx: {\n                    mt: 2\n                  },\n                  children: [/*#__PURE__*/_jsx(AlertTitle, {\n                    children: \"Performance Optimization Tips\"\n                  }), /*#__PURE__*/_jsx(Typography, {\n                    variant: \"body2\",\n                    gutterBottom: true,\n                    children: \"Consider the following to improve webhook processing performance:\"\n                  }), /*#__PURE__*/_jsxs(\"ul\", {\n                    style: {\n                      margin: 0,\n                      paddingLeft: '20px'\n                    },\n                    children: [/*#__PURE__*/_jsx(\"li\", {\n                      children: \"Simplify the schema validation for faster payload validation\"\n                    }), /*#__PURE__*/_jsx(\"li\", {\n                      children: \"Use lightweight security methods for non-sensitive data\"\n                    }), /*#__PURE__*/_jsx(\"li\", {\n                      children: \"Implement asynchronous processing for complex transformations\"\n                    })]\n                  })]\n                })]\n              })]\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'space-between',\n            mt: 3\n          },\n          children: [/*#__PURE__*/_jsxs(Box, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              variant: \"outlined\",\n              startIcon: /*#__PURE__*/_jsx(HistoryIcon, {}),\n              onClick: () => setHistoryMenuAnchor(document.getElementById('requestHistoryBtn')),\n              sx: {\n                mr: 1\n              },\n              children: \"View History\"\n            }), /*#__PURE__*/_jsx(Button, {\n              variant: \"outlined\",\n              onClick: saveAsTemplate,\n              startIcon: /*#__PURE__*/_jsx(SaveTemplateIcon, {}),\n              children: \"Save as Template\"\n            })]\n          }), /*#__PURE__*/_jsx(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsx(CloudDownloadIcon, {}),\n            onClick: () => {\n              // Create a blob with the test results\n              const data = JSON.stringify({\n                request: {\n                  headers: testRequest.headers,\n                  payload: (() => {\n                    try {\n                      return JSON.parse(testRequest.payload);\n                    } catch (e) {\n                      return testRequest.payload;\n                    }\n                  })()\n                },\n                response: testResults,\n                timestamp: new Date().toISOString()\n              }, null, 2);\n              const blob = new Blob([data], {\n                type: 'application/json'\n              });\n              const url = URL.createObjectURL(blob);\n\n              // Create a link and click it to trigger the download\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = `webhook-test-${new Date().toISOString().replace(/:/g, '-')}.json`;\n              document.body.appendChild(a);\n              a.click();\n\n              // Clean up\n              document.body.removeChild(a);\n              URL.revokeObjectURL(url);\n            },\n            children: \"Export Results\"\n          })]\n        })]\n      })]\n    })]\n  });\n};\nexport default WebhookConfiguration;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}