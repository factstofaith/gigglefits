{"ast":null,"code":"/**\n * Feature Flags Service\n * \n * Simple service for managing feature flags in the application.\n */\n\n// Default feature flags configuration\nconst defaultFeatureFlags = {\n  // Core features\n  newDesignSystem: true,\n  enhancedErrorHandling: true,\n  advancedAnalytics: false,\n  // UI components\n  newNavigationBar: false,\n  enhancedDataTable: false,\n  newDashboardLayout: false,\n  // Features\n  multiTenantSupport: true,\n  advancedFileUpload: false,\n  enhancedDataVisualization: false,\n  // Experimental\n  betaFeatures: false,\n  experimentalUI: false\n};\n\n// Current feature flags state\nlet currentFeatureFlags = {\n  ...defaultFeatureFlags\n};\n\n// Check if a feature is enabled\nfunction isFeatureEnabled(featureName) {\n  if (!(featureName in currentFeatureFlags)) {\n    console.warn(`Feature flag \"${featureName}\" is not defined`);\n    return false;\n  }\n  return currentFeatureFlags[featureName];\n}\n\n// Set a feature flag (for testing/development)\nfunction setFeatureFlag(featureName, value) {\n  if (!(featureName in currentFeatureFlags)) {\n    console.warn(`Feature flag \"${featureName}\" is not defined`);\n    return false;\n  }\n  currentFeatureFlags[featureName] = !!value;\n  return true;\n}\n\n// Reset all feature flags to default values\nfunction resetFeatureFlags() {\n  currentFeatureFlags = {\n    ...defaultFeatureFlags\n  };\n  return currentFeatureFlags;\n}\n\n// Get all feature flags\nfunction getAllFeatureFlags() {\n  return {\n    ...currentFeatureFlags\n  };\n}\n\n// Get a stub hook function - actual implementation will be in hook files\nfunction createUseFeatureFlag() {\n  return function useFeatureFlag(featureName) {\n    return isFeatureEnabled(featureName);\n  };\n}\nexport default {\n  isEnabled: isFeatureEnabled,\n  setFlag: setFeatureFlag,\n  resetFlags: resetFeatureFlags,\n  getAllFlags: getAllFeatureFlags,\n  createUseFeatureFlag\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}