{"ast":null,"code":"/**\n * AzureCredentialManager.jsx\n * \n * A component for securely managing Azure Blob Storage credentials. It provides an\n * interface for entering, testing, and securely storing Azure credentials.\n */import React,{useState,useEffect,useCallback}from'react';import{Box,Button,Card,CardContent,CardHeader,CircularProgress,Dialog,DialogActions,DialogContent,DialogContentText,DialogTitle,Divider,FormControl,FormControlLabel,FormHelperText,Grid,IconButton,InputAdornment,MenuItem,Paper,Radio,RadioGroup,Select,Stack,Switch,TextField,Tooltip,Typography,Alert,AlertTitle,Collapse,Chip}from'@mui/material';// Icons\nimport{Info as InfoIcon,Visibility as VisibilityIcon,VisibilityOff as VisibilityOffIcon,Save as SaveIcon,Delete as DeleteIcon,CheckCircle as CheckCircleIcon,Error as ErrorIcon,LockOutlined as LockIcon,LockOpen as UnlockIcon,Refresh as RefreshIcon,Key as KeyIcon}from'@mui/icons-material';// Services\nimport{credentialService}from\"../../../services/credentialService\";/**\n * AzureCredentialManager component for securely managing Azure Blob Storage credentials\n */import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const AzureCredentialManager=_ref=>{let{onCredentialsSaved,onCredentialsLoaded,readOnly=false,showSaveControls=true,initialVisible=false}=_ref;// Credential state\nconst[credentials,setCredentials]=useState({authMethod:'connectionString',connectionString:'',accountName:'',accountKey:'',sasToken:'',tenantId:'',clientId:'',clientSecret:'',useManagedIdentity:false});// UI state\nconst[showSecrets,setShowSecrets]=useState(false);const[loading,setLoading]=useState(false);const[saving,setSaving]=useState(false);const[expanded,setExpanded]=useState(initialVisible);const[showDeleteConfirm,setShowDeleteConfirm]=useState(false);const[hasStoredCredentials,setHasStoredCredentials]=useState(false);const[lastUpdated,setLastUpdated]=useState(null);// Status messages\nconst[status,setStatus]=useState(null);const[error,setError]=useState(null);// Test result state\nconst[testResult,setTestResult]=useState(null);/**\n   * Fetch stored credentials on component mount\n   */useEffect(()=>{const loadCredentials=async()=>{setLoading(true);try{// First check if credentials exist without requesting secrets\nconst hasCredsResult=await credentialService.hasCredentials('azure');setHasStoredCredentials(hasCredsResult);// If credentials exist and component is expanded, load them\nif(hasCredsResult&&expanded){const result=await credentialService.getCredentials('azure',true);if(result.success&&result.data){// Determine the auth method from the credentials\nlet authMethod='connectionString';if(result.data.connection_string){authMethod='connectionString';}else if(result.data.sas_token){authMethod='sasToken';}else if(result.data.client_id&&result.data.client_secret){authMethod='servicePrincipal';}else if(result.data.account_key){authMethod='accountKey';}else{authMethod='managedIdentity';}const newCredentials={authMethod,connectionString:result.data.connection_string||'',accountName:result.data.account_name||'',accountKey:result.data.account_key||'',sasToken:result.data.sas_token||'',tenantId:result.data.tenant_id||'',clientId:result.data.client_id||'',clientSecret:result.data.client_secret||'',useManagedIdentity:authMethod==='managedIdentity'};setCredentials(newCredentials);setLastUpdated(result.data.last_updated);// Notify parent component\nif(onCredentialsLoaded){onCredentialsLoaded(newCredentials);}}}}catch(err){console.error('Error loading credentials:',err);setError('Failed to load stored credentials');}finally{setLoading(false);}};loadCredentials();},[expanded,onCredentialsLoaded]);/**\n   * Handle input change\n   */const handleChange=e=>{const{name,value,type,checked}=e.target;const newValue=type==='checkbox'?checked:value;// Update credentials state\nsetCredentials(prev=>{// If changing auth method, reset related fields\nif(name==='authMethod'){const updated={...prev,[name]:newValue,// Reset all credential fields\nconnectionString:'',accountKey:'',sasToken:'',clientId:'',clientSecret:''// Keep account name for all methods\n};// Set managed identity flag\nif(newValue==='managedIdentity'){updated.useManagedIdentity=true;}else{updated.useManagedIdentity=false;}return updated;}return{...prev,[name]:newValue};});// Clear any status or error messages\nsetStatus(null);setError(null);setTestResult(null);};/**\n   * Toggle visibility of secret fields\n   */const toggleShowSecrets=()=>{setShowSecrets(!showSecrets);};/**\n   * Toggle expansion of the credential form\n   */const toggleExpanded=()=>{setExpanded(!expanded);};/**\n   * Save credentials to secure storage\n   */const saveCredentials=async()=>{setSaving(true);setStatus(null);setError(null);try{// Convert credentials format for storage\nconst storageCredentials={connection_string:credentials.authMethod==='connectionString'?credentials.connectionString:'',account_name:credentials.accountName,account_key:credentials.authMethod==='accountKey'?credentials.accountKey:'',sas_token:credentials.authMethod==='sasToken'?credentials.sasToken:'',tenant_id:credentials.authMethod==='servicePrincipal'?credentials.tenantId:'',client_id:credentials.authMethod==='servicePrincipal'?credentials.clientId:'',client_secret:credentials.authMethod==='servicePrincipal'?credentials.clientSecret:'',use_managed_identity:credentials.authMethod==='managedIdentity'};// Store credentials\nconst result=await credentialService.storeCredentials('azure',storageCredentials);if(result.success){setStatus('Credentials saved successfully');setHasStoredCredentials(true);setLastUpdated(new Date().toISOString());// Notify parent component\nif(onCredentialsSaved){onCredentialsSaved(credentials);}}else{setError(result.message||'Failed to save credentials');}}catch(err){console.error('Error saving credentials:',err);setError('An error occurred while saving credentials');}finally{setSaving(false);}};/**\n   * Delete stored credentials\n   */const deleteCredentials=async()=>{setLoading(true);setStatus(null);setError(null);try{const result=await credentialService.deleteCredentials('azure');if(result.success){setStatus('Credentials deleted successfully');setHasStoredCredentials(false);setLastUpdated(null);// Reset form\nsetCredentials({authMethod:'connectionString',connectionString:'',accountName:'',accountKey:'',sasToken:'',tenantId:'',clientId:'',clientSecret:'',useManagedIdentity:false});// Notify parent component\nif(onCredentialsSaved){onCredentialsSaved(null);}}else{setError(result.message||'Failed to delete credentials');}}catch(err){console.error('Error deleting credentials:',err);setError('An error occurred while deleting credentials');}finally{setLoading(false);setShowDeleteConfirm(false);}};/**\n   * Test credentials by connecting to Azure\n   */const testConnection=useCallback(async()=>{setLoading(true);setStatus(null);setError(null);setTestResult(null);try{// Format credentials for testing\nconst testCredentials={connection_string:credentials.authMethod==='connectionString'?credentials.connectionString:'',account_name:credentials.accountName,account_key:credentials.authMethod==='accountKey'?credentials.accountKey:'',sas_token:credentials.authMethod==='sasToken'?credentials.sasToken:'',tenant_id:credentials.authMethod==='servicePrincipal'?credentials.tenantId:'',client_id:credentials.authMethod==='servicePrincipal'?credentials.clientId:'',client_secret:credentials.authMethod==='servicePrincipal'?credentials.clientSecret:'',use_managed_identity:credentials.authMethod==='managedIdentity'};// Send test request\nconst result=await credentialService.testCredentials('azure',testCredentials);setTestResult(result);if(result.success){setStatus('Connection successful');}else{setError(result.message||'Connection failed');}}catch(err){console.error('Error testing credentials:',err);setError('An error occurred during connection test');setTestResult({success:false,message:'An error occurred during connection test',details:{error:err.message}});}finally{setLoading(false);}},[credentials]);/**\n   * Validate if credentials are complete for the selected auth method\n   */const validateCredentials=useCallback(()=>{switch(credentials.authMethod){case'connectionString':return credentials.connectionString.trim()!=='';case'accountKey':return credentials.accountName.trim()!==''&&credentials.accountKey.trim()!=='';case'sasToken':return credentials.accountName.trim()!==''&&credentials.sasToken.trim()!=='';case'servicePrincipal':return credentials.accountName.trim()!==''&&credentials.tenantId.trim()!==''&&credentials.clientId.trim()!==''&&credentials.clientSecret.trim()!=='';case'managedIdentity':return credentials.accountName.trim()!=='';default:return false;}},[credentials]);// Check if credentials are valid\nconst isValid=validateCredentials();/**\n   * Format date for display\n   */const formatDate=dateString=>{if(!dateString)return'Never';try{const date=new Date(dateString);return date.toLocaleString();}catch(err){return'Unknown';}};// Authentication method options\nconst authMethods=[{value:'connectionString',label:'Connection String'},{value:'accountKey',label:'Account Name & Key'},{value:'sasToken',label:'SAS Token'},{value:'servicePrincipal',label:'Service Principal'},{value:'managedIdentity',label:'Managed Identity'}];// Field visibility based on selected auth method\nconst showConnectionString=credentials.authMethod==='connectionString';const showAccountKey=credentials.authMethod==='accountKey';const showSasToken=credentials.authMethod==='sasToken';const showServicePrincipal=credentials.authMethod==='servicePrincipal';const showAccountName=credentials.authMethod!=='connectionString';return/*#__PURE__*/_jsxs(Card,{variant:\"outlined\",children:[/*#__PURE__*/_jsx(CardHeader,{title:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center'},children:[/*#__PURE__*/_jsx(KeyIcon,{sx:{mr:1,color:'primary.main'}}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Azure Blob Storage Credentials\"}),hasStoredCredentials&&/*#__PURE__*/_jsx(Chip,{label:\"Credentials Stored\",color:\"success\",size:\"small\",icon:/*#__PURE__*/_jsx(LockIcon,{}),sx:{ml:2}})]}),/*#__PURE__*/_jsx(IconButton,{onClick:toggleExpanded,children:expanded?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})})]}),subheader:hasStoredCredentials?/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",color:\"text.secondary\",children:[\"Last Updated: \",formatDate(lastUpdated)]}):/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"text.secondary\",children:\"No stored credentials\"})}),/*#__PURE__*/_jsx(Collapse,{in:expanded,children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsxs(Box,{sx:{mb:3},children:[/*#__PURE__*/_jsx(Typography,{variant:\"subtitle2\",gutterBottom:true,children:\"Authentication Method\"}),/*#__PURE__*/_jsx(FormControl,{component:\"fieldset\",children:/*#__PURE__*/_jsx(RadioGroup,{row:true,name:\"authMethod\",value:credentials.authMethod,onChange:handleChange,children:authMethods.map(method=>/*#__PURE__*/_jsx(FormControlLabel,{value:method.value,control:/*#__PURE__*/_jsx(Radio,{}),label:method.label,disabled:loading||readOnly},method.value))})})]}),/*#__PURE__*/_jsxs(Grid,{container:true,spacing:2,children:[showConnectionString&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"connectionString\",label:\"Connection String\",value:credentials.connectionString,onChange:handleChange,type:showSecrets?'text':'password',disabled:loading||readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsxs(InputAdornment,{position:\"end\",children:[/*#__PURE__*/_jsx(IconButton,{onClick:toggleShowSecrets,edge:\"end\",children:showSecrets?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})}),/*#__PURE__*/_jsx(Tooltip,{title:\"The connection string for your Azure Storage account. Format: DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...;EndpointSuffix=core.windows.net\",children:/*#__PURE__*/_jsx(IconButton,{edge:\"end\",children:/*#__PURE__*/_jsx(InfoIcon,{})})})]})}}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Full Azure Storage connection string with account name and key\"})]})}),showAccountName&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:showAccountKey||showSasToken?6:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"accountName\",label:\"Storage Account Name\",value:credentials.accountName,onChange:handleChange,disabled:loading||readOnly}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Name of your Azure Storage account\"})]})}),showAccountKey&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"accountKey\",label:\"Account Key\",value:credentials.accountKey,onChange:handleChange,type:showSecrets?'text':'password',disabled:loading||readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(IconButton,{onClick:toggleShowSecrets,edge:\"end\",children:showSecrets?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})})})}}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Azure Storage account access key\"})]})}),showSasToken&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"sasToken\",label:\"SAS Token\",value:credentials.sasToken,onChange:handleChange,type:showSecrets?'text':'password',disabled:loading||readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(IconButton,{onClick:toggleShowSecrets,edge:\"end\",children:showSecrets?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})})})}}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Shared Access Signature token (include the leading '?')\"})]})}),showServicePrincipal&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"tenantId\",label:\"Tenant ID\",value:credentials.tenantId,onChange:handleChange,disabled:loading||readOnly}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Azure AD tenant ID\"})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:6,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"clientId\",label:\"Client ID\",value:credentials.clientId,onChange:handleChange,disabled:loading||readOnly}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Azure AD application (client) ID\"})]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(TextField,{name:\"clientSecret\",label:\"Client Secret\",value:credentials.clientSecret,onChange:handleChange,type:showSecrets?'text':'password',disabled:loading||readOnly,InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(IconButton,{onClick:toggleShowSecrets,edge:\"end\",children:showSecrets?/*#__PURE__*/_jsx(VisibilityOffIcon,{}):/*#__PURE__*/_jsx(VisibilityIcon,{})})})}}),/*#__PURE__*/_jsx(FormHelperText,{children:\"Azure AD application client secret\"})]})})]}),credentials.authMethod==='managedIdentity'&&/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Paper,{variant:\"outlined\",sx:{p:2,bgcolor:'background.default'},children:/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",children:\"Using Azure Managed Identity for authentication. No additional credentials required. The application will use the system-assigned identity in the Azure environment.\"})})})]}),(status||error||testResult)&&/*#__PURE__*/_jsxs(Box,{sx:{mt:3},children:[status&&!error&&/*#__PURE__*/_jsx(Alert,{severity:\"success\",sx:{mb:2},children:status}),error&&/*#__PURE__*/_jsx(Alert,{severity:\"error\",sx:{mb:2},children:error}),testResult&&/*#__PURE__*/_jsxs(Alert,{severity:testResult.success?'success':'error',sx:{mb:2},children:[/*#__PURE__*/_jsx(AlertTitle,{children:testResult.success?'Connection Test Successful':'Connection Test Failed'}),/*#__PURE__*/_jsx(Typography,{variant:\"body2\",children:testResult.message}),testResult.details&&/*#__PURE__*/_jsx(Box,{sx:{mt:1},children:testResult.success?/*#__PURE__*/_jsxs(_Fragment,{children:[testResult.details.containers&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Found \",testResult.details.containers,\" container(s)\"]}),testResult.details.account&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Account: \",testResult.details.account]}),testResult.details.permissions&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Permissions: \",testResult.details.permissions.join(', ')]})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[testResult.details.error&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Error: \",testResult.details.error]}),testResult.details.code&&/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"Code: \",testResult.details.code]})]})})]})]}),showSaveControls&&/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',justifyContent:'space-between',mt:3},children:[/*#__PURE__*/_jsx(Box,{children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",disabled:!isValid||loading||readOnly,onClick:testConnection,startIcon:loading?/*#__PURE__*/_jsx(CircularProgress,{size:20}):/*#__PURE__*/_jsx(RefreshIcon,{}),children:\"Test Connection\"})}),/*#__PURE__*/_jsxs(Box,{children:[hasStoredCredentials&&/*#__PURE__*/_jsx(Button,{variant:\"outlined\",color:\"error\",onClick:()=>setShowDeleteConfirm(true),disabled:loading||readOnly,startIcon:/*#__PURE__*/_jsx(DeleteIcon,{}),sx:{mr:1},children:\"Delete\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",disabled:!isValid||loading||readOnly,onClick:saveCredentials,startIcon:saving?/*#__PURE__*/_jsx(CircularProgress,{size:20}):/*#__PURE__*/_jsx(SaveIcon,{}),children:saving?'Saving...':hasStoredCredentials?'Update':'Save'})]})]})]})}),/*#__PURE__*/_jsxs(Dialog,{open:showDeleteConfirm,onClose:()=>setShowDeleteConfirm(false),children:[/*#__PURE__*/_jsx(DialogTitle,{children:\"Delete Credentials?\"}),/*#__PURE__*/_jsx(DialogContent,{children:/*#__PURE__*/_jsx(DialogContentText,{children:\"Are you sure you want to delete the stored Azure Blob Storage credentials? This action cannot be undone.\"})}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:()=>setShowDeleteConfirm(false),autoFocus:true,children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{onClick:deleteCredentials,color:\"error\",children:\"Delete\"})]})]})]});};export default AzureCredentialManager;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Button","Card","CardContent","CardHeader","CircularProgress","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","Divider","FormControl","FormControlLabel","FormHelperText","Grid","IconButton","InputAdornment","MenuItem","Paper","Radio","RadioGroup","Select","Stack","Switch","TextField","Tooltip","Typography","Alert","AlertTitle","Collapse","Chip","Info","InfoIcon","Visibility","VisibilityIcon","VisibilityOff","VisibilityOffIcon","Save","SaveIcon","Delete","DeleteIcon","CheckCircle","CheckCircleIcon","Error","ErrorIcon","LockOutlined","LockIcon","LockOpen","UnlockIcon","Refresh","RefreshIcon","Key","KeyIcon","credentialService","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","AzureCredentialManager","_ref","onCredentialsSaved","onCredentialsLoaded","readOnly","showSaveControls","initialVisible","credentials","setCredentials","authMethod","connectionString","accountName","accountKey","sasToken","tenantId","clientId","clientSecret","useManagedIdentity","showSecrets","setShowSecrets","loading","setLoading","saving","setSaving","expanded","setExpanded","showDeleteConfirm","setShowDeleteConfirm","hasStoredCredentials","setHasStoredCredentials","lastUpdated","setLastUpdated","status","setStatus","error","setError","testResult","setTestResult","loadCredentials","hasCredsResult","hasCredentials","result","getCredentials","success","data","connection_string","sas_token","client_id","client_secret","account_key","newCredentials","account_name","tenant_id","last_updated","err","console","handleChange","e","name","value","type","checked","target","newValue","prev","updated","toggleShowSecrets","toggleExpanded","saveCredentials","storageCredentials","use_managed_identity","storeCredentials","Date","toISOString","message","deleteCredentials","testConnection","testCredentials","details","validateCredentials","trim","isValid","formatDate","dateString","date","toLocaleString","authMethods","label","showConnectionString","showAccountKey","showSasToken","showServicePrincipal","showAccountName","variant","children","title","sx","display","alignItems","justifyContent","mr","color","size","icon","ml","onClick","subheader","in","mb","gutterBottom","component","row","onChange","map","method","control","disabled","container","spacing","item","xs","fullWidth","InputProps","endAdornment","position","edge","md","p","bgcolor","mt","severity","containers","account","permissions","join","code","startIcon","open","onClose","autoFocus"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/frontend/src/components/integration/azure/AzureCredentialManager.jsx"],"sourcesContent":["/**\n * AzureCredentialManager.jsx\n * \n * A component for securely managing Azure Blob Storage credentials. It provides an\n * interface for entering, testing, and securely storing Azure credentials.\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  CircularProgress,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  Grid,\n  IconButton,\n  InputAdornment,\n  MenuItem,\n  Paper,\n  Radio,\n  RadioGroup,\n  Select,\n  Stack,\n  Switch,\n  TextField,\n  Tooltip,\n  Typography,\n  Alert,\n  AlertTitle,\n  Collapse,\n  Chip,\n} from '@mui/material';\n\n// Icons\nimport {\n  Info as InfoIcon,\n  Visibility as VisibilityIcon,\n  VisibilityOff as VisibilityOffIcon,\n  Save as SaveIcon,\n  Delete as DeleteIcon,\n  CheckCircle as CheckCircleIcon,\n  Error as ErrorIcon,\n  LockOutlined as LockIcon,\n  LockOpen as UnlockIcon,\n  Refresh as RefreshIcon,\n  Key as KeyIcon,\n} from '@mui/icons-material';\n\n// Services\nimport { credentialService } from '../../../services/credentialService';\n\n/**\n * AzureCredentialManager component for securely managing Azure Blob Storage credentials\n */\nconst AzureCredentialManager = ({ \n  onCredentialsSaved,\n  onCredentialsLoaded,\n  readOnly = false,\n  showSaveControls = true,\n  initialVisible = false,\n}) => {\n  // Credential state\n  const [credentials, setCredentials] = useState({\n    authMethod: 'connectionString',\n    connectionString: '',\n    accountName: '',\n    accountKey: '',\n    sasToken: '',\n    tenantId: '',\n    clientId: '',\n    clientSecret: '',\n    useManagedIdentity: false,\n  });\n  \n  // UI state\n  const [showSecrets, setShowSecrets] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [saving, setSaving] = useState(false);\n  const [expanded, setExpanded] = useState(initialVisible);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [hasStoredCredentials, setHasStoredCredentials] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  \n  // Status messages\n  const [status, setStatus] = useState(null);\n  const [error, setError] = useState(null);\n  \n  // Test result state\n  const [testResult, setTestResult] = useState(null);\n  \n  /**\n   * Fetch stored credentials on component mount\n   */\n  useEffect(() => {\n    const loadCredentials = async () => {\n      setLoading(true);\n      try {\n        // First check if credentials exist without requesting secrets\n        const hasCredsResult = await credentialService.hasCredentials('azure');\n        setHasStoredCredentials(hasCredsResult);\n        \n        // If credentials exist and component is expanded, load them\n        if (hasCredsResult && expanded) {\n          const result = await credentialService.getCredentials('azure', true);\n          \n          if (result.success && result.data) {\n            // Determine the auth method from the credentials\n            let authMethod = 'connectionString';\n            if (result.data.connection_string) {\n              authMethod = 'connectionString';\n            } else if (result.data.sas_token) {\n              authMethod = 'sasToken';\n            } else if (result.data.client_id && result.data.client_secret) {\n              authMethod = 'servicePrincipal';\n            } else if (result.data.account_key) {\n              authMethod = 'accountKey';\n            } else {\n              authMethod = 'managedIdentity';\n            }\n            \n            const newCredentials = {\n              authMethod,\n              connectionString: result.data.connection_string || '',\n              accountName: result.data.account_name || '',\n              accountKey: result.data.account_key || '',\n              sasToken: result.data.sas_token || '',\n              tenantId: result.data.tenant_id || '',\n              clientId: result.data.client_id || '',\n              clientSecret: result.data.client_secret || '',\n              useManagedIdentity: authMethod === 'managedIdentity',\n            };\n            \n            setCredentials(newCredentials);\n            setLastUpdated(result.data.last_updated);\n            \n            // Notify parent component\n            if (onCredentialsLoaded) {\n              onCredentialsLoaded(newCredentials);\n            }\n          }\n        }\n      } catch (err) {\n        console.error('Error loading credentials:', err);\n        setError('Failed to load stored credentials');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadCredentials();\n  }, [expanded, onCredentialsLoaded]);\n  \n  /**\n   * Handle input change\n   */\n  const handleChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const newValue = type === 'checkbox' ? checked : value;\n    \n    // Update credentials state\n    setCredentials(prev => {\n      // If changing auth method, reset related fields\n      if (name === 'authMethod') {\n        const updated = { \n          ...prev, \n          [name]: newValue,\n          // Reset all credential fields\n          connectionString: '',\n          accountKey: '',\n          sasToken: '',\n          clientId: '',\n          clientSecret: '',\n          // Keep account name for all methods\n        };\n        \n        // Set managed identity flag\n        if (newValue === 'managedIdentity') {\n          updated.useManagedIdentity = true;\n        } else {\n          updated.useManagedIdentity = false;\n        }\n        \n        return updated;\n      }\n      \n      return { ...prev, [name]: newValue };\n    });\n    \n    // Clear any status or error messages\n    setStatus(null);\n    setError(null);\n    setTestResult(null);\n  };\n  \n  /**\n   * Toggle visibility of secret fields\n   */\n  const toggleShowSecrets = () => {\n    setShowSecrets(!showSecrets);\n  };\n  \n  /**\n   * Toggle expansion of the credential form\n   */\n  const toggleExpanded = () => {\n    setExpanded(!expanded);\n  };\n  \n  /**\n   * Save credentials to secure storage\n   */\n  const saveCredentials = async () => {\n    setSaving(true);\n    setStatus(null);\n    setError(null);\n    \n    try {\n      // Convert credentials format for storage\n      const storageCredentials = {\n        connection_string: credentials.authMethod === 'connectionString' ? credentials.connectionString : '',\n        account_name: credentials.accountName,\n        account_key: credentials.authMethod === 'accountKey' ? credentials.accountKey : '',\n        sas_token: credentials.authMethod === 'sasToken' ? credentials.sasToken : '',\n        tenant_id: credentials.authMethod === 'servicePrincipal' ? credentials.tenantId : '',\n        client_id: credentials.authMethod === 'servicePrincipal' ? credentials.clientId : '',\n        client_secret: credentials.authMethod === 'servicePrincipal' ? credentials.clientSecret : '',\n        use_managed_identity: credentials.authMethod === 'managedIdentity',\n      };\n      \n      // Store credentials\n      const result = await credentialService.storeCredentials('azure', storageCredentials);\n      \n      if (result.success) {\n        setStatus('Credentials saved successfully');\n        setHasStoredCredentials(true);\n        setLastUpdated(new Date().toISOString());\n        \n        // Notify parent component\n        if (onCredentialsSaved) {\n          onCredentialsSaved(credentials);\n        }\n      } else {\n        setError(result.message || 'Failed to save credentials');\n      }\n    } catch (err) {\n      console.error('Error saving credentials:', err);\n      setError('An error occurred while saving credentials');\n    } finally {\n      setSaving(false);\n    }\n  };\n  \n  /**\n   * Delete stored credentials\n   */\n  const deleteCredentials = async () => {\n    setLoading(true);\n    setStatus(null);\n    setError(null);\n    \n    try {\n      const result = await credentialService.deleteCredentials('azure');\n      \n      if (result.success) {\n        setStatus('Credentials deleted successfully');\n        setHasStoredCredentials(false);\n        setLastUpdated(null);\n        \n        // Reset form\n        setCredentials({\n          authMethod: 'connectionString',\n          connectionString: '',\n          accountName: '',\n          accountKey: '',\n          sasToken: '',\n          tenantId: '',\n          clientId: '',\n          clientSecret: '',\n          useManagedIdentity: false,\n        });\n        \n        // Notify parent component\n        if (onCredentialsSaved) {\n          onCredentialsSaved(null);\n        }\n      } else {\n        setError(result.message || 'Failed to delete credentials');\n      }\n    } catch (err) {\n      console.error('Error deleting credentials:', err);\n      setError('An error occurred while deleting credentials');\n    } finally {\n      setLoading(false);\n      setShowDeleteConfirm(false);\n    }\n  };\n  \n  /**\n   * Test credentials by connecting to Azure\n   */\n  const testConnection = useCallback(async () => {\n    setLoading(true);\n    setStatus(null);\n    setError(null);\n    setTestResult(null);\n    \n    try {\n      // Format credentials for testing\n      const testCredentials = {\n        connection_string: credentials.authMethod === 'connectionString' ? credentials.connectionString : '',\n        account_name: credentials.accountName,\n        account_key: credentials.authMethod === 'accountKey' ? credentials.accountKey : '',\n        sas_token: credentials.authMethod === 'sasToken' ? credentials.sasToken : '',\n        tenant_id: credentials.authMethod === 'servicePrincipal' ? credentials.tenantId : '',\n        client_id: credentials.authMethod === 'servicePrincipal' ? credentials.clientId : '',\n        client_secret: credentials.authMethod === 'servicePrincipal' ? credentials.clientSecret : '',\n        use_managed_identity: credentials.authMethod === 'managedIdentity',\n      };\n      \n      // Send test request\n      const result = await credentialService.testCredentials('azure', testCredentials);\n      \n      setTestResult(result);\n      \n      if (result.success) {\n        setStatus('Connection successful');\n      } else {\n        setError(result.message || 'Connection failed');\n      }\n    } catch (err) {\n      console.error('Error testing credentials:', err);\n      setError('An error occurred during connection test');\n      setTestResult({\n        success: false,\n        message: 'An error occurred during connection test',\n        details: {\n          error: err.message,\n        },\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [credentials]);\n  \n  /**\n   * Validate if credentials are complete for the selected auth method\n   */\n  const validateCredentials = useCallback(() => {\n    switch (credentials.authMethod) {\n      case 'connectionString':\n        return credentials.connectionString.trim() !== '';\n      case 'accountKey':\n        return credentials.accountName.trim() !== '' && credentials.accountKey.trim() !== '';\n      case 'sasToken':\n        return credentials.accountName.trim() !== '' && credentials.sasToken.trim() !== '';\n      case 'servicePrincipal':\n        return (\n          credentials.accountName.trim() !== '' &&\n          credentials.tenantId.trim() !== '' &&\n          credentials.clientId.trim() !== '' &&\n          credentials.clientSecret.trim() !== ''\n        );\n      case 'managedIdentity':\n        return credentials.accountName.trim() !== '';\n      default:\n        return false;\n    }\n  }, [credentials]);\n  \n  // Check if credentials are valid\n  const isValid = validateCredentials();\n  \n  /**\n   * Format date for display\n   */\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Never';\n    \n    try {\n      const date = new Date(dateString);\n      return date.toLocaleString();\n    } catch (err) {\n      return 'Unknown';\n    }\n  };\n  \n  // Authentication method options\n  const authMethods = [\n    { value: 'connectionString', label: 'Connection String' },\n    { value: 'accountKey', label: 'Account Name & Key' },\n    { value: 'sasToken', label: 'SAS Token' },\n    { value: 'servicePrincipal', label: 'Service Principal' },\n    { value: 'managedIdentity', label: 'Managed Identity' },\n  ];\n  \n  // Field visibility based on selected auth method\n  const showConnectionString = credentials.authMethod === 'connectionString';\n  const showAccountKey = credentials.authMethod === 'accountKey';\n  const showSasToken = credentials.authMethod === 'sasToken';\n  const showServicePrincipal = credentials.authMethod === 'servicePrincipal';\n  const showAccountName = credentials.authMethod !== 'connectionString';\n  \n  return (\n    <Card variant=\"outlined\">\n      <CardHeader\n        title={\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <KeyIcon sx={{ mr: 1, color: 'primary.main' }} />\n              <Typography variant=\"h6\">Azure Blob Storage Credentials</Typography>\n              {hasStoredCredentials && (\n                <Chip \n                  label=\"Credentials Stored\" \n                  color=\"success\" \n                  size=\"small\" \n                  icon={<LockIcon />}\n                  sx={{ ml: 2 }}\n                />\n              )}\n            </Box>\n            <IconButton onClick={toggleExpanded}>\n              {expanded ? <VisibilityOffIcon /> : <VisibilityIcon />}\n            </IconButton>\n          </Box>\n        }\n        subheader={\n          hasStoredCredentials ? (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Last Updated: {formatDate(lastUpdated)}\n            </Typography>\n          ) : (\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              No stored credentials\n            </Typography>\n          )\n        }\n      />\n      \n      <Collapse in={expanded}>\n        <CardContent>\n          {/* Authentication Method Selection */}\n          <Box sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle2\" gutterBottom>\n              Authentication Method\n            </Typography>\n            <FormControl component=\"fieldset\">\n              <RadioGroup\n                row\n                name=\"authMethod\"\n                value={credentials.authMethod}\n                onChange={handleChange}\n              >\n                {authMethods.map((method) => (\n                  <FormControlLabel\n                    key={method.value}\n                    value={method.value}\n                    control={<Radio />}\n                    label={method.label}\n                    disabled={loading || readOnly}\n                  />\n                ))}\n              </RadioGroup>\n            </FormControl>\n          </Box>\n          \n          <Grid container spacing={2}>\n            {/* Connection String */}\n            {showConnectionString && (\n              <Grid item xs={12}>\n                <FormControl fullWidth>\n                  <TextField\n                    name=\"connectionString\"\n                    label=\"Connection String\"\n                    value={credentials.connectionString}\n                    onChange={handleChange}\n                    type={showSecrets ? 'text' : 'password'}\n                    disabled={loading || readOnly}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={toggleShowSecrets}\n                            edge=\"end\"\n                          >\n                            {showSecrets ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                          </IconButton>\n                          <Tooltip title=\"The connection string for your Azure Storage account. Format: DefaultEndpointsProtocol=https;AccountName=...;AccountKey=...;EndpointSuffix=core.windows.net\">\n                            <IconButton edge=\"end\">\n                              <InfoIcon />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>\n                    Full Azure Storage connection string with account name and key\n                  </FormHelperText>\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* Account Name */}\n            {showAccountName && (\n              <Grid item xs={12} md={showAccountKey || showSasToken ? 6 : 12}>\n                <FormControl fullWidth>\n                  <TextField\n                    name=\"accountName\"\n                    label=\"Storage Account Name\"\n                    value={credentials.accountName}\n                    onChange={handleChange}\n                    disabled={loading || readOnly}\n                  />\n                  <FormHelperText>\n                    Name of your Azure Storage account\n                  </FormHelperText>\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* Account Key */}\n            {showAccountKey && (\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth>\n                  <TextField\n                    name=\"accountKey\"\n                    label=\"Account Key\"\n                    value={credentials.accountKey}\n                    onChange={handleChange}\n                    type={showSecrets ? 'text' : 'password'}\n                    disabled={loading || readOnly}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={toggleShowSecrets}\n                            edge=\"end\"\n                          >\n                            {showSecrets ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                          </IconButton>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>\n                    Azure Storage account access key\n                  </FormHelperText>\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* SAS Token */}\n            {showSasToken && (\n              <Grid item xs={12} md={6}>\n                <FormControl fullWidth>\n                  <TextField\n                    name=\"sasToken\"\n                    label=\"SAS Token\"\n                    value={credentials.sasToken}\n                    onChange={handleChange}\n                    type={showSecrets ? 'text' : 'password'}\n                    disabled={loading || readOnly}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={toggleShowSecrets}\n                            edge=\"end\"\n                          >\n                            {showSecrets ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                          </IconButton>\n                        </InputAdornment>\n                      )\n                    }}\n                  />\n                  <FormHelperText>\n                    Shared Access Signature token (include the leading '?')\n                  </FormHelperText>\n                </FormControl>\n              </Grid>\n            )}\n            \n            {/* Service Principal */}\n            {showServicePrincipal && (\n              <>\n                <Grid item xs={12} md={6}>\n                  <FormControl fullWidth>\n                    <TextField\n                      name=\"tenantId\"\n                      label=\"Tenant ID\"\n                      value={credentials.tenantId}\n                      onChange={handleChange}\n                      disabled={loading || readOnly}\n                    />\n                    <FormHelperText>\n                      Azure AD tenant ID\n                    </FormHelperText>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12} md={6}>\n                  <FormControl fullWidth>\n                    <TextField\n                      name=\"clientId\"\n                      label=\"Client ID\"\n                      value={credentials.clientId}\n                      onChange={handleChange}\n                      disabled={loading || readOnly}\n                    />\n                    <FormHelperText>\n                      Azure AD application (client) ID\n                    </FormHelperText>\n                  </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                  <FormControl fullWidth>\n                    <TextField\n                      name=\"clientSecret\"\n                      label=\"Client Secret\"\n                      value={credentials.clientSecret}\n                      onChange={handleChange}\n                      type={showSecrets ? 'text' : 'password'}\n                      disabled={loading || readOnly}\n                      InputProps={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={toggleShowSecrets}\n                              edge=\"end\"\n                            >\n                              {showSecrets ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                            </IconButton>\n                          </InputAdornment>\n                        )\n                      }}\n                    />\n                    <FormHelperText>\n                      Azure AD application client secret\n                    </FormHelperText>\n                  </FormControl>\n                </Grid>\n              </>\n            )}\n            \n            {/* Managed Identity */}\n            {credentials.authMethod === 'managedIdentity' && (\n              <Grid item xs={12}>\n                <Paper variant=\"outlined\" sx={{ p: 2, bgcolor: 'background.default' }}>\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    Using Azure Managed Identity for authentication. No additional credentials required.\n                    The application will use the system-assigned identity in the Azure environment.\n                  </Typography>\n                </Paper>\n              </Grid>\n            )}\n          </Grid>\n          \n          {/* Status Messages */}\n          {(status || error || testResult) && (\n            <Box sx={{ mt: 3 }}>\n              {status && !error && (\n                <Alert severity=\"success\" sx={{ mb: 2 }}>\n                  {status}\n                </Alert>\n              )}\n              \n              {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }}>\n                  {error}\n                </Alert>\n              )}\n              \n              {testResult && (\n                <Alert \n                  severity={testResult.success ? 'success' : 'error'} \n                  sx={{ mb: 2 }}\n                >\n                  <AlertTitle>\n                    {testResult.success ? 'Connection Test Successful' : 'Connection Test Failed'}\n                  </AlertTitle>\n                  <Typography variant=\"body2\">\n                    {testResult.message}\n                  </Typography>\n                  \n                  {testResult.details && (\n                    <Box sx={{ mt: 1 }}>\n                      {testResult.success ? (\n                        <>\n                          {testResult.details.containers && (\n                            <Typography variant=\"body2\">\n                              Found {testResult.details.containers} container(s)\n                            </Typography>\n                          )}\n                          {testResult.details.account && (\n                            <Typography variant=\"body2\">\n                              Account: {testResult.details.account}\n                            </Typography>\n                          )}\n                          {testResult.details.permissions && (\n                            <Typography variant=\"body2\">\n                              Permissions: {testResult.details.permissions.join(', ')}\n                            </Typography>\n                          )}\n                        </>\n                      ) : (\n                        <>\n                          {testResult.details.error && (\n                            <Typography variant=\"body2\">\n                              Error: {testResult.details.error}\n                            </Typography>\n                          )}\n                          {testResult.details.code && (\n                            <Typography variant=\"body2\">\n                              Code: {testResult.details.code}\n                            </Typography>\n                          )}\n                        </>\n                      )}\n                    </Box>\n                  )}\n                </Alert>\n              )}\n            </Box>\n          )}\n          \n          {/* Action Buttons */}\n          {showSaveControls && (\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>\n              <Box>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!isValid || loading || readOnly}\n                  onClick={testConnection}\n                  startIcon={loading ? <CircularProgress size={20} /> : <RefreshIcon />}\n                >\n                  Test Connection\n                </Button>\n              </Box>\n              \n              <Box>\n                {hasStoredCredentials && (\n                  <Button\n                    variant=\"outlined\"\n                    color=\"error\"\n                    onClick={() => setShowDeleteConfirm(true)}\n                    disabled={loading || readOnly}\n                    startIcon={<DeleteIcon />}\n                    sx={{ mr: 1 }}\n                  >\n                    Delete\n                  </Button>\n                )}\n                \n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  disabled={!isValid || loading || readOnly}\n                  onClick={saveCredentials}\n                  startIcon={saving ? <CircularProgress size={20} /> : <SaveIcon />}\n                >\n                  {saving ? 'Saving...' : (hasStoredCredentials ? 'Update' : 'Save')}\n                </Button>\n              </Box>\n            </Box>\n          )}\n        </CardContent>\n      </Collapse>\n      \n      {/* Delete Confirmation Dialog */}\n      <Dialog\n        open={showDeleteConfirm}\n        onClose={() => setShowDeleteConfirm(false)}\n      >\n        <DialogTitle>Delete Credentials?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete the stored Azure Blob Storage credentials? This action cannot be undone.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowDeleteConfirm(false)} autoFocus>\n            Cancel\n          </Button>\n          <Button onClick={deleteCredentials} color=\"error\">\n            Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Card>\n  );\n};\n\nAzureCredentialManager.propTypes = {\n  onCredentialsSaved: PropTypes.func,\n  onCredentialsLoaded: PropTypes.func,\n  readOnly: PropTypes.bool,\n  showSaveControls: PropTypes.bool,\n  initialVisible: PropTypes.bool,\n};\n\nexport default AzureCredentialManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}