FROM python:3.10-slim

# Create non-root user
RUN groupadd -g 1000 appuser && \
    useradd -u 1000 -g appuser -s /bin/bash -m appuser && \
    mkdir -p /home/appuser/app && \
    chown -R appuser:appuser /home/appuser


# Add metadata labels
LABEL \
    org.opencontainers.image.vendor="TAP Integration Platform" \
    org.opencontainers.image.authors="TAP Platform Team <tap-team@example.com>" \
    org.opencontainers.image.licenses="Proprietary" \
    org.label-schema.schema-version="1.0" \
    org.label-schema.vendor="TAP Integration Platform" \
    com.tap.component.version="1.0.0" \
    com.tap.image.environment="development" \
    com.tap.maintainer="TAP Platform Team" \
    com.tap.component.type="backend" \
    org.opencontainers.image.created="2025-04-03T02:06:45.343Z"


WORKDIR /app

# Install curl for healthcheck and comprehensive system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    build-essential \
    libpq-dev \
    procps \
    postgresql-client \
    libffi-dev \
    libssl-dev \
    libjpeg-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Accept build arguments
ARG EXTRA_PACKAGES=""

# Install Python dependencies first to leverage Docker cache
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Install additional packages if specified
RUN if [ -n "$EXTRA_PACKAGES" ]; then pip install --no-cache-dir $EXTRA_PACKAGES; fi

# Install development tools and monitoring utilities
RUN pip install --no-cache-dir \
    pytest \
    pytest-cov \
    black \
    isort \
    flake8 \
    psutil \
    pydantic-settings \
    httpx

# Ensure environment variables have default values
ENV SETUP_INVITATION_SYSTEM=false \
    DEBUG=true \
    DEBUG_MODE=true \
    LOG_LEVEL=debug \
    ENVIRONMENT=development \
    APP_ENVIRONMENT=development \
    DB_SSL_REQUIRED=false \
    RUNNING_IN_DOCKER=true

# Create directory for init scripts
RUN mkdir -p /app/db/init

# Expose API port
EXPOSE 8000

# Create a health check script
COPY ./scripts/healthcheck.py /app/scripts/healthcheck.py
RUN chmod +x /app/scripts/healthcheck.py

# Copy startup script
COPY ./startup.sh /app/startup.sh
RUN chmod +x /app/startup.sh

# Copy the entrypoint and healthcheck scripts (instead of generating with echo)
COPY ./entrypoint.sh /app/entrypoint.sh
COPY ./healthcheck.sh /app/healthcheck.sh

# Ensure scripts are executable
RUN chmod +x /app/entrypoint.sh /app/healthcheck.sh


# Create data directory and ensure non-root user can write to it
RUN mkdir -p /app/data && chown -R appuser:appuser /app/data

# Use non-root user
USER appuser

# Use the entrypoint script to start the server
ENTRYPOINT ["/app/entrypoint.sh"]

# Add Docker healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 CMD [ "/app/healthcheck.sh" ]