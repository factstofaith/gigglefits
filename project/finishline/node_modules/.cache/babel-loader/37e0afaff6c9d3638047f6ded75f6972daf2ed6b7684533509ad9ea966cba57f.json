{"ast":null,"code":"/**\n * Badge\n * \n * A standardized badge component for displaying status or count indicators.\n * \n * @module components/common/Badge\n */\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Standardized badge component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Badge content\n * @param {string} [props.color='primary'] - Badge color\n * @param {string} [props.variant='standard'] - Badge variant\n * @param {string} [props.size='medium'] - Badge size\n * @param {string} [props.shape='rounded'] - Badge shape\n * @param {node} [props.content] - Badge content (alternative to children)\n * @param {boolean} [props.invisible=false] - Whether badge is invisible\n * @param {string|number} [props.max] - Maximum value to display\n * @param {boolean} [props.showZero=false] - Whether to display zero values\n * @param {Function} [props.onClick] - Click handler\n * @param {string} [props.className] - Additional CSS class names\n * @param {React.Ref} ref - Forwarded ref\n * @returns {JSX.Element} The badge component\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Badge = /*#__PURE__*/forwardRef(({\n  children,\n  color = 'primary',\n  variant = 'standard',\n  size = 'medium',\n  shape = 'rounded',\n  content,\n  invisible = false,\n  max,\n  showZero = false,\n  onClick,\n  className = '',\n  ...rest\n}, ref) => {\n  // Color styles\n  const colorMap = {\n    primary: {\n      standard: {\n        background: '#1976d2',\n        color: '#ffffff'\n      },\n      outlined: {\n        background: 'transparent',\n        color: '#1976d2',\n        border: '1px solid #1976d2'\n      },\n      text: {\n        background: 'rgba(25, 118, 210, 0.1)',\n        color: '#1976d2'\n      }\n    },\n    secondary: {\n      standard: {\n        background: '#9c27b0',\n        color: '#ffffff'\n      },\n      outlined: {\n        background: 'transparent',\n        color: '#9c27b0',\n        border: '1px solid #9c27b0'\n      },\n      text: {\n        background: 'rgba(156, 39, 176, 0.1)',\n        color: '#9c27b0'\n      }\n    },\n    success: {\n      standard: {\n        background: '#4caf50',\n        color: '#ffffff'\n      },\n      outlined: {\n        background: 'transparent',\n        color: '#4caf50',\n        border: '1px solid #4caf50'\n      },\n      text: {\n        background: 'rgba(76, 175, 80, 0.1)',\n        color: '#4caf50'\n      }\n    },\n    warning: {\n      standard: {\n        background: '#ff9800',\n        color: '#ffffff'\n      },\n      outlined: {\n        background: 'transparent',\n        color: '#ff9800',\n        border: '1px solid #ff9800'\n      },\n      text: {\n        background: 'rgba(255, 152, 0, 0.1)',\n        color: '#ff9800'\n      }\n    },\n    error: {\n      standard: {\n        background: '#f44336',\n        color: '#ffffff'\n      },\n      outlined: {\n        background: 'transparent',\n        color: '#f44336',\n        border: '1px solid #f44336'\n      },\n      text: {\n        background: 'rgba(244, 67, 54, 0.1)',\n        color: '#f44336'\n      }\n    },\n    info: {\n      standard: {\n        background: '#2196f3',\n        color: '#ffffff'\n      },\n      outlined: {\n        background: 'transparent',\n        color: '#2196f3',\n        border: '1px solid #2196f3'\n      },\n      text: {\n        background: 'rgba(33, 150, 243, 0.1)',\n        color: '#2196f3'\n      }\n    },\n    default: {\n      standard: {\n        background: '#e0e0e0',\n        color: '#212121'\n      },\n      outlined: {\n        background: 'transparent',\n        color: '#757575',\n        border: '1px solid #757575'\n      },\n      text: {\n        background: 'rgba(0, 0, 0, 0.08)',\n        color: '#757575'\n      }\n    }\n  };\n\n  // Size styles\n  const sizeMap = {\n    small: {\n      fontSize: '0.75rem',\n      height: '18px',\n      minWidth: '18px',\n      padding: '0 4px'\n    },\n    medium: {\n      fontSize: '0.875rem',\n      height: '22px',\n      minWidth: '22px',\n      padding: '0 6px'\n    },\n    large: {\n      fontSize: '1rem',\n      height: '28px',\n      minWidth: '28px',\n      padding: '0 8px'\n    }\n  };\n\n  // Shape styles\n  const shapeMap = {\n    rounded: {\n      borderRadius: '4px'\n    },\n    pill: {\n      borderRadius: '999px'\n    },\n    square: {\n      borderRadius: '0'\n    }\n  };\n\n  // Get badge content (children or content prop)\n  let badgeContent = children || content;\n\n  // Handle numeric content\n  if (badgeContent !== undefined && typeof badgeContent === 'number') {\n    // If max is defined and content exceeds max, show max+\n    if (max !== undefined && badgeContent > max) {\n      badgeContent = `${max}+`;\n    }\n\n    // Hide zero values unless showZero is true\n    if (badgeContent === 0 && !showZero) {\n      invisible = true;\n    }\n  }\n\n  // Hide if no content or invisible prop is true\n  if (badgeContent === undefined || invisible) {\n    return null;\n  }\n\n  // Get styles from maps\n  const colorStyle = colorMap[color]?.[variant] || colorMap.default[variant];\n  const sizeStyle = sizeMap[size] || sizeMap.medium;\n  const shapeStyle = shapeMap[shape] || shapeMap.rounded;\n\n  // Combine styles\n  const badgeStyle = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    boxSizing: 'border-box',\n    fontWeight: 600,\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    verticalAlign: 'middle',\n    cursor: onClick ? 'pointer' : 'default',\n    ...colorStyle,\n    ...sizeStyle,\n    ...shapeStyle\n  };\n\n  // Pass to click handler\n  const handleClick = e => {\n    if (onClick) {\n      onClick(e);\n    }\n  };\n  return /*#__PURE__*/_jsx(\"span\", {\n    ref: ref,\n    style: badgeStyle,\n    className: `tap-badge tap-badge--${color} tap-badge--${variant} tap-badge--${size} tap-badge--${shape} ${className}`,\n    onClick: handleClick,\n    \"data-testid\": \"tap-badge\",\n    ...rest,\n    children: badgeContent\n  });\n});\n\n// Display name for debugging\nBadge.displayName = 'Badge';\n\n// Prop types\nBadge.propTypes = {\n  /** Badge content */\n  children: PropTypes.node,\n  /** Badge color */\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'error', 'info', 'default']),\n  /** Badge variant */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'text']),\n  /** Badge size */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** Badge shape */\n  shape: PropTypes.oneOf(['rounded', 'pill', 'square']),\n  /** Badge content (alternative to children) */\n  content: PropTypes.node,\n  /** Whether badge is invisible */\n  invisible: PropTypes.bool,\n  /** Maximum value to display */\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Whether to display zero values */\n  showZero: PropTypes.bool,\n  /** Click handler */\n  onClick: PropTypes.func,\n  /** Additional CSS class names */\n  className: PropTypes.string\n};\nexport default Badge;","map":{"version":3,"names":["React","forwardRef","PropTypes","jsx","_jsx","Badge","children","color","variant","size","shape","content","invisible","max","showZero","onClick","className","rest","ref","colorMap","primary","standard","background","outlined","border","text","secondary","success","warning","error","info","default","sizeMap","small","fontSize","height","minWidth","padding","medium","large","shapeMap","rounded","borderRadius","pill","square","badgeContent","undefined","colorStyle","sizeStyle","shapeStyle","badgeStyle","display","alignItems","justifyContent","boxSizing","fontWeight","lineHeight","whiteSpace","verticalAlign","cursor","handleClick","e","style","displayName","propTypes","node","oneOf","bool","oneOfType","string","number","func"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/components/common/Badge.jsx"],"sourcesContent":["/**\n * Badge\n * \n * A standardized badge component for displaying status or count indicators.\n * \n * @module components/common/Badge\n */\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Standardized badge component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Badge content\n * @param {string} [props.color='primary'] - Badge color\n * @param {string} [props.variant='standard'] - Badge variant\n * @param {string} [props.size='medium'] - Badge size\n * @param {string} [props.shape='rounded'] - Badge shape\n * @param {node} [props.content] - Badge content (alternative to children)\n * @param {boolean} [props.invisible=false] - Whether badge is invisible\n * @param {string|number} [props.max] - Maximum value to display\n * @param {boolean} [props.showZero=false] - Whether to display zero values\n * @param {Function} [props.onClick] - Click handler\n * @param {string} [props.className] - Additional CSS class names\n * @param {React.Ref} ref - Forwarded ref\n * @returns {JSX.Element} The badge component\n */\nconst Badge = forwardRef(({\n  children,\n  color = 'primary',\n  variant = 'standard',\n  size = 'medium',\n  shape = 'rounded',\n  content,\n  invisible = false,\n  max,\n  showZero = false,\n  onClick,\n  className = '',\n  ...rest\n}, ref) => {\n  // Color styles\n  const colorMap = {\n    primary: {\n      standard: { background: '#1976d2', color: '#ffffff' },\n      outlined: { background: 'transparent', color: '#1976d2', border: '1px solid #1976d2' },\n      text: { background: 'rgba(25, 118, 210, 0.1)', color: '#1976d2' },\n    },\n    secondary: {\n      standard: { background: '#9c27b0', color: '#ffffff' },\n      outlined: { background: 'transparent', color: '#9c27b0', border: '1px solid #9c27b0' },\n      text: { background: 'rgba(156, 39, 176, 0.1)', color: '#9c27b0' },\n    },\n    success: {\n      standard: { background: '#4caf50', color: '#ffffff' },\n      outlined: { background: 'transparent', color: '#4caf50', border: '1px solid #4caf50' },\n      text: { background: 'rgba(76, 175, 80, 0.1)', color: '#4caf50' },\n    },\n    warning: {\n      standard: { background: '#ff9800', color: '#ffffff' },\n      outlined: { background: 'transparent', color: '#ff9800', border: '1px solid #ff9800' },\n      text: { background: 'rgba(255, 152, 0, 0.1)', color: '#ff9800' },\n    },\n    error: {\n      standard: { background: '#f44336', color: '#ffffff' },\n      outlined: { background: 'transparent', color: '#f44336', border: '1px solid #f44336' },\n      text: { background: 'rgba(244, 67, 54, 0.1)', color: '#f44336' },\n    },\n    info: {\n      standard: { background: '#2196f3', color: '#ffffff' },\n      outlined: { background: 'transparent', color: '#2196f3', border: '1px solid #2196f3' },\n      text: { background: 'rgba(33, 150, 243, 0.1)', color: '#2196f3' },\n    },\n    default: {\n      standard: { background: '#e0e0e0', color: '#212121' },\n      outlined: { background: 'transparent', color: '#757575', border: '1px solid #757575' },\n      text: { background: 'rgba(0, 0, 0, 0.08)', color: '#757575' },\n    },\n  };\n  \n  // Size styles\n  const sizeMap = {\n    small: {\n      fontSize: '0.75rem',\n      height: '18px',\n      minWidth: '18px',\n      padding: '0 4px',\n    },\n    medium: {\n      fontSize: '0.875rem',\n      height: '22px',\n      minWidth: '22px',\n      padding: '0 6px',\n    },\n    large: {\n      fontSize: '1rem',\n      height: '28px',\n      minWidth: '28px',\n      padding: '0 8px',\n    },\n  };\n  \n  // Shape styles\n  const shapeMap = {\n    rounded: {\n      borderRadius: '4px',\n    },\n    pill: {\n      borderRadius: '999px',\n    },\n    square: {\n      borderRadius: '0',\n    },\n  };\n  \n  // Get badge content (children or content prop)\n  let badgeContent = children || content;\n  \n  // Handle numeric content\n  if (badgeContent !== undefined && typeof badgeContent === 'number') {\n    // If max is defined and content exceeds max, show max+\n    if (max !== undefined && badgeContent > max) {\n      badgeContent = `${max}+`;\n    }\n    \n    // Hide zero values unless showZero is true\n    if (badgeContent === 0 && !showZero) {\n      invisible = true;\n    }\n  }\n  \n  // Hide if no content or invisible prop is true\n  if (badgeContent === undefined || invisible) {\n    return null;\n  }\n  \n  // Get styles from maps\n  const colorStyle = colorMap[color]?.[variant] || colorMap.default[variant];\n  const sizeStyle = sizeMap[size] || sizeMap.medium;\n  const shapeStyle = shapeMap[shape] || shapeMap.rounded;\n  \n  // Combine styles\n  const badgeStyle = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    boxSizing: 'border-box',\n    fontWeight: 600,\n    lineHeight: 1,\n    whiteSpace: 'nowrap',\n    verticalAlign: 'middle',\n    cursor: onClick ? 'pointer' : 'default',\n    ...colorStyle,\n    ...sizeStyle,\n    ...shapeStyle,\n  };\n  \n  // Pass to click handler\n  const handleClick = (e) => {\n    if (onClick) {\n      onClick(e);\n    }\n  };\n  \n  return (\n    <span\n      ref={ref}\n      style={badgeStyle}\n      className={`tap-badge tap-badge--${color} tap-badge--${variant} tap-badge--${size} tap-badge--${shape} ${className}`}\n      onClick={handleClick}\n      data-testid=\"tap-badge\"\n      {...rest}\n    >\n      {badgeContent}\n    </span>\n  );\n});\n\n// Display name for debugging\nBadge.displayName = 'Badge';\n\n// Prop types\nBadge.propTypes = {\n  /** Badge content */\n  children: PropTypes.node,\n  \n  /** Badge color */\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'error', 'info', 'default']),\n  \n  /** Badge variant */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'text']),\n  \n  /** Badge size */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  \n  /** Badge shape */\n  shape: PropTypes.oneOf(['rounded', 'pill', 'square']),\n  \n  /** Badge content (alternative to children) */\n  content: PropTypes.node,\n  \n  /** Whether badge is invisible */\n  invisible: PropTypes.bool,\n  \n  /** Maximum value to display */\n  max: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  \n  /** Whether to display zero values */\n  showZero: PropTypes.bool,\n  \n  /** Click handler */\n  onClick: PropTypes.func,\n  \n  /** Additional CSS class names */\n  className: PropTypes.string,\n};\n\nexport default Badge;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}