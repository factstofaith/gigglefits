{"ast":null,"code":"/**\n * Tabs\n * \n * A standardized tabs component for organizing content into multiple sections.\n * \n * @module components/common/Tabs\n */\n\nimport React, { forwardRef, useState, useEffect, useRef, Children, isValidElement, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Standardized tabs component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Tab panels to display\n * @param {number} [props.defaultValue=0] - Default selected tab index (uncontrolled)\n * @param {number} [props.value] - Selected tab index (controlled)\n * @param {Function} [props.onChange] - Callback when tab changes\n * @param {string} [props.orientation='horizontal'] - Tabs orientation\n * @param {string} [props.variant='standard'] - Visual variant\n * @param {boolean} [props.centered=false] - Whether to center the tabs\n * @param {boolean} [props.fullWidth=false] - Whether tabs should take full width\n * @param {string} [props.className] - Additional CSS class names\n * @param {React.Ref} ref - Forwarded ref\n * @returns {JSX.Element} The tabs component\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst Tabs = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    children,\n    defaultValue = 0,\n    value: valueProp,\n    onChange,\n    orientation = 'horizontal',\n    variant = 'standard',\n    centered = false,\n    fullWidth = false,\n    className = '',\n    ...rest\n  } = _ref;\n  // Determine if controlled or uncontrolled\n  const isControlled = valueProp !== undefined;\n  const [selectedTab, setSelectedTab] = useState(defaultValue);\n  const value = isControlled ? valueProp : selectedTab;\n\n  // Refs for tab elements and indicator\n  const tabsRef = useRef(null);\n  const tabRefs = useRef([]);\n  const indicatorRef = useRef(null);\n\n  // Update indicator position when selected tab changes\n  useEffect(() => {\n    updateIndicator();\n  }, [value]);\n\n  // Update indicator position when window resizes\n  useEffect(() => {\n    const handleResize = () => {\n      updateIndicator();\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Update indicator position\n  const updateIndicator = () => {\n    if (!tabsRef.current || !indicatorRef.current || tabRefs.current.length === 0) return;\n    const selectedTabEl = tabRefs.current[value];\n    if (!selectedTabEl) return;\n    if (orientation === 'horizontal') {\n      indicatorRef.current.style.left = `${selectedTabEl.offsetLeft}px`;\n      indicatorRef.current.style.width = `${selectedTabEl.offsetWidth}px`;\n    } else {\n      indicatorRef.current.style.top = `${selectedTabEl.offsetTop}px`;\n      indicatorRef.current.style.height = `${selectedTabEl.offsetHeight}px`;\n    }\n  };\n\n  // Handle tab selection\n  const handleTabSelect = index => {\n    if (!isControlled) {\n      setSelectedTab(index);\n    }\n    if (onChange) {\n      onChange(index);\n    }\n  };\n\n  // Handle keyboard navigation\n  const handleKeyDown = (e, index) => {\n    let newIndex = index;\n    const tabCount = Children.count(children);\n    switch (e.key) {\n      case 'ArrowRight':\n      case 'ArrowDown':\n        newIndex = (index + 1) % tabCount;\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        newIndex = (index - 1 + tabCount) % tabCount;\n        break;\n      case 'Home':\n        newIndex = 0;\n        break;\n      case 'End':\n        newIndex = tabCount - 1;\n        break;\n      default:\n        return;\n    }\n\n    // Prevent default behavior for these keys\n    e.preventDefault();\n\n    // Move focus to the new tab\n    tabRefs.current[newIndex].focus();\n\n    // Select the new tab\n    handleTabSelect(newIndex);\n  };\n\n  // Extract tab information from children\n  const tabs = [];\n  const tabPanels = [];\n  Children.forEach(children, (child, index) => {\n    if (! /*#__PURE__*/isValidElement(child)) return;\n    if (child.type.displayName === 'TabPanel') {\n      // Get the label from the TabPanel\n      const {\n        label,\n        disabled\n      } = child.props;\n\n      // Create a tab\n      tabs.push({\n        label,\n        disabled,\n        index\n      });\n\n      // Clone the TabPanel with the selected state\n      tabPanels.push(/*#__PURE__*/cloneElement(child, {\n        selected: value === index,\n        id: `tap-tab-panel-${index}`,\n        'aria-labelledby': `tap-tab-${index}`\n      }));\n    } else {\n      // Non-TabPanel children are just passed through\n      tabPanels.push(child);\n    }\n  });\n\n  // Tab list styles\n  const tabListStyle = {\n    display: 'flex',\n    flexDirection: orientation === 'vertical' ? 'column' : 'row',\n    position: 'relative',\n    overflow: 'hidden',\n    justifyContent: centered ? 'center' : 'flex-start',\n    borderBottom: orientation === 'horizontal' && variant !== 'contained' ? '1px solid #e0e0e0' : 'none',\n    borderRight: orientation === 'vertical' && variant !== 'contained' ? '1px solid #e0e0e0' : 'none'\n  };\n\n  // Tab styles\n  const getTabStyle = (isSelected, isDisabled) => {\n    const baseStyle = {\n      padding: '12px 16px',\n      fontSize: '14px',\n      fontWeight: isSelected ? 600 : 400,\n      color: isDisabled ? '#bdbdbd' : isSelected ? '#1976d2' : '#616161',\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      opacity: isDisabled ? 0.7 : 1,\n      border: 'none',\n      background: 'none',\n      textAlign: 'center',\n      transition: 'color 0.2s',\n      outline: 'none',\n      position: 'relative',\n      zIndex: 1,\n      whiteSpace: 'nowrap',\n      flex: fullWidth ? 1 : 'auto'\n    };\n\n    // Variant specific styles\n    if (variant === 'contained') {\n      baseStyle.backgroundColor = isSelected ? '#1976d2' : 'transparent';\n      baseStyle.color = isSelected ? 'white' : '#616161';\n      baseStyle.borderRadius = orientation === 'horizontal' ? '4px 4px 0 0' : '4px 0 0 4px';\n    }\n    return baseStyle;\n  };\n\n  // Indicator styles\n  const indicatorStyle = {\n    position: 'absolute',\n    backgroundColor: variant === 'contained' ? 'transparent' : '#1976d2',\n    transition: 'all 0.3s',\n    ...(orientation === 'horizontal' ? {\n      bottom: 0,\n      height: '2px'\n    } : {\n      right: 0,\n      width: '2px'\n    })\n  };\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: `tap-tabs tap-tabs--${orientation} tap-tabs--${variant} ${fullWidth ? 'tap-tabs--fullwidth' : ''} ${className}`,\n    ref: ref,\n    \"data-testid\": \"tap-tabs\",\n    ...rest,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: \"tap-tabs__list\",\n      style: tabListStyle,\n      ref: tabsRef,\n      role: \"tablist\",\n      \"aria-orientation\": orientation,\n      children: [tabs.map(_ref2 => {\n        let {\n          label,\n          disabled,\n          index\n        } = _ref2;\n        return /*#__PURE__*/_jsx(\"button\", {\n          ref: el => {\n            tabRefs.current[index] = el;\n          },\n          role: \"tab\",\n          id: `tap-tab-${index}`,\n          \"aria-selected\": value === index,\n          \"aria-controls\": `tap-tab-panel-${index}`,\n          tabIndex: value === index ? 0 : -1,\n          onClick: () => !disabled && handleTabSelect(index),\n          onKeyDown: e => handleKeyDown(e, index),\n          style: getTabStyle(value === index, disabled),\n          className: `tap-tabs__tab ${value === index ? 'tap-tabs__tab--selected' : ''} ${disabled ? 'tap-tabs__tab--disabled' : ''}`,\n          disabled: disabled,\n          \"data-testid\": `tap-tab-${index}`,\n          children: label\n        }, index);\n      }), variant !== 'contained' && /*#__PURE__*/_jsx(\"span\", {\n        className: \"tap-tabs__indicator\",\n        style: indicatorStyle,\n        ref: indicatorRef\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"tap-tabs__panels\",\n      children: tabPanels\n    })]\n  });\n});\n\n/**\n * TabPanel component - container for tab content\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Tab panel content\n * @param {string} props.label - Tab label\n * @param {boolean} [props.disabled=false] - Whether tab is disabled\n * @param {boolean} [props.selected=false] - Whether tab is selected\n * @param {string} [props.className] - Additional CSS class names\n * @returns {JSX.Element} The tab panel component\n */\nconst TabPanel = _ref3 => {\n  let {\n    children,\n    label,\n    disabled = false,\n    selected = false,\n    className = '',\n    ...rest\n  } = _ref3;\n  // Panel styles\n  const panelStyle = {\n    padding: '16px',\n    display: selected ? 'block' : 'none'\n  };\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: `tap-tab-panel ${selected ? 'tap-tab-panel--selected' : ''} ${className}`,\n    style: panelStyle,\n    role: \"tabpanel\",\n    \"aria-hidden\": !selected,\n    \"data-testid\": \"tap-tab-panel\",\n    ...rest,\n    children: children\n  });\n};\n\n// Display name for debugging\nTabs.displayName = 'Tabs';\nTabPanel.displayName = 'TabPanel';\n\n// Prop types\nTabs.propTypes = {\n  /** Tab panels to display */\n  children: PropTypes.node.isRequired,\n  /** Default selected tab index (uncontrolled) */\n  defaultValue: PropTypes.number,\n  /** Selected tab index (controlled) */\n  value: PropTypes.number,\n  /** Callback when tab changes */\n  onChange: PropTypes.func,\n  /** Tabs orientation */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  /** Visual variant */\n  variant: PropTypes.oneOf(['standard', 'contained']),\n  /** Whether to center the tabs */\n  centered: PropTypes.bool,\n  /** Whether tabs should take full width */\n  fullWidth: PropTypes.bool,\n  /** Additional CSS class names */\n  className: PropTypes.string\n};\nTabPanel.propTypes = {\n  /** Tab panel content */\n  children: PropTypes.node.isRequired,\n  /** Tab label */\n  label: PropTypes.node.isRequired,\n  /** Whether tab is disabled */\n  disabled: PropTypes.bool,\n  /** Whether tab is selected */\n  selected: PropTypes.bool,\n  /** Additional CSS class names */\n  className: PropTypes.string\n};\n\n// Export both components\nexport { TabPanel };\nexport default Tabs;","map":{"version":3,"names":["React","forwardRef","useState","useEffect","useRef","Children","isValidElement","cloneElement","PropTypes","jsx","_jsx","jsxs","_jsxs","Tabs","_ref","ref","children","defaultValue","value","valueProp","onChange","orientation","variant","centered","fullWidth","className","rest","isControlled","undefined","selectedTab","setSelectedTab","tabsRef","tabRefs","indicatorRef","updateIndicator","handleResize","window","addEventListener","removeEventListener","current","length","selectedTabEl","style","left","offsetLeft","width","offsetWidth","top","offsetTop","height","offsetHeight","handleTabSelect","index","handleKeyDown","e","newIndex","tabCount","count","key","preventDefault","focus","tabs","tabPanels","forEach","child","type","displayName","label","disabled","props","push","selected","id","tabListStyle","display","flexDirection","position","overflow","justifyContent","borderBottom","borderRight","getTabStyle","isSelected","isDisabled","baseStyle","padding","fontSize","fontWeight","color","cursor","opacity","border","background","textAlign","transition","outline","zIndex","whiteSpace","flex","backgroundColor","borderRadius","indicatorStyle","bottom","right","role","map","_ref2","el","tabIndex","onClick","onKeyDown","TabPanel","_ref3","panelStyle","propTypes","node","isRequired","number","func","oneOf","bool","string"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/components/common/Tabs.jsx"],"sourcesContent":["/**\n * Tabs\n * \n * A standardized tabs component for organizing content into multiple sections.\n * \n * @module components/common/Tabs\n */\n\nimport React, { forwardRef, useState, useEffect, useRef, Children, isValidElement, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Standardized tabs component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Tab panels to display\n * @param {number} [props.defaultValue=0] - Default selected tab index (uncontrolled)\n * @param {number} [props.value] - Selected tab index (controlled)\n * @param {Function} [props.onChange] - Callback when tab changes\n * @param {string} [props.orientation='horizontal'] - Tabs orientation\n * @param {string} [props.variant='standard'] - Visual variant\n * @param {boolean} [props.centered=false] - Whether to center the tabs\n * @param {boolean} [props.fullWidth=false] - Whether tabs should take full width\n * @param {string} [props.className] - Additional CSS class names\n * @param {React.Ref} ref - Forwarded ref\n * @returns {JSX.Element} The tabs component\n */\nconst Tabs = forwardRef(({\n  children,\n  defaultValue = 0,\n  value: valueProp,\n  onChange,\n  orientation = 'horizontal',\n  variant = 'standard',\n  centered = false,\n  fullWidth = false,\n  className = '',\n  ...rest\n}, ref) => {\n  // Determine if controlled or uncontrolled\n  const isControlled = valueProp !== undefined;\n  const [selectedTab, setSelectedTab] = useState(defaultValue);\n  const value = isControlled ? valueProp : selectedTab;\n  \n  // Refs for tab elements and indicator\n  const tabsRef = useRef(null);\n  const tabRefs = useRef([]);\n  const indicatorRef = useRef(null);\n  \n  // Update indicator position when selected tab changes\n  useEffect(() => {\n    updateIndicator();\n  }, [value]);\n  \n  // Update indicator position when window resizes\n  useEffect(() => {\n    const handleResize = () => {\n      updateIndicator();\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n  \n  // Update indicator position\n  const updateIndicator = () => {\n    if (!tabsRef.current || !indicatorRef.current || tabRefs.current.length === 0) return;\n    \n    const selectedTabEl = tabRefs.current[value];\n    if (!selectedTabEl) return;\n    \n    if (orientation === 'horizontal') {\n      indicatorRef.current.style.left = `${selectedTabEl.offsetLeft}px`;\n      indicatorRef.current.style.width = `${selectedTabEl.offsetWidth}px`;\n    } else {\n      indicatorRef.current.style.top = `${selectedTabEl.offsetTop}px`;\n      indicatorRef.current.style.height = `${selectedTabEl.offsetHeight}px`;\n    }\n  };\n  \n  // Handle tab selection\n  const handleTabSelect = (index) => {\n    if (!isControlled) {\n      setSelectedTab(index);\n    }\n    \n    if (onChange) {\n      onChange(index);\n    }\n  };\n  \n  // Handle keyboard navigation\n  const handleKeyDown = (e, index) => {\n    let newIndex = index;\n    \n    const tabCount = Children.count(children);\n    \n    switch (e.key) {\n      case 'ArrowRight':\n      case 'ArrowDown':\n        newIndex = (index + 1) % tabCount;\n        break;\n      case 'ArrowLeft':\n      case 'ArrowUp':\n        newIndex = (index - 1 + tabCount) % tabCount;\n        break;\n      case 'Home':\n        newIndex = 0;\n        break;\n      case 'End':\n        newIndex = tabCount - 1;\n        break;\n      default:\n        return;\n    }\n    \n    // Prevent default behavior for these keys\n    e.preventDefault();\n    \n    // Move focus to the new tab\n    tabRefs.current[newIndex].focus();\n    \n    // Select the new tab\n    handleTabSelect(newIndex);\n  };\n  \n  // Extract tab information from children\n  const tabs = [];\n  const tabPanels = [];\n  \n  Children.forEach(children, (child, index) => {\n    if (!isValidElement(child)) return;\n    \n    if (child.type.displayName === 'TabPanel') {\n      // Get the label from the TabPanel\n      const { label, disabled } = child.props;\n      \n      // Create a tab\n      tabs.push({ label, disabled, index });\n      \n      // Clone the TabPanel with the selected state\n      tabPanels.push(\n        cloneElement(child, {\n          selected: value === index,\n          id: `tap-tab-panel-${index}`,\n          'aria-labelledby': `tap-tab-${index}`,\n        })\n      );\n    } else {\n      // Non-TabPanel children are just passed through\n      tabPanels.push(child);\n    }\n  });\n  \n  // Tab list styles\n  const tabListStyle = {\n    display: 'flex',\n    flexDirection: orientation === 'vertical' ? 'column' : 'row',\n    position: 'relative',\n    overflow: 'hidden',\n    justifyContent: centered ? 'center' : 'flex-start',\n    borderBottom: orientation === 'horizontal' && variant !== 'contained' ? '1px solid #e0e0e0' : 'none',\n    borderRight: orientation === 'vertical' && variant !== 'contained' ? '1px solid #e0e0e0' : 'none',\n  };\n  \n  // Tab styles\n  const getTabStyle = (isSelected, isDisabled) => {\n    const baseStyle = {\n      padding: '12px 16px',\n      fontSize: '14px',\n      fontWeight: isSelected ? 600 : 400,\n      color: isDisabled ? '#bdbdbd' : isSelected ? '#1976d2' : '#616161',\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      opacity: isDisabled ? 0.7 : 1,\n      border: 'none',\n      background: 'none',\n      textAlign: 'center',\n      transition: 'color 0.2s',\n      outline: 'none',\n      position: 'relative',\n      zIndex: 1,\n      whiteSpace: 'nowrap',\n      flex: fullWidth ? 1 : 'auto',\n    };\n    \n    // Variant specific styles\n    if (variant === 'contained') {\n      baseStyle.backgroundColor = isSelected ? '#1976d2' : 'transparent';\n      baseStyle.color = isSelected ? 'white' : '#616161';\n      baseStyle.borderRadius = orientation === 'horizontal' ? '4px 4px 0 0' : '4px 0 0 4px';\n    }\n    \n    return baseStyle;\n  };\n  \n  // Indicator styles\n  const indicatorStyle = {\n    position: 'absolute',\n    backgroundColor: variant === 'contained' ? 'transparent' : '#1976d2',\n    transition: 'all 0.3s',\n    ...(orientation === 'horizontal'\n      ? {\n          bottom: 0,\n          height: '2px',\n        }\n      : {\n          right: 0,\n          width: '2px',\n        }),\n  };\n  \n  return (\n    <div \n      className={`tap-tabs tap-tabs--${orientation} tap-tabs--${variant} ${fullWidth ? 'tap-tabs--fullwidth' : ''} ${className}`}\n      ref={ref}\n      data-testid=\"tap-tabs\"\n      {...rest}\n    >\n      {/* Tab List */}\n      <div \n        className=\"tap-tabs__list\"\n        style={tabListStyle}\n        ref={tabsRef}\n        role=\"tablist\"\n        aria-orientation={orientation}\n      >\n        {tabs.map(({ label, disabled, index }) => (\n          <button\n            key={index}\n            ref={(el) => { tabRefs.current[index] = el; }}\n            role=\"tab\"\n            id={`tap-tab-${index}`}\n            aria-selected={value === index}\n            aria-controls={`tap-tab-panel-${index}`}\n            tabIndex={value === index ? 0 : -1}\n            onClick={() => !disabled && handleTabSelect(index)}\n            onKeyDown={(e) => handleKeyDown(e, index)}\n            style={getTabStyle(value === index, disabled)}\n            className={`tap-tabs__tab ${value === index ? 'tap-tabs__tab--selected' : ''} ${disabled ? 'tap-tabs__tab--disabled' : ''}`}\n            disabled={disabled}\n            data-testid={`tap-tab-${index}`}\n          >\n            {label}\n          </button>\n        ))}\n        \n        {/* Indicator */}\n        {variant !== 'contained' && (\n          <span \n            className=\"tap-tabs__indicator\" \n            style={indicatorStyle}\n            ref={indicatorRef}\n          />\n        )}\n      </div>\n      \n      {/* Tab Panels */}\n      <div className=\"tap-tabs__panels\">\n        {tabPanels}\n      </div>\n    </div>\n  );\n});\n\n/**\n * TabPanel component - container for tab content\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Tab panel content\n * @param {string} props.label - Tab label\n * @param {boolean} [props.disabled=false] - Whether tab is disabled\n * @param {boolean} [props.selected=false] - Whether tab is selected\n * @param {string} [props.className] - Additional CSS class names\n * @returns {JSX.Element} The tab panel component\n */\nconst TabPanel = ({\n  children,\n  label,\n  disabled = false,\n  selected = false,\n  className = '',\n  ...rest\n}) => {\n  // Panel styles\n  const panelStyle = {\n    padding: '16px',\n    display: selected ? 'block' : 'none',\n  };\n  \n  return (\n    <div\n      className={`tap-tab-panel ${selected ? 'tap-tab-panel--selected' : ''} ${className}`}\n      style={panelStyle}\n      role=\"tabpanel\"\n      aria-hidden={!selected}\n      data-testid=\"tap-tab-panel\"\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n};\n\n// Display name for debugging\nTabs.displayName = 'Tabs';\nTabPanel.displayName = 'TabPanel';\n\n// Prop types\nTabs.propTypes = {\n  /** Tab panels to display */\n  children: PropTypes.node.isRequired,\n  \n  /** Default selected tab index (uncontrolled) */\n  defaultValue: PropTypes.number,\n  \n  /** Selected tab index (controlled) */\n  value: PropTypes.number,\n  \n  /** Callback when tab changes */\n  onChange: PropTypes.func,\n  \n  /** Tabs orientation */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  \n  /** Visual variant */\n  variant: PropTypes.oneOf(['standard', 'contained']),\n  \n  /** Whether to center the tabs */\n  centered: PropTypes.bool,\n  \n  /** Whether tabs should take full width */\n  fullWidth: PropTypes.bool,\n  \n  /** Additional CSS class names */\n  className: PropTypes.string,\n};\n\nTabPanel.propTypes = {\n  /** Tab panel content */\n  children: PropTypes.node.isRequired,\n  \n  /** Tab label */\n  label: PropTypes.node.isRequired,\n  \n  /** Whether tab is disabled */\n  disabled: PropTypes.bool,\n  \n  /** Whether tab is selected */\n  selected: PropTypes.bool,\n  \n  /** Additional CSS class names */\n  className: PropTypes.string,\n};\n\n// Export both components\nexport { TabPanel };\nexport default Tabs;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}