{"ast":null,"code":"/**\n * Database Monitoring Context\n * \n * Provides real-time database performance metrics and status information\n * for the Database Optimization (Phase 4) implementation.\n */\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const DatabaseMonitoringContext = /*#__PURE__*/createContext();\nexport const DatabaseMonitoringProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [metrics, setMetrics] = useState({\n    connectionPool: {\n      utilization: 0,\n      activeConnections: 0,\n      idleConnections: 0,\n      maxConnections: 0,\n      waitingQueries: 0\n    },\n    queryPerformance: {\n      averageQueryTime: 0,\n      slowQueries: [],\n      cacheHitRate: 0,\n      queryCount: 0\n    },\n    indexUsage: {\n      unusedIndexes: [],\n      missingIndexes: []\n    },\n    health: {\n      status: 'unknown',\n      lastIssue: null,\n      responseTime: 0\n    }\n  });\n  const [status, setStatus] = useState('healthy');\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Function to refresh database metrics\n  const refreshMetrics = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // In a real implementation, this would call an API endpoint\n      // Mock implementation for development\n      const response = await fetch('/api/admin/database/metrics');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch database metrics: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setMetrics(data);\n      setStatus(data.health?.status || 'unknown');\n      setLastUpdated(new Date());\n    } catch (error) {\n      console.error('Failed to fetch database metrics', error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Get metrics for a specific database component\n  const getComponentMetrics = useCallback(component => {\n    switch (component) {\n      case 'connectionPool':\n        return metrics.connectionPool || {};\n      case 'queryPerformance':\n        return metrics.queryPerformance || {};\n      case 'indexUsage':\n        return metrics.indexUsage || {};\n      case 'health':\n        return metrics.health || {};\n      default:\n        return {};\n    }\n  }, [metrics]);\n\n  // Check if any alerts are active\n  const hasAlerts = useCallback(() => {\n    return metrics.connectionPool?.utilization > 80 || metrics.queryPerformance?.slowQueries?.length > 0 || metrics.indexUsage?.missingIndexes?.length > 0 || metrics.health?.status !== 'healthy';\n  }, [metrics]);\n\n  // Initial metrics load\n  useEffect(() => {\n    refreshMetrics();\n\n    // Set up periodic refresh\n    const interval = setInterval(refreshMetrics, 60000); // Every minute\n\n    return () => clearInterval(interval);\n  }, [refreshMetrics]);\n  return /*#__PURE__*/_jsx(DatabaseMonitoringContext.Provider, {\n    value: {\n      metrics,\n      status,\n      lastUpdated,\n      isLoading,\n      error,\n      refreshMetrics,\n      getComponentMetrics,\n      hasAlerts\n    },\n    children: children\n  });\n};\nexport const useDatabaseMonitoring = () => useContext(DatabaseMonitoringContext);\nexport default DatabaseMonitoringContext;","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","jsx","_jsx","DatabaseMonitoringContext","DatabaseMonitoringProvider","_ref","children","metrics","setMetrics","connectionPool","utilization","activeConnections","idleConnections","maxConnections","waitingQueries","queryPerformance","averageQueryTime","slowQueries","cacheHitRate","queryCount","indexUsage","unusedIndexes","missingIndexes","health","status","lastIssue","responseTime","setStatus","lastUpdated","setLastUpdated","isLoading","setIsLoading","error","setError","refreshMetrics","response","fetch","ok","Error","statusText","data","json","Date","console","message","getComponentMetrics","component","hasAlerts","length","interval","setInterval","clearInterval","Provider","value","useDatabaseMonitoring"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/contexts/DatabaseMonitoringContext.js"],"sourcesContent":["/**\n * Database Monitoring Context\n * \n * Provides real-time database performance metrics and status information\n * for the Database Optimization (Phase 4) implementation.\n */\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\n\nexport const DatabaseMonitoringContext = createContext();\n\nexport const DatabaseMonitoringProvider = ({ children }) => {\n  const [metrics, setMetrics] = useState({\n    connectionPool: {\n      utilization: 0,\n      activeConnections: 0,\n      idleConnections: 0,\n      maxConnections: 0,\n      waitingQueries: 0,\n    },\n    queryPerformance: {\n      averageQueryTime: 0,\n      slowQueries: [],\n      cacheHitRate: 0,\n      queryCount: 0,\n    },\n    indexUsage: {\n      unusedIndexes: [],\n      missingIndexes: [],\n    },\n    health: {\n      status: 'unknown',\n      lastIssue: null,\n      responseTime: 0,\n    }\n  });\n  \n  const [status, setStatus] = useState('healthy');\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Function to refresh database metrics\n  const refreshMetrics = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // In a real implementation, this would call an API endpoint\n      // Mock implementation for development\n      const response = await fetch('/api/admin/database/metrics');\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch database metrics: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      setMetrics(data);\n      setStatus(data.health?.status || 'unknown');\n      setLastUpdated(new Date());\n    } catch (error) {\n      console.error('Failed to fetch database metrics', error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  \n  // Get metrics for a specific database component\n  const getComponentMetrics = useCallback((component) => {\n    switch (component) {\n      case 'connectionPool':\n        return metrics.connectionPool || {};\n      case 'queryPerformance':\n        return metrics.queryPerformance || {};\n      case 'indexUsage':\n        return metrics.indexUsage || {};\n      case 'health':\n        return metrics.health || {};\n      default:\n        return {};\n    }\n  }, [metrics]);\n  \n  // Check if any alerts are active\n  const hasAlerts = useCallback(() => {\n    return (\n      (metrics.connectionPool?.utilization > 80) ||\n      (metrics.queryPerformance?.slowQueries?.length > 0) ||\n      (metrics.indexUsage?.missingIndexes?.length > 0) ||\n      (metrics.health?.status !== 'healthy')\n    );\n  }, [metrics]);\n  \n  // Initial metrics load\n  useEffect(() => {\n    refreshMetrics();\n    \n    // Set up periodic refresh\n    const interval = setInterval(refreshMetrics, 60000); // Every minute\n    \n    return () => clearInterval(interval);\n  }, [refreshMetrics]);\n  \n  return (\n    <DatabaseMonitoringContext.Provider \n      value={{ \n        metrics,\n        status,\n        lastUpdated,\n        isLoading,\n        error,\n        refreshMetrics,\n        getComponentMetrics,\n        hasAlerts\n      }}\n    >\n      {children}\n    </DatabaseMonitoringContext.Provider>\n  );\n};\n\nexport const useDatabaseMonitoring = () => useContext(DatabaseMonitoringContext);\n\nexport default DatabaseMonitoringContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}