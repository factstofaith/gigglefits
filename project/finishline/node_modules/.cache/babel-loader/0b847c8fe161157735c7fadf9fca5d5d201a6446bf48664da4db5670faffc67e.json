{"ast":null,"code":"/**\n * useAsync\n * \n * A hook for handling asynchronous operations with loading, error, and result states.\n * \n * @module hooks/useAsync\n */\n\nimport { useState, useCallback, useEffect, useRef } from 'react';\n\n/**\n * Custom hook for handling asynchronous operations\n * \n * @param {Function} asyncFunction - The async function to execute\n * @param {Object} [options] - Additional options\n * @param {boolean} [options.immediate=false] - Whether to execute the function immediately\n * @param {Array} [options.dependencies=[]] - Dependencies to watch for auto-execution\n * @param {Function} [options.onSuccess] - Callback to run on successful execution\n * @param {Function} [options.onError] - Callback to run on execution error\n * @param {Function} [options.onSettled] - Callback to run after execution (success or error)\n * @param {any} [options.initialData=null] - Initial data value\n * @returns {Object} State and execution function\n */\nfunction useAsync(asyncFunction, options = {}) {\n  const {\n    immediate = false,\n    dependencies = [],\n    onSuccess,\n    onError,\n    onSettled,\n    initialData = null\n  } = options;\n\n  // State for loading, error, and data\n  const [loading, setLoading] = useState(immediate);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(initialData);\n\n  // Track if the component is mounted\n  const isMounted = useRef(false);\n\n  // Store the latest asyncFunction to avoid stale closures\n  const asyncFunctionRef = useRef(asyncFunction);\n  useEffect(() => {\n    asyncFunctionRef.current = asyncFunction;\n  }, [asyncFunction]);\n\n  // Store the latest callbacks to avoid stale closures\n  const callbacksRef = useRef({\n    onSuccess,\n    onError,\n    onSettled\n  });\n  useEffect(() => {\n    callbacksRef.current = {\n      onSuccess,\n      onError,\n      onSettled\n    };\n  }, [onSuccess, onError, onSettled]);\n\n  // Function to execute the async operation\n  const execute = useCallback(async (...args) => {\n    // Set loading state\n    setLoading(true);\n    setError(null);\n    try {\n      // Execute the async function\n      const result = await asyncFunctionRef.current(...args);\n\n      // Only update state if the component is still mounted\n      if (isMounted.current) {\n        setData(result);\n        setLoading(false);\n\n        // Call onSuccess callback if provided\n        if (callbacksRef.current.onSuccess) {\n          callbacksRef.current.onSuccess(result);\n        }\n      }\n\n      // Call onSettled callback if provided\n      if (isMounted.current && callbacksRef.current.onSettled) {\n        callbacksRef.current.onSettled(result, null);\n      }\n      return result;\n    } catch (error) {\n      // Only update state if the component is still mounted\n      if (isMounted.current) {\n        setError(error);\n        setLoading(false);\n\n        // Call onError callback if provided\n        if (callbacksRef.current.onError) {\n          callbacksRef.current.onError(error);\n        }\n\n        // Call onSettled callback if provided\n        if (callbacksRef.current.onSettled) {\n          callbacksRef.current.onSettled(null, error);\n        }\n      }\n\n      // Re-throw the error for the caller to handle if needed\n      throw error;\n    }\n  }, []);\n\n  // Reset state\n  const reset = useCallback(() => {\n    setLoading(false);\n    setError(null);\n    setData(initialData);\n  }, [initialData]);\n\n  // Execute the async function immediately or when dependencies change\n  useEffect(() => {\n    isMounted.current = true;\n    if (immediate) {\n      execute();\n    }\n    return () => {\n      isMounted.current = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [immediate, execute, ...dependencies]);\n\n  // Return the state and execution function\n  return {\n    loading,\n    error,\n    data,\n    execute,\n    reset\n  };\n}\nexport default useAsync;","map":{"version":3,"names":["useState","useCallback","useEffect","useRef","useAsync","asyncFunction","options","immediate","dependencies","onSuccess","onError","onSettled","initialData","loading","setLoading","error","setError","data","setData","isMounted","asyncFunctionRef","current","callbacksRef","execute","args","result","reset"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/hooks/useAsync.js"],"sourcesContent":["/**\n * useAsync\n * \n * A hook for handling asynchronous operations with loading, error, and result states.\n * \n * @module hooks/useAsync\n */\n\nimport { useState, useCallback, useEffect, useRef } from 'react';\n\n/**\n * Custom hook for handling asynchronous operations\n * \n * @param {Function} asyncFunction - The async function to execute\n * @param {Object} [options] - Additional options\n * @param {boolean} [options.immediate=false] - Whether to execute the function immediately\n * @param {Array} [options.dependencies=[]] - Dependencies to watch for auto-execution\n * @param {Function} [options.onSuccess] - Callback to run on successful execution\n * @param {Function} [options.onError] - Callback to run on execution error\n * @param {Function} [options.onSettled] - Callback to run after execution (success or error)\n * @param {any} [options.initialData=null] - Initial data value\n * @returns {Object} State and execution function\n */\nfunction useAsync(asyncFunction, options = {}) {\n  const {\n    immediate = false,\n    dependencies = [],\n    onSuccess,\n    onError,\n    onSettled,\n    initialData = null,\n  } = options;\n  \n  // State for loading, error, and data\n  const [loading, setLoading] = useState(immediate);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState(initialData);\n  \n  // Track if the component is mounted\n  const isMounted = useRef(false);\n  \n  // Store the latest asyncFunction to avoid stale closures\n  const asyncFunctionRef = useRef(asyncFunction);\n  useEffect(() => {\n    asyncFunctionRef.current = asyncFunction;\n  }, [asyncFunction]);\n  \n  // Store the latest callbacks to avoid stale closures\n  const callbacksRef = useRef({ onSuccess, onError, onSettled });\n  useEffect(() => {\n    callbacksRef.current = { onSuccess, onError, onSettled };\n  }, [onSuccess, onError, onSettled]);\n  \n  // Function to execute the async operation\n  const execute = useCallback(async (...args) => {\n    // Set loading state\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // Execute the async function\n      const result = await asyncFunctionRef.current(...args);\n      \n      // Only update state if the component is still mounted\n      if (isMounted.current) {\n        setData(result);\n        setLoading(false);\n        \n        // Call onSuccess callback if provided\n        if (callbacksRef.current.onSuccess) {\n          callbacksRef.current.onSuccess(result);\n        }\n      }\n      \n      // Call onSettled callback if provided\n      if (isMounted.current && callbacksRef.current.onSettled) {\n        callbacksRef.current.onSettled(result, null);\n      }\n      \n      return result;\n    } catch (error) {\n      // Only update state if the component is still mounted\n      if (isMounted.current) {\n        setError(error);\n        setLoading(false);\n        \n        // Call onError callback if provided\n        if (callbacksRef.current.onError) {\n          callbacksRef.current.onError(error);\n        }\n        \n        // Call onSettled callback if provided\n        if (callbacksRef.current.onSettled) {\n          callbacksRef.current.onSettled(null, error);\n        }\n      }\n      \n      // Re-throw the error for the caller to handle if needed\n      throw error;\n    }\n  }, []);\n  \n  // Reset state\n  const reset = useCallback(() => {\n    setLoading(false);\n    setError(null);\n    setData(initialData);\n  }, [initialData]);\n  \n  // Execute the async function immediately or when dependencies change\n  useEffect(() => {\n    isMounted.current = true;\n    \n    if (immediate) {\n      execute();\n    }\n    \n    return () => {\n      isMounted.current = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [immediate, execute, ...dependencies]);\n  \n  // Return the state and execution function\n  return {\n    loading,\n    error,\n    data,\n    execute,\n    reset,\n  };\n}\n\nexport default useAsync;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}