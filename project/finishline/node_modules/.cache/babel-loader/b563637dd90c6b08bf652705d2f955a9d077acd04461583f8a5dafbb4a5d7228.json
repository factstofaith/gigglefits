{"ast":null,"code":"/**\n * useMediaQuery Hook\n * \n * Custom hook for responsive design using media queries.\n * \n * @module hooks/useMediaQuery\n */\n\nimport { useState, useEffect, useMemo } from 'react';\n\n/**\n * Hook to detect if a media query matches\n *\n * @param {string} query - CSS media query string\n * @returns {boolean} Whether the media query matches\n */\nfunction useMediaQuery(query) {\n  // Initialize with null since we don't know the match on the server\n  const [matches, setMatches] = useState(false);\n\n  // Memoize the media query to avoid unnecessary re-renders\n  const mediaQueryList = useMemo(() => {\n    if (typeof window === 'undefined') return null;\n    return window.matchMedia(query);\n  }, [query]);\n  useEffect(() => {\n    if (!mediaQueryList) return;\n\n    // Set initial value\n    setMatches(mediaQueryList.matches);\n\n    // Define listener function\n    const listener = event => {\n      setMatches(event.matches);\n    };\n\n    // Use the modern addEventListener if available, or fallback to the deprecated addListener\n    if (mediaQueryList.addEventListener) {\n      mediaQueryList.addEventListener('change', listener);\n      return () => {\n        mediaQueryList.removeEventListener('change', listener);\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQueryList.addListener(listener);\n      return () => {\n        mediaQueryList.removeListener(listener);\n      };\n    }\n  }, [mediaQueryList]);\n  return matches;\n}\n\n/**\n * Predefined breakpoints for common screen sizes\n */\nexport const breakpoints = {\n  xs: '(max-width: 575.98px)',\n  sm: '(min-width: 576px) and (max-width: 767.98px)',\n  md: '(min-width: 768px) and (max-width: 991.98px)',\n  lg: '(min-width: 992px) and (max-width: 1199.98px)',\n  xl: '(min-width: 1200px) and (max-width: 1399.98px)',\n  xxl: '(min-width: 1400px)',\n  // Inclusive breakpoints (e.g., sm and up)\n  smUp: '(min-width: 576px)',\n  mdUp: '(min-width: 768px)',\n  lgUp: '(min-width: 992px)',\n  xlUp: '(min-width: 1200px)',\n  xxlUp: '(min-width: 1400px)',\n  // Mobile-first breakpoints\n  smDown: '(max-width: 767.98px)',\n  mdDown: '(max-width: 991.98px)',\n  lgDown: '(max-width: 1199.98px)',\n  xlDown: '(max-width: 1399.98px)',\n  // Special cases\n  portrait: '(orientation: portrait)',\n  landscape: '(orientation: landscape)',\n  dark: '(prefers-color-scheme: dark)',\n  light: '(prefers-color-scheme: light)',\n  reducedMotion: '(prefers-reduced-motion: reduce)',\n  highContrast: '(prefers-contrast: more)',\n  lowContrast: '(prefers-contrast: less)',\n  touch: '(hover: none) and (pointer: coarse)',\n  stylus: '(hover: none) and (pointer: fine)',\n  pointer: '(hover: hover) and (pointer: fine)',\n  colorGamutP3: '(color-gamut: p3)',\n  colorGamutSRGB: '(color-gamut: srgb)'\n};\n\n/**\n * Hook to use a predefined breakpoint\n *\n * @param {string} breakpointKey - Key of the breakpoint to use\n * @returns {boolean} Whether the breakpoint matches\n */\nexport function useBreakpoint(breakpointKey) {\n  const query = breakpoints[breakpointKey];\n  if (!query) {\n    console.error(`Breakpoint key \"${breakpointKey}\" is not defined`);\n    return false;\n  }\n  return useMediaQuery(query);\n}\n\n/**\n * Hook to determine the current active breakpoint\n *\n * @returns {string} The current active breakpoint key\n */\nexport function useActiveBreakpoint() {\n  const isXs = useMediaQuery(breakpoints.xs);\n  const isSm = useMediaQuery(breakpoints.sm);\n  const isMd = useMediaQuery(breakpoints.md);\n  const isLg = useMediaQuery(breakpoints.lg);\n  const isXl = useMediaQuery(breakpoints.xl);\n  const isXxl = useMediaQuery(breakpoints.xxl);\n  if (isXs) return 'xs';\n  if (isSm) return 'sm';\n  if (isMd) return 'md';\n  if (isLg) return 'lg';\n  if (isXl) return 'xl';\n  if (isXxl) return 'xxl';\n\n  // Default to 'xs' for SSR\n  return 'xs';\n}\nexport default useMediaQuery;","map":{"version":3,"names":["useState","useEffect","useMemo","useMediaQuery","query","matches","setMatches","mediaQueryList","window","matchMedia","listener","event","addEventListener","removeEventListener","addListener","removeListener","breakpoints","xs","sm","md","lg","xl","xxl","smUp","mdUp","lgUp","xlUp","xxlUp","smDown","mdDown","lgDown","xlDown","portrait","landscape","dark","light","reducedMotion","highContrast","lowContrast","touch","stylus","pointer","colorGamutP3","colorGamutSRGB","useBreakpoint","breakpointKey","console","error","useActiveBreakpoint","isXs","isSm","isMd","isLg","isXl","isXxl"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/hooks/useMediaQuery.js"],"sourcesContent":["/**\n * useMediaQuery Hook\n * \n * Custom hook for responsive design using media queries.\n * \n * @module hooks/useMediaQuery\n */\n\nimport { useState, useEffect, useMemo } from 'react';\n\n/**\n * Hook to detect if a media query matches\n *\n * @param {string} query - CSS media query string\n * @returns {boolean} Whether the media query matches\n */\nfunction useMediaQuery(query) {\n  // Initialize with null since we don't know the match on the server\n  const [matches, setMatches] = useState(false);\n  \n  // Memoize the media query to avoid unnecessary re-renders\n  const mediaQueryList = useMemo(() => {\n    if (typeof window === 'undefined') return null;\n    return window.matchMedia(query);\n  }, [query]);\n  \n  useEffect(() => {\n    if (!mediaQueryList) return;\n    \n    // Set initial value\n    setMatches(mediaQueryList.matches);\n    \n    // Define listener function\n    const listener = (event) => {\n      setMatches(event.matches);\n    };\n    \n    // Use the modern addEventListener if available, or fallback to the deprecated addListener\n    if (mediaQueryList.addEventListener) {\n      mediaQueryList.addEventListener('change', listener);\n      return () => {\n        mediaQueryList.removeEventListener('change', listener);\n      };\n    } else {\n      // Fallback for older browsers\n      mediaQueryList.addListener(listener);\n      return () => {\n        mediaQueryList.removeListener(listener);\n      };\n    }\n  }, [mediaQueryList]);\n  \n  return matches;\n}\n\n/**\n * Predefined breakpoints for common screen sizes\n */\nexport const breakpoints = {\n  xs: '(max-width: 575.98px)',\n  sm: '(min-width: 576px) and (max-width: 767.98px)',\n  md: '(min-width: 768px) and (max-width: 991.98px)',\n  lg: '(min-width: 992px) and (max-width: 1199.98px)',\n  xl: '(min-width: 1200px) and (max-width: 1399.98px)',\n  xxl: '(min-width: 1400px)',\n  \n  // Inclusive breakpoints (e.g., sm and up)\n  smUp: '(min-width: 576px)',\n  mdUp: '(min-width: 768px)',\n  lgUp: '(min-width: 992px)',\n  xlUp: '(min-width: 1200px)',\n  xxlUp: '(min-width: 1400px)',\n  \n  // Mobile-first breakpoints\n  smDown: '(max-width: 767.98px)',\n  mdDown: '(max-width: 991.98px)',\n  lgDown: '(max-width: 1199.98px)',\n  xlDown: '(max-width: 1399.98px)',\n  \n  // Special cases\n  portrait: '(orientation: portrait)',\n  landscape: '(orientation: landscape)',\n  dark: '(prefers-color-scheme: dark)',\n  light: '(prefers-color-scheme: light)',\n  reducedMotion: '(prefers-reduced-motion: reduce)',\n  highContrast: '(prefers-contrast: more)',\n  lowContrast: '(prefers-contrast: less)',\n  touch: '(hover: none) and (pointer: coarse)',\n  stylus: '(hover: none) and (pointer: fine)',\n  pointer: '(hover: hover) and (pointer: fine)',\n  colorGamutP3: '(color-gamut: p3)',\n  colorGamutSRGB: '(color-gamut: srgb)',\n};\n\n/**\n * Hook to use a predefined breakpoint\n *\n * @param {string} breakpointKey - Key of the breakpoint to use\n * @returns {boolean} Whether the breakpoint matches\n */\nexport function useBreakpoint(breakpointKey) {\n  const query = breakpoints[breakpointKey];\n  \n  if (!query) {\n    console.error(`Breakpoint key \"${breakpointKey}\" is not defined`);\n    return false;\n  }\n  \n  return useMediaQuery(query);\n}\n\n/**\n * Hook to determine the current active breakpoint\n *\n * @returns {string} The current active breakpoint key\n */\nexport function useActiveBreakpoint() {\n  const isXs = useMediaQuery(breakpoints.xs);\n  const isSm = useMediaQuery(breakpoints.sm);\n  const isMd = useMediaQuery(breakpoints.md);\n  const isLg = useMediaQuery(breakpoints.lg);\n  const isXl = useMediaQuery(breakpoints.xl);\n  const isXxl = useMediaQuery(breakpoints.xxl);\n  \n  if (isXs) return 'xs';\n  if (isSm) return 'sm';\n  if (isMd) return 'md';\n  if (isLg) return 'lg';\n  if (isXl) return 'xl';\n  if (isXxl) return 'xxl';\n  \n  // Default to 'xs' for SSR\n  return 'xs';\n}\n\nexport default useMediaQuery;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}