{"ast":null,"code":"/**\n * AuthContext\n * \n * Context provider for application-wide authentication state management.\n * \n * @module contexts/AuthContext\n */\n\nimport React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// Create the context\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  login: () => {},\n  logout: () => {},\n  register: () => {},\n  updateProfile: () => {}\n});\n\n/**\n * Auth Provider Component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Child components\n * @param {Object} [props.initialUser=null] - Initial user data for testing\n * @returns {JSX.Element} Auth provider\n */\nexport function AuthProvider({\n  children,\n  initialUser = null\n}) {\n  // State for authentication\n  const [user, setUser] = useState(initialUser);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check for existing session on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // In a real app, this would check localStorage and/or make an API call\n        // to validate the session and get user data\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Failed to restore authentication state:', error);\n        // Clear potentially corrupted data\n        localStorage.removeItem('user');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n\n  // Login functionality\n  const login = useCallback(async credentials => {\n    setIsLoading(true);\n    try {\n      // In a real app, this would make an API call to authenticate\n      // For demo purposes, we'll simulate a successful login if email and password are provided\n      if (!credentials?.email || !credentials?.password) {\n        throw new Error('Email and password are required');\n      }\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Mock successful authentication\n      const userData = {\n        id: '12345',\n        email: credentials.email,\n        name: 'Demo User',\n        role: 'user'\n      };\n\n      // Store in state and localStorage\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      return {\n        success: true,\n        user: userData\n      };\n    } catch (error) {\n      console.error('Login failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Logout functionality\n  const logout = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      // In a real app, this would make an API call to invalidate the session\n      // For demo purposes, we'll just clear local state\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Clear auth state\n      setUser(null);\n      localStorage.removeItem('user');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Logout failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Register functionality\n  const register = useCallback(async userData => {\n    setIsLoading(true);\n    try {\n      // In a real app, this would make an API call to register a new user\n      // For demo purposes, we'll simulate a successful registration if required fields are provided\n      if (!userData?.email || !userData?.password || !userData?.name) {\n        throw new Error('Email, password and name are required');\n      }\n\n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error('Invalid email format');\n      }\n\n      // Validate password strength\n      if (userData.password.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n\n      // Mock successful registration\n      const newUser = {\n        id: Math.random().toString(36).substr(2, 9),\n        email: userData.email,\n        name: userData.name,\n        role: 'user'\n      };\n\n      // Store in state and localStorage\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n      return {\n        success: true,\n        user: newUser\n      };\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // Update profile functionality\n  const updateProfile = useCallback(async profileData => {\n    setIsLoading(true);\n    try {\n      // Ensure user is authenticated\n      if (!user) {\n        throw new Error('User must be authenticated to update profile');\n      }\n\n      // In a real app, this would make an API call to update the user's profile\n      // For demo purposes, we'll simulate a successful update\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Update user data\n      const updatedUser = {\n        ...user,\n        ...profileData\n      };\n\n      // Store in state and localStorage\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return {\n        success: true,\n        user: updatedUser\n      };\n    } catch (error) {\n      console.error('Profile update failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user]);\n\n  // Computed isAuthenticated state\n  const isAuthenticated = useMemo(() => Boolean(user), [user]);\n\n  // Value object for the context\n  const contextValue = useMemo(() => ({\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    register,\n    updateProfile\n  }), [user, isAuthenticated, isLoading, login, logout, register, updateProfile]);\n  return /*#__PURE__*/_jsx(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n\n/**\n * Hook to use auth context\n * \n * @returns {Object} Auth context value\n */\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\nAuthProvider.propTypes = {\n  /** Child components */\n  children: PropTypes.node.isRequired,\n  /** Initial user data (primarily for testing) */\n  initialUser: PropTypes.object\n};\nexport default AuthContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","useEffect","PropTypes","jsx","_jsx","AuthContext","user","isAuthenticated","isLoading","login","logout","register","updateProfile","AuthProvider","children","initialUser","setUser","setIsLoading","checkAuth","storedUser","localStorage","getItem","JSON","parse","error","console","removeItem","credentials","email","password","Error","Promise","resolve","setTimeout","userData","id","name","role","setItem","stringify","success","message","emailRegex","test","length","newUser","Math","random","toString","substr","profileData","updatedUser","Boolean","contextValue","Provider","value","useAuth","context","propTypes","node","isRequired","object"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/contexts/AuthContext.jsx"],"sourcesContent":["/**\n * AuthContext\n * \n * Context provider for application-wide authentication state management.\n * \n * @module contexts/AuthContext\n */\n\nimport React, { createContext, useContext, useState, useCallback, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// Create the context\nconst AuthContext = createContext({\n  user: null,\n  isAuthenticated: false,\n  isLoading: true,\n  login: () => {},\n  logout: () => {},\n  register: () => {},\n  updateProfile: () => {},\n});\n\n/**\n * Auth Provider Component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Child components\n * @param {Object} [props.initialUser=null] - Initial user data for testing\n * @returns {JSX.Element} Auth provider\n */\nexport function AuthProvider({ children, initialUser = null }) {\n  // State for authentication\n  const [user, setUser] = useState(initialUser);\n  const [isLoading, setIsLoading] = useState(true);\n  \n  // Check for existing session on mount\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        // In a real app, this would check localStorage and/or make an API call\n        // to validate the session and get user data\n        const storedUser = localStorage.getItem('user');\n        \n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Failed to restore authentication state:', error);\n        // Clear potentially corrupted data\n        localStorage.removeItem('user');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    checkAuth();\n  }, []);\n  \n  // Login functionality\n  const login = useCallback(async (credentials) => {\n    setIsLoading(true);\n    \n    try {\n      // In a real app, this would make an API call to authenticate\n      // For demo purposes, we'll simulate a successful login if email and password are provided\n      if (!credentials?.email || !credentials?.password) {\n        throw new Error('Email and password are required');\n      }\n      \n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Mock successful authentication\n      const userData = {\n        id: '12345',\n        email: credentials.email,\n        name: 'Demo User',\n        role: 'user',\n      };\n      \n      // Store in state and localStorage\n      setUser(userData);\n      localStorage.setItem('user', JSON.stringify(userData));\n      \n      return { success: true, user: userData };\n    } catch (error) {\n      console.error('Login failed:', error);\n      return { success: false, error: error.message };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  \n  // Logout functionality\n  const logout = useCallback(async () => {\n    setIsLoading(true);\n    \n    try {\n      // In a real app, this would make an API call to invalidate the session\n      // For demo purposes, we'll just clear local state\n      \n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      // Clear auth state\n      setUser(null);\n      localStorage.removeItem('user');\n      \n      return { success: true };\n    } catch (error) {\n      console.error('Logout failed:', error);\n      return { success: false, error: error.message };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  \n  // Register functionality\n  const register = useCallback(async (userData) => {\n    setIsLoading(true);\n    \n    try {\n      // In a real app, this would make an API call to register a new user\n      // For demo purposes, we'll simulate a successful registration if required fields are provided\n      if (!userData?.email || !userData?.password || !userData?.name) {\n        throw new Error('Email, password and name are required');\n      }\n      \n      // Validate email format\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(userData.email)) {\n        throw new Error('Invalid email format');\n      }\n      \n      // Validate password strength\n      if (userData.password.length < 8) {\n        throw new Error('Password must be at least 8 characters long');\n      }\n      \n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 800));\n      \n      // Mock successful registration\n      const newUser = {\n        id: Math.random().toString(36).substr(2, 9),\n        email: userData.email,\n        name: userData.name,\n        role: 'user',\n      };\n      \n      // Store in state and localStorage\n      setUser(newUser);\n      localStorage.setItem('user', JSON.stringify(newUser));\n      \n      return { success: true, user: newUser };\n    } catch (error) {\n      console.error('Registration failed:', error);\n      return { success: false, error: error.message };\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  \n  // Update profile functionality\n  const updateProfile = useCallback(async (profileData) => {\n    setIsLoading(true);\n    \n    try {\n      // Ensure user is authenticated\n      if (!user) {\n        throw new Error('User must be authenticated to update profile');\n      }\n      \n      // In a real app, this would make an API call to update the user's profile\n      // For demo purposes, we'll simulate a successful update\n      \n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Update user data\n      const updatedUser = {\n        ...user,\n        ...profileData,\n      };\n      \n      // Store in state and localStorage\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      \n      return { success: true, user: updatedUser };\n    } catch (error) {\n      console.error('Profile update failed:', error);\n      return { success: false, error: error.message };\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user]);\n  \n  // Computed isAuthenticated state\n  const isAuthenticated = useMemo(() => Boolean(user), [user]);\n  \n  // Value object for the context\n  const contextValue = useMemo(() => ({\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    register,\n    updateProfile,\n  }), [user, isAuthenticated, isLoading, login, logout, register, updateProfile]);\n  \n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n/**\n * Hook to use auth context\n * \n * @returns {Object} Auth context value\n */\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  \n  return context;\n}\n\nAuthProvider.propTypes = {\n  /** Child components */\n  children: PropTypes.node.isRequired,\n  \n  /** Initial user data (primarily for testing) */\n  initialUser: PropTypes.object,\n};\n\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}