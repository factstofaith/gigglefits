{"ast":null,"code":"/**\n * Checkbox\n * \n * A standardized checkbox component with label and various states.\n * \n * @module components/common/Checkbox\n */\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Standardized checkbox component\n * \n * @param {Object} props - Component props\n * @param {string} [props.id] - Checkbox element ID\n * @param {string} [props.name] - Checkbox element name\n * @param {boolean} [props.checked] - Whether checkbox is checked (controlled)\n * @param {boolean} [props.defaultChecked] - Whether checkbox is checked by default (uncontrolled)\n * @param {string} [props.label] - Checkbox label\n * @param {boolean} [props.disabled=false] - Whether checkbox is disabled\n * @param {boolean} [props.required=false] - Whether checkbox is required\n * @param {boolean} [props.indeterminate=false] - Whether checkbox is in indeterminate state\n * @param {Function} [props.onChange] - Change handler\n * @param {string} [props.helperText] - Helper text below checkbox\n * @param {string} [props.error] - Error message\n * @param {string} [props.color='primary'] - Checkbox color\n * @param {string} [props.size='medium'] - Checkbox size\n * @param {string} [props.className] - Additional CSS class names\n * @param {string} [props.labelPlacement='end'] - Position of the label\n * @param {React.Ref} ref - Forwarded ref\n * @returns {JSX.Element} The checkbox component\n */\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst Checkbox = /*#__PURE__*/forwardRef(({\n  id,\n  name,\n  checked,\n  defaultChecked,\n  label,\n  disabled = false,\n  required = false,\n  indeterminate = false,\n  onChange,\n  helperText,\n  error,\n  color = 'primary',\n  size = 'medium',\n  className = '',\n  labelPlacement = 'end',\n  ...rest\n}, ref) => {\n  // Size styles\n  const sizeMap = {\n    small: {\n      width: '16px',\n      height: '16px',\n      fontSize: '14px'\n    },\n    medium: {\n      width: '20px',\n      height: '20px',\n      fontSize: '16px'\n    },\n    large: {\n      width: '24px',\n      height: '24px',\n      fontSize: '18px'\n    }\n  };\n\n  // Color styles\n  const colorMap = {\n    primary: {\n      activeColor: '#1976d2',\n      hoverColor: 'rgba(25, 118, 210, 0.1)'\n    },\n    secondary: {\n      activeColor: '#9c27b0',\n      hoverColor: 'rgba(156, 39, 176, 0.1)'\n    },\n    success: {\n      activeColor: '#4caf50',\n      hoverColor: 'rgba(76, 175, 80, 0.1)'\n    },\n    warning: {\n      activeColor: '#ff9800',\n      hoverColor: 'rgba(255, 152, 0, 0.1)'\n    },\n    error: {\n      activeColor: '#f44336',\n      hoverColor: 'rgba(244, 67, 54, 0.1)'\n    },\n    default: {\n      activeColor: '#757575',\n      hoverColor: 'rgba(0, 0, 0, 0.04)'\n    }\n  };\n\n  // Get current color\n  const currentColor = colorMap[color] || colorMap.primary;\n  const currentSize = sizeMap[size] || sizeMap.medium;\n\n  // Container styles\n  const containerStyle = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    position: 'relative',\n    marginBottom: helperText || error ? '16px' : '8px',\n    cursor: disabled ? 'not-allowed' : 'pointer',\n    opacity: disabled ? 0.7 : 1,\n    flexDirection: labelPlacement === 'start' ? 'row-reverse' : 'row'\n  };\n\n  // Checkbox styles\n  const checkboxStyle = {\n    position: 'relative',\n    width: currentSize.width,\n    height: currentSize.height,\n    border: `2px solid ${error ? colorMap.error.activeColor : disabled ? '#bdbdbd' : '#757575'}`,\n    borderRadius: '3px',\n    backgroundColor: 'transparent',\n    display: 'inline-block',\n    transition: 'background-color 0.2s, border-color 0.2s',\n    margin: 0\n  };\n\n  // Label styles\n  const labelStyle = {\n    marginLeft: labelPlacement === 'start' ? 0 : '8px',\n    marginRight: labelPlacement === 'start' ? '8px' : 0,\n    fontSize: currentSize.fontSize,\n    color: error ? colorMap.error.activeColor : disabled ? '#bdbdbd' : '#212121',\n    cursor: disabled ? 'not-allowed' : 'pointer'\n  };\n\n  // Helper text styles\n  const helperTextStyle = {\n    fontSize: '12px',\n    marginTop: '4px',\n    marginLeft: size === 'small' ? '24px' : size === 'large' ? '32px' : '28px',\n    color: error ? colorMap.error.activeColor : '#757575'\n  };\n\n  // Check mark (SVG) styles\n  const checkMarkSvgStyle = {\n    width: '100%',\n    height: '100%',\n    display: 'block'\n  };\n\n  // Handle changes\n  const handleChange = e => {\n    if (disabled) return;\n    if (onChange) {\n      onChange(e);\n    }\n  };\n\n  // Get unique ID\n  const checkboxId = id || `checkbox-${Math.random().toString(36).substring(2, 9)}`;\n\n  // Determine if checkbox is controlled\n  const isControlled = checked !== undefined;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: `tap-checkbox-wrapper ${className}`,\n    children: [/*#__PURE__*/_jsxs(\"div\", {\n      className: `tap-checkbox tap-checkbox--${size} ${error ? 'tap-checkbox--error' : ''} ${disabled ? 'tap-checkbox--disabled' : ''}`,\n      style: containerStyle,\n      \"data-testid\": \"tap-checkbox\",\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        ref: ref,\n        type: \"checkbox\",\n        id: checkboxId,\n        name: name,\n        checked: isControlled ? checked : undefined,\n        defaultChecked: !isControlled ? defaultChecked : undefined,\n        disabled: disabled,\n        required: required,\n        onChange: handleChange,\n        style: {\n          position: 'absolute',\n          opacity: 0,\n          width: currentSize.width,\n          height: currentSize.height,\n          margin: 0,\n          cursor: disabled ? 'not-allowed' : 'pointer'\n        },\n        \"aria-checked\": indeterminate ? 'mixed' : undefined,\n        \"aria-invalid\": !!error,\n        \"aria-describedby\": helperText || error ? `${checkboxId}-helper-text` : undefined,\n        \"data-indeterminate\": indeterminate,\n        ...rest\n      }), /*#__PURE__*/_jsxs(\"span\", {\n        className: \"tap-checkbox__control\",\n        style: {\n          ...checkboxStyle,\n          backgroundColor: (isControlled ? checked : defaultChecked) ? currentColor.activeColor : 'transparent',\n          borderColor: (isControlled ? checked : defaultChecked) ? currentColor.activeColor : error ? colorMap.error.activeColor : '#757575'\n        },\n        children: [(isControlled ? checked : defaultChecked) && !indeterminate && /*#__PURE__*/_jsx(\"svg\", {\n          style: checkMarkSvgStyle,\n          viewBox: \"0 0 24 24\",\n          \"data-testid\": \"checkbox-checked-icon\",\n          children: /*#__PURE__*/_jsx(\"path\", {\n            d: \"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\",\n            fill: \"white\"\n          })\n        }), indeterminate && /*#__PURE__*/_jsx(\"svg\", {\n          style: checkMarkSvgStyle,\n          viewBox: \"0 0 24 24\",\n          \"data-testid\": \"checkbox-indeterminate-icon\",\n          children: /*#__PURE__*/_jsx(\"path\", {\n            d: \"M19 13H5v-2h14v2z\",\n            fill: \"white\"\n          })\n        })]\n      }), label && /*#__PURE__*/_jsxs(\"label\", {\n        htmlFor: checkboxId,\n        style: labelStyle,\n        className: \"tap-checkbox__label\",\n        children: [label, required && /*#__PURE__*/_jsx(\"span\", {\n          style: {\n            color: colorMap.error.activeColor\n          },\n          children: \" *\"\n        })]\n      })]\n    }), (helperText || error) && /*#__PURE__*/_jsx(\"div\", {\n      id: `${checkboxId}-helper-text`,\n      style: helperTextStyle,\n      className: \"tap-checkbox__helper-text\",\n      children: error || helperText\n    })]\n  });\n});\n\n// Display name for debugging\nCheckbox.displayName = 'Checkbox';\n\n// Prop types\nCheckbox.propTypes = {\n  /** Checkbox element ID */\n  id: PropTypes.string,\n  /** Checkbox element name */\n  name: PropTypes.string,\n  /** Whether checkbox is checked (controlled) */\n  checked: PropTypes.bool,\n  /** Whether checkbox is checked by default (uncontrolled) */\n  defaultChecked: PropTypes.bool,\n  /** Checkbox label */\n  label: PropTypes.string,\n  /** Whether checkbox is disabled */\n  disabled: PropTypes.bool,\n  /** Whether checkbox is required */\n  required: PropTypes.bool,\n  /** Whether checkbox is in indeterminate state */\n  indeterminate: PropTypes.bool,\n  /** Change handler */\n  onChange: PropTypes.func,\n  /** Helper text below checkbox */\n  helperText: PropTypes.string,\n  /** Error message */\n  error: PropTypes.string,\n  /** Checkbox color */\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'error', 'default']),\n  /** Checkbox size */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** Additional CSS class names */\n  className: PropTypes.string,\n  /** Position of the label */\n  labelPlacement: PropTypes.oneOf(['start', 'end'])\n};\nexport default Checkbox;","map":{"version":3,"names":["React","forwardRef","PropTypes","jsx","_jsx","jsxs","_jsxs","Checkbox","id","name","checked","defaultChecked","label","disabled","required","indeterminate","onChange","helperText","error","color","size","className","labelPlacement","rest","ref","sizeMap","small","width","height","fontSize","medium","large","colorMap","primary","activeColor","hoverColor","secondary","success","warning","default","currentColor","currentSize","containerStyle","display","alignItems","position","marginBottom","cursor","opacity","flexDirection","checkboxStyle","border","borderRadius","backgroundColor","transition","margin","labelStyle","marginLeft","marginRight","helperTextStyle","marginTop","checkMarkSvgStyle","handleChange","e","checkboxId","Math","random","toString","substring","isControlled","undefined","children","style","type","borderColor","viewBox","d","fill","htmlFor","displayName","propTypes","string","bool","func","oneOf"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/components/common/Checkbox.jsx"],"sourcesContent":["/**\n * Checkbox\n * \n * A standardized checkbox component with label and various states.\n * \n * @module components/common/Checkbox\n */\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Standardized checkbox component\n * \n * @param {Object} props - Component props\n * @param {string} [props.id] - Checkbox element ID\n * @param {string} [props.name] - Checkbox element name\n * @param {boolean} [props.checked] - Whether checkbox is checked (controlled)\n * @param {boolean} [props.defaultChecked] - Whether checkbox is checked by default (uncontrolled)\n * @param {string} [props.label] - Checkbox label\n * @param {boolean} [props.disabled=false] - Whether checkbox is disabled\n * @param {boolean} [props.required=false] - Whether checkbox is required\n * @param {boolean} [props.indeterminate=false] - Whether checkbox is in indeterminate state\n * @param {Function} [props.onChange] - Change handler\n * @param {string} [props.helperText] - Helper text below checkbox\n * @param {string} [props.error] - Error message\n * @param {string} [props.color='primary'] - Checkbox color\n * @param {string} [props.size='medium'] - Checkbox size\n * @param {string} [props.className] - Additional CSS class names\n * @param {string} [props.labelPlacement='end'] - Position of the label\n * @param {React.Ref} ref - Forwarded ref\n * @returns {JSX.Element} The checkbox component\n */\nconst Checkbox = forwardRef(({\n  id,\n  name,\n  checked,\n  defaultChecked,\n  label,\n  disabled = false,\n  required = false,\n  indeterminate = false,\n  onChange,\n  helperText,\n  error,\n  color = 'primary',\n  size = 'medium',\n  className = '',\n  labelPlacement = 'end',\n  ...rest\n}, ref) => {\n  // Size styles\n  const sizeMap = {\n    small: {\n      width: '16px',\n      height: '16px',\n      fontSize: '14px',\n    },\n    medium: {\n      width: '20px',\n      height: '20px',\n      fontSize: '16px',\n    },\n    large: {\n      width: '24px',\n      height: '24px',\n      fontSize: '18px',\n    },\n  };\n  \n  // Color styles\n  const colorMap = {\n    primary: {\n      activeColor: '#1976d2',\n      hoverColor: 'rgba(25, 118, 210, 0.1)',\n    },\n    secondary: {\n      activeColor: '#9c27b0',\n      hoverColor: 'rgba(156, 39, 176, 0.1)',\n    },\n    success: {\n      activeColor: '#4caf50',\n      hoverColor: 'rgba(76, 175, 80, 0.1)',\n    },\n    warning: {\n      activeColor: '#ff9800',\n      hoverColor: 'rgba(255, 152, 0, 0.1)',\n    },\n    error: {\n      activeColor: '#f44336',\n      hoverColor: 'rgba(244, 67, 54, 0.1)',\n    },\n    default: {\n      activeColor: '#757575',\n      hoverColor: 'rgba(0, 0, 0, 0.04)',\n    },\n  };\n  \n  // Get current color\n  const currentColor = colorMap[color] || colorMap.primary;\n  const currentSize = sizeMap[size] || sizeMap.medium;\n  \n  // Container styles\n  const containerStyle = {\n    display: 'inline-flex',\n    alignItems: 'center',\n    position: 'relative',\n    marginBottom: helperText || error ? '16px' : '8px',\n    cursor: disabled ? 'not-allowed' : 'pointer',\n    opacity: disabled ? 0.7 : 1,\n    flexDirection: labelPlacement === 'start' ? 'row-reverse' : 'row',\n  };\n  \n  // Checkbox styles\n  const checkboxStyle = {\n    position: 'relative',\n    width: currentSize.width,\n    height: currentSize.height,\n    border: `2px solid ${error ? colorMap.error.activeColor : disabled ? '#bdbdbd' : '#757575'}`,\n    borderRadius: '3px',\n    backgroundColor: 'transparent',\n    display: 'inline-block',\n    transition: 'background-color 0.2s, border-color 0.2s',\n    margin: 0,\n  };\n  \n  // Label styles\n  const labelStyle = {\n    marginLeft: labelPlacement === 'start' ? 0 : '8px',\n    marginRight: labelPlacement === 'start' ? '8px' : 0,\n    fontSize: currentSize.fontSize,\n    color: error ? colorMap.error.activeColor : disabled ? '#bdbdbd' : '#212121',\n    cursor: disabled ? 'not-allowed' : 'pointer',\n  };\n  \n  // Helper text styles\n  const helperTextStyle = {\n    fontSize: '12px',\n    marginTop: '4px',\n    marginLeft: size === 'small' ? '24px' : size === 'large' ? '32px' : '28px',\n    color: error ? colorMap.error.activeColor : '#757575',\n  };\n  \n  // Check mark (SVG) styles\n  const checkMarkSvgStyle = {\n    width: '100%',\n    height: '100%',\n    display: 'block',\n  };\n  \n  // Handle changes\n  const handleChange = (e) => {\n    if (disabled) return;\n    \n    if (onChange) {\n      onChange(e);\n    }\n  };\n  \n  // Get unique ID\n  const checkboxId = id || `checkbox-${Math.random().toString(36).substring(2, 9)}`;\n  \n  // Determine if checkbox is controlled\n  const isControlled = checked !== undefined;\n  \n  return (\n    <div className={`tap-checkbox-wrapper ${className}`}>\n      <div \n        className={`tap-checkbox tap-checkbox--${size} ${error ? 'tap-checkbox--error' : ''} ${disabled ? 'tap-checkbox--disabled' : ''}`}\n        style={containerStyle}\n        data-testid=\"tap-checkbox\"\n      >\n        <input\n          ref={ref}\n          type=\"checkbox\"\n          id={checkboxId}\n          name={name}\n          checked={isControlled ? checked : undefined}\n          defaultChecked={!isControlled ? defaultChecked : undefined}\n          disabled={disabled}\n          required={required}\n          onChange={handleChange}\n          style={{ \n            position: 'absolute',\n            opacity: 0,\n            width: currentSize.width,\n            height: currentSize.height,\n            margin: 0,\n            cursor: disabled ? 'not-allowed' : 'pointer',\n          }}\n          aria-checked={indeterminate ? 'mixed' : undefined}\n          aria-invalid={!!error}\n          aria-describedby={helperText || error ? `${checkboxId}-helper-text` : undefined}\n          data-indeterminate={indeterminate}\n          {...rest}\n        />\n        \n        <span \n          className=\"tap-checkbox__control\"\n          style={{\n            ...checkboxStyle,\n            backgroundColor: (isControlled ? checked : defaultChecked) ? currentColor.activeColor : 'transparent',\n            borderColor: (isControlled ? checked : defaultChecked) ? currentColor.activeColor : error ? colorMap.error.activeColor : '#757575',\n          }}\n        >\n          {(isControlled ? checked : defaultChecked) && !indeterminate && (\n            <svg style={checkMarkSvgStyle} viewBox=\"0 0 24 24\" data-testid=\"checkbox-checked-icon\">\n              <path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\" fill=\"white\" />\n            </svg>\n          )}\n          \n          {indeterminate && (\n            <svg style={checkMarkSvgStyle} viewBox=\"0 0 24 24\" data-testid=\"checkbox-indeterminate-icon\">\n              <path d=\"M19 13H5v-2h14v2z\" fill=\"white\" />\n            </svg>\n          )}\n        </span>\n        \n        {label && (\n          <label \n            htmlFor={checkboxId} \n            style={labelStyle}\n            className=\"tap-checkbox__label\"\n          >\n            {label}\n            {required && <span style={{ color: colorMap.error.activeColor }}> *</span>}\n          </label>\n        )}\n      </div>\n      \n      {(helperText || error) && (\n        <div \n          id={`${checkboxId}-helper-text`}\n          style={helperTextStyle}\n          className=\"tap-checkbox__helper-text\"\n        >\n          {error || helperText}\n        </div>\n      )}\n    </div>\n  );\n});\n\n// Display name for debugging\nCheckbox.displayName = 'Checkbox';\n\n// Prop types\nCheckbox.propTypes = {\n  /** Checkbox element ID */\n  id: PropTypes.string,\n  \n  /** Checkbox element name */\n  name: PropTypes.string,\n  \n  /** Whether checkbox is checked (controlled) */\n  checked: PropTypes.bool,\n  \n  /** Whether checkbox is checked by default (uncontrolled) */\n  defaultChecked: PropTypes.bool,\n  \n  /** Checkbox label */\n  label: PropTypes.string,\n  \n  /** Whether checkbox is disabled */\n  disabled: PropTypes.bool,\n  \n  /** Whether checkbox is required */\n  required: PropTypes.bool,\n  \n  /** Whether checkbox is in indeterminate state */\n  indeterminate: PropTypes.bool,\n  \n  /** Change handler */\n  onChange: PropTypes.func,\n  \n  /** Helper text below checkbox */\n  helperText: PropTypes.string,\n  \n  /** Error message */\n  error: PropTypes.string,\n  \n  /** Checkbox color */\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'warning', 'error', 'default']),\n  \n  /** Checkbox size */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  \n  /** Additional CSS class names */\n  className: PropTypes.string,\n  \n  /** Position of the label */\n  labelPlacement: PropTypes.oneOf(['start', 'end']),\n};\n\nexport default Checkbox;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}