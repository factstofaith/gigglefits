{"ast":null,"code":"/**\n * useLocalStorage\n * \n * A hook for persisting and syncing state with localStorage.\n * \n * @module hooks/useLocalStorage\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\n\n/**\n * Custom hook for managing state that persists in localStorage\n * \n * @param {string} key - The localStorage key to use\n * @param {*} initialValue - The initial value to use if no value exists in localStorage\n * @param {Object} [options] - Additional options\n * @param {boolean} [options.sync=true] - Whether to sync state across tabs/windows\n * @param {boolean} [options.serialize=true] - Whether to serialize/deserialize values\n * @param {Function} [options.serializer=JSON.stringify] - Function to serialize values\n * @param {Function} [options.deserializer=JSON.parse] - Function to deserialize values\n * @returns {Array} [storedValue, setValue, removeValue] - Tuple with stored value, setter, and remover\n */\nfunction useLocalStorage(key, initialValue) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    sync = true,\n    serialize = true,\n    serializer = JSON.stringify,\n    deserializer = JSON.parse\n  } = options;\n\n  // Create a ref to track if component is mounted\n  const isMounted = useRef(false);\n\n  // Function to get the initial value from localStorage or use the provided initialValue\n  const getInitialValue = () => {\n    try {\n      const item = window.localStorage.getItem(key);\n\n      // If the key exists in localStorage\n      if (item !== null) {\n        return serialize ? deserializer(item) : item;\n      }\n\n      // Otherwise initialize with the provided value\n      const initialValueToStore = initialValue instanceof Function ? initialValue() : initialValue;\n      if (initialValueToStore !== undefined && serialize) {\n        window.localStorage.setItem(key, serializer(initialValueToStore));\n      } else if (initialValueToStore !== undefined) {\n        window.localStorage.setItem(key, initialValueToStore);\n      }\n      return initialValueToStore;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue instanceof Function ? initialValue() : initialValue;\n    }\n  };\n\n  // State to store the current value\n  const [storedValue, setStoredValue] = useState(getInitialValue);\n\n  // Update localStorage when the value changes\n  const setValue = useCallback(value => {\n    try {\n      // Allow value to be a function\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n\n      // Save state\n      setStoredValue(valueToStore);\n\n      // Save to localStorage\n      if (valueToStore === undefined) {\n        window.localStorage.removeItem(key);\n      } else if (serialize) {\n        window.localStorage.setItem(key, serializer(valueToStore));\n      } else {\n        window.localStorage.setItem(key, valueToStore);\n      }\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  }, [key, serialize, serializer, storedValue]);\n\n  // Function to remove the value from localStorage\n  const removeValue = useCallback(() => {\n    try {\n      // Remove from localStorage\n      window.localStorage.removeItem(key);\n\n      // Reset state to undefined\n      setStoredValue(undefined);\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  }, [key]);\n\n  // Listen for changes to localStorage in other tabs/windows\n  useEffect(() => {\n    isMounted.current = true;\n    const handleStorageChange = event => {\n      if (!isMounted.current || !sync || event.key !== key) return;\n      try {\n        // Get the new value\n        const newValue = event.newValue ? serialize ? deserializer(event.newValue) : event.newValue : undefined;\n\n        // Update state with the new value\n        setStoredValue(newValue);\n      } catch (error) {\n        console.error(`Error syncing localStorage key \"${key}\":`, error);\n      }\n    };\n\n    // Add event listener\n    if (sync) {\n      window.addEventListener('storage', handleStorageChange);\n    }\n\n    // Remove event listener on cleanup\n    return () => {\n      isMounted.current = false;\n      if (sync) {\n        window.removeEventListener('storage', handleStorageChange);\n      }\n    };\n  }, [key, sync, serialize, deserializer]);\n  return [storedValue, setValue, removeValue];\n}\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useCallback","useRef","useLocalStorage","key","initialValue","options","arguments","length","undefined","sync","serialize","serializer","JSON","stringify","deserializer","parse","isMounted","getInitialValue","item","window","localStorage","getItem","initialValueToStore","Function","setItem","error","console","storedValue","setStoredValue","setValue","value","valueToStore","removeItem","removeValue","current","handleStorageChange","event","newValue","addEventListener","removeEventListener"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/hooks/useLocalStorage.js"],"sourcesContent":["/**\n * useLocalStorage\n * \n * A hook for persisting and syncing state with localStorage.\n * \n * @module hooks/useLocalStorage\n */\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\n\n/**\n * Custom hook for managing state that persists in localStorage\n * \n * @param {string} key - The localStorage key to use\n * @param {*} initialValue - The initial value to use if no value exists in localStorage\n * @param {Object} [options] - Additional options\n * @param {boolean} [options.sync=true] - Whether to sync state across tabs/windows\n * @param {boolean} [options.serialize=true] - Whether to serialize/deserialize values\n * @param {Function} [options.serializer=JSON.stringify] - Function to serialize values\n * @param {Function} [options.deserializer=JSON.parse] - Function to deserialize values\n * @returns {Array} [storedValue, setValue, removeValue] - Tuple with stored value, setter, and remover\n */\nfunction useLocalStorage(key, initialValue, options = {}) {\n  const {\n    sync = true,\n    serialize = true,\n    serializer = JSON.stringify,\n    deserializer = JSON.parse,\n  } = options;\n  \n  // Create a ref to track if component is mounted\n  const isMounted = useRef(false);\n  \n  // Function to get the initial value from localStorage or use the provided initialValue\n  const getInitialValue = () => {\n    try {\n      const item = window.localStorage.getItem(key);\n      \n      // If the key exists in localStorage\n      if (item !== null) {\n        return serialize ? deserializer(item) : item;\n      }\n      \n      // Otherwise initialize with the provided value\n      const initialValueToStore = initialValue instanceof Function ? initialValue() : initialValue;\n      if (initialValueToStore !== undefined && serialize) {\n        window.localStorage.setItem(key, serializer(initialValueToStore));\n      } else if (initialValueToStore !== undefined) {\n        window.localStorage.setItem(key, initialValueToStore);\n      }\n      return initialValueToStore;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue instanceof Function ? initialValue() : initialValue;\n    }\n  };\n  \n  // State to store the current value\n  const [storedValue, setStoredValue] = useState(getInitialValue);\n  \n  // Update localStorage when the value changes\n  const setValue = useCallback((value) => {\n    try {\n      // Allow value to be a function\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      \n      // Save state\n      setStoredValue(valueToStore);\n      \n      // Save to localStorage\n      if (valueToStore === undefined) {\n        window.localStorage.removeItem(key);\n      } else if (serialize) {\n        window.localStorage.setItem(key, serializer(valueToStore));\n      } else {\n        window.localStorage.setItem(key, valueToStore);\n      }\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  }, [key, serialize, serializer, storedValue]);\n  \n  // Function to remove the value from localStorage\n  const removeValue = useCallback(() => {\n    try {\n      // Remove from localStorage\n      window.localStorage.removeItem(key);\n      \n      // Reset state to undefined\n      setStoredValue(undefined);\n    } catch (error) {\n      console.error(`Error removing localStorage key \"${key}\":`, error);\n    }\n  }, [key]);\n  \n  // Listen for changes to localStorage in other tabs/windows\n  useEffect(() => {\n    isMounted.current = true;\n    \n    const handleStorageChange = (event) => {\n      if (!isMounted.current || !sync || event.key !== key) return;\n      \n      try {\n        // Get the new value\n        const newValue = event.newValue \n          ? (serialize ? deserializer(event.newValue) : event.newValue) \n          : undefined;\n        \n        // Update state with the new value\n        setStoredValue(newValue);\n      } catch (error) {\n        console.error(`Error syncing localStorage key \"${key}\":`, error);\n      }\n    };\n    \n    // Add event listener\n    if (sync) {\n      window.addEventListener('storage', handleStorageChange);\n    }\n    \n    // Remove event listener on cleanup\n    return () => {\n      isMounted.current = false;\n      if (sync) {\n        window.removeEventListener('storage', handleStorageChange);\n      }\n    };\n  }, [key, sync, serialize, deserializer]);\n  \n  return [storedValue, setValue, removeValue];\n}\n\nexport default useLocalStorage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}