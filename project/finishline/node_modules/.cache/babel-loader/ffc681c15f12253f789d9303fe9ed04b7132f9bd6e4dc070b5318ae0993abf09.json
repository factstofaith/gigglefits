{"ast":null,"code":"/**\n * NotificationContext\n * \n * Context provider for application-wide notifications.\n * \n * @module contexts/NotificationContext\n */\n\nimport React, { createContext, useContext, useState, useCallback, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n// Unique ID generator for notifications\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst generateId = () => `notification-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n// Create the context\nconst NotificationContext = /*#__PURE__*/createContext({\n  notifications: [],\n  addNotification: () => {},\n  removeNotification: () => {},\n  clearAllNotifications: () => {}\n});\n\n/**\n * Notification Provider Component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Child components\n * @param {number} [props.maxNotifications=5] - Maximum number of notifications to show at once\n * @param {number} [props.autoHideDuration=5000] - Default auto-hide duration in milliseconds\n * @returns {JSX.Element} Notification provider\n */\nexport function NotificationProvider(_ref) {\n  let {\n    children,\n    maxNotifications = 5,\n    autoHideDuration = 5000\n  } = _ref;\n  // State for notifications\n  const [notifications, setNotifications] = useState([]);\n\n  // Add a new notification\n  const addNotification = useCallback(notification => {\n    const id = notification.id || generateId();\n    const autoHide = notification.autoHide !== false;\n    const duration = notification.duration || autoHideDuration;\n    setNotifications(prevNotifications => {\n      // Create new notification with defaults\n      const newNotification = {\n        id,\n        message: notification.message || '',\n        type: notification.type || 'info',\n        autoHide,\n        duration,\n        createdAt: Date.now(),\n        ...notification\n      };\n\n      // Add to existing notifications, limiting to maxNotifications\n      return [...prevNotifications, newNotification].slice(-maxNotifications);\n    });\n\n    // Return the notification ID for potential manual removal\n    return id;\n  }, [autoHideDuration, maxNotifications]);\n\n  // Remove a notification by ID\n  const removeNotification = useCallback(id => {\n    setNotifications(prevNotifications => prevNotifications.filter(notification => notification.id !== id));\n  }, []);\n\n  // Clear all notifications\n  const clearAllNotifications = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  // Auto-hide notifications after their duration\n  useEffect(() => {\n    const timers = [];\n    notifications.forEach(notification => {\n      if (notification.autoHide) {\n        const timer = setTimeout(() => {\n          removeNotification(notification.id);\n        }, notification.duration);\n        timers.push(timer);\n      }\n    });\n\n    // Clean up timers on unmount or when notifications change\n    return () => {\n      timers.forEach(timer => clearTimeout(timer));\n    };\n  }, [notifications, removeNotification]);\n\n  // Value object for the context\n  const contextValue = useMemo(() => ({\n    notifications,\n    addNotification,\n    removeNotification,\n    clearAllNotifications\n  }), [notifications, addNotification, removeNotification, clearAllNotifications]);\n  return /*#__PURE__*/_jsx(NotificationContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n\n/**\n * Hook to use notification context\n * \n * @returns {Object} Notification context value\n */\nexport function useNotification() {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n\n  // Helper functions for common notification types\n  const notify = {\n    success: function (message) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return context.addNotification({\n        message,\n        type: 'success',\n        ...options\n      });\n    },\n    error: function (message) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return context.addNotification({\n        message,\n        type: 'error',\n        ...options\n      });\n    },\n    warning: function (message) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return context.addNotification({\n        message,\n        type: 'warning',\n        ...options\n      });\n    },\n    info: function (message) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return context.addNotification({\n        message,\n        type: 'info',\n        ...options\n      });\n    }\n  };\n  return {\n    ...context,\n    notify\n  };\n}\nNotificationProvider.propTypes = {\n  /** Child components */\n  children: PropTypes.node.isRequired,\n  /** Maximum number of notifications to show at once */\n  maxNotifications: PropTypes.number,\n  /** Default auto-hide duration in milliseconds */\n  autoHideDuration: PropTypes.number\n};\nexport default NotificationContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","useMemo","PropTypes","jsx","_jsx","generateId","Date","now","Math","floor","random","NotificationContext","notifications","addNotification","removeNotification","clearAllNotifications","NotificationProvider","_ref","children","maxNotifications","autoHideDuration","setNotifications","notification","id","autoHide","duration","prevNotifications","newNotification","message","type","createdAt","slice","filter","timers","forEach","timer","setTimeout","push","clearTimeout","contextValue","Provider","value","useNotification","context","Error","notify","success","options","arguments","length","undefined","error","warning","info","propTypes","node","isRequired","number"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/contexts/NotificationContext.jsx"],"sourcesContent":["/**\n * NotificationContext\n * \n * Context provider for application-wide notifications.\n * \n * @module contexts/NotificationContext\n */\n\nimport React, { createContext, useContext, useState, useCallback, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n// Unique ID generator for notifications\nconst generateId = () => `notification-${Date.now()}-${Math.floor(Math.random() * 1000)}`;\n\n// Create the context\nconst NotificationContext = createContext({\n  notifications: [],\n  addNotification: () => {},\n  removeNotification: () => {},\n  clearAllNotifications: () => {},\n});\n\n/**\n * Notification Provider Component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Child components\n * @param {number} [props.maxNotifications=5] - Maximum number of notifications to show at once\n * @param {number} [props.autoHideDuration=5000] - Default auto-hide duration in milliseconds\n * @returns {JSX.Element} Notification provider\n */\nexport function NotificationProvider({ \n  children, \n  maxNotifications = 5, \n  autoHideDuration = 5000 \n}) {\n  // State for notifications\n  const [notifications, setNotifications] = useState([]);\n  \n  // Add a new notification\n  const addNotification = useCallback((notification) => {\n    const id = notification.id || generateId();\n    const autoHide = notification.autoHide !== false;\n    const duration = notification.duration || autoHideDuration;\n    \n    setNotifications(prevNotifications => {\n      // Create new notification with defaults\n      const newNotification = {\n        id,\n        message: notification.message || '',\n        type: notification.type || 'info',\n        autoHide,\n        duration,\n        createdAt: Date.now(),\n        ...notification,\n      };\n      \n      // Add to existing notifications, limiting to maxNotifications\n      return [...prevNotifications, newNotification].slice(-maxNotifications);\n    });\n    \n    // Return the notification ID for potential manual removal\n    return id;\n  }, [autoHideDuration, maxNotifications]);\n  \n  // Remove a notification by ID\n  const removeNotification = useCallback((id) => {\n    setNotifications(prevNotifications =>\n      prevNotifications.filter(notification => notification.id !== id)\n    );\n  }, []);\n  \n  // Clear all notifications\n  const clearAllNotifications = useCallback(() => {\n    setNotifications([]);\n  }, []);\n  \n  // Auto-hide notifications after their duration\n  useEffect(() => {\n    const timers = [];\n    \n    notifications.forEach(notification => {\n      if (notification.autoHide) {\n        const timer = setTimeout(() => {\n          removeNotification(notification.id);\n        }, notification.duration);\n        \n        timers.push(timer);\n      }\n    });\n    \n    // Clean up timers on unmount or when notifications change\n    return () => {\n      timers.forEach(timer => clearTimeout(timer));\n    };\n  }, [notifications, removeNotification]);\n  \n  // Value object for the context\n  const contextValue = useMemo(() => ({\n    notifications,\n    addNotification,\n    removeNotification,\n    clearAllNotifications,\n  }), [notifications, addNotification, removeNotification, clearAllNotifications]);\n  \n  return (\n    <NotificationContext.Provider value={contextValue}>\n      {children}\n    </NotificationContext.Provider>\n  );\n}\n\n/**\n * Hook to use notification context\n * \n * @returns {Object} Notification context value\n */\nexport function useNotification() {\n  const context = useContext(NotificationContext);\n  \n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  \n  // Helper functions for common notification types\n  const notify = {\n    success: (message, options = {}) => context.addNotification({ message, type: 'success', ...options }),\n    error: (message, options = {}) => context.addNotification({ message, type: 'error', ...options }),\n    warning: (message, options = {}) => context.addNotification({ message, type: 'warning', ...options }),\n    info: (message, options = {}) => context.addNotification({ message, type: 'info', ...options }),\n  };\n  \n  return {\n    ...context,\n    notify,\n  };\n}\n\nNotificationProvider.propTypes = {\n  /** Child components */\n  children: PropTypes.node.isRequired,\n  \n  /** Maximum number of notifications to show at once */\n  maxNotifications: PropTypes.number,\n  \n  /** Default auto-hide duration in milliseconds */\n  autoHideDuration: PropTypes.number,\n};\n\nexport default NotificationContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}