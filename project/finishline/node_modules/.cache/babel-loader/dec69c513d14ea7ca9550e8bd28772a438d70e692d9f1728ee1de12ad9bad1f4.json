{"ast":null,"code":"/**\n * ConfigContext\n * \n * Context provider for application-wide configuration.\n * \n * @module contexts/ConfigContext\n */\n\nimport React, { createContext, useContext, useState, useCallback, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n// Default configuration values\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultConfig = {\n  apiUrl: '/api',\n  appName: 'TAP Integration Platform',\n  version: '1.0.0',\n  features: {\n    darkMode: true,\n    notifications: true,\n    analytics: false,\n    debugMode: false\n  },\n  preferences: {\n    language: 'en',\n    dateFormat: 'MM/DD/YYYY',\n    timeFormat: '12h'\n  },\n  performance: {\n    pageSize: 25,\n    maxItemsPerPage: 100,\n    cacheTimeout: 5 * 60 * 1000 // 5 minutes\n  },\n  ui: {\n    animationsEnabled: true,\n    denseMode: false,\n    sidebarCollapsed: false\n  }\n};\n\n// Create the context\nconst ConfigContext = /*#__PURE__*/createContext({\n  config: defaultConfig,\n  updateConfig: () => {},\n  resetConfig: () => {},\n  getConfigValue: () => {},\n  setConfigValue: () => {}\n});\n\n/**\n * Config Provider Component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Child components\n * @param {Object} [props.initialConfig={}] - Initial configuration to merge with defaults\n * @param {boolean} [props.persistConfig=true] - Whether to persist configuration in localStorage\n * @param {string} [props.storageKey='tap_app_config'] - Storage key for persisted configuration\n * @returns {JSX.Element} Config provider\n */\nexport function ConfigProvider(_ref) {\n  let {\n    children,\n    initialConfig = {},\n    persistConfig = true,\n    storageKey = 'tap_app_config'\n  } = _ref;\n  // Initialize configuration state\n  const [config, setConfig] = useState(() => {\n    // If persistence is enabled, try to load from localStorage\n    if (persistConfig) {\n      try {\n        const savedConfig = localStorage.getItem(storageKey);\n        if (savedConfig) {\n          return {\n            ...defaultConfig,\n            ...JSON.parse(savedConfig),\n            ...initialConfig\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load config from localStorage:', error);\n      }\n    }\n\n    // Otherwise use default + initial config\n    return {\n      ...defaultConfig,\n      ...initialConfig\n    };\n  });\n\n  // Update configuration when initialConfig changes\n  useEffect(() => {\n    if (Object.keys(initialConfig).length > 0) {\n      setConfig(prevConfig => ({\n        ...prevConfig,\n        ...initialConfig\n      }));\n    }\n  }, [initialConfig]);\n\n  // Persist configuration to localStorage when it changes\n  useEffect(() => {\n    if (persistConfig) {\n      try {\n        localStorage.setItem(storageKey, JSON.stringify(config));\n      } catch (error) {\n        console.error('Failed to save config to localStorage:', error);\n      }\n    }\n  }, [config, persistConfig, storageKey]);\n\n  // Update the entire configuration\n  const updateConfig = useCallback(newConfig => {\n    setConfig(prevConfig => ({\n      ...prevConfig,\n      ...newConfig\n    }));\n  }, []);\n\n  // Reset configuration to defaults\n  const resetConfig = useCallback(() => {\n    setConfig({\n      ...defaultConfig,\n      ...initialConfig\n    });\n  }, [initialConfig]);\n\n  // Get a specific configuration value by path\n  const getConfigValue = useCallback((path, defaultValue) => {\n    if (!path) return config;\n    const pathParts = path.split('.');\n    let value = config;\n    for (let part of pathParts) {\n      if (value === undefined || value === null) {\n        return defaultValue;\n      }\n      value = value[part];\n    }\n    return value !== undefined && value !== null ? value : defaultValue;\n  }, [config]);\n\n  // Set a specific configuration value by path\n  const setConfigValue = useCallback((path, value) => {\n    if (!path) return;\n    const pathParts = path.split('.');\n    setConfig(prevConfig => {\n      // Clone the config to avoid direct mutation\n      const newConfig = JSON.parse(JSON.stringify(prevConfig));\n\n      // Navigate to the target property\n      let current = newConfig;\n      const lastPart = pathParts.pop();\n      for (let part of pathParts) {\n        // Create missing objects along the path\n        if (current[part] === undefined) {\n          current[part] = {};\n        }\n        current = current[part];\n      }\n\n      // Set the value\n      current[lastPart] = value;\n      return newConfig;\n    });\n  }, []);\n\n  // Value object for the context\n  const contextValue = useMemo(() => ({\n    config,\n    updateConfig,\n    resetConfig,\n    getConfigValue,\n    setConfigValue\n  }), [config, updateConfig, resetConfig, getConfigValue, setConfigValue]);\n  return /*#__PURE__*/_jsx(ConfigContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n\n/**\n * Hook to use config context\n * \n * @returns {Object} Config context value\n */\nexport function useConfig() {\n  const context = useContext(ConfigContext);\n  if (!context) {\n    throw new Error('useConfig must be used within a ConfigProvider');\n  }\n  return context;\n}\nConfigProvider.propTypes = {\n  /** Child components */\n  children: PropTypes.node.isRequired,\n  /** Initial configuration to merge with defaults */\n  initialConfig: PropTypes.object,\n  /** Whether to persist configuration in localStorage */\n  persistConfig: PropTypes.bool,\n  /** Storage key for persisted configuration */\n  storageKey: PropTypes.string\n};\nexport default ConfigContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useEffect","useMemo","PropTypes","jsx","_jsx","defaultConfig","apiUrl","appName","version","features","darkMode","notifications","analytics","debugMode","preferences","language","dateFormat","timeFormat","performance","pageSize","maxItemsPerPage","cacheTimeout","ui","animationsEnabled","denseMode","sidebarCollapsed","ConfigContext","config","updateConfig","resetConfig","getConfigValue","setConfigValue","ConfigProvider","_ref","children","initialConfig","persistConfig","storageKey","setConfig","savedConfig","localStorage","getItem","JSON","parse","error","console","Object","keys","length","prevConfig","setItem","stringify","newConfig","path","defaultValue","pathParts","split","value","part","undefined","current","lastPart","pop","contextValue","Provider","useConfig","context","Error","propTypes","node","isRequired","object","bool","string"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/contexts/ConfigContext.jsx"],"sourcesContent":["/**\n * ConfigContext\n * \n * Context provider for application-wide configuration.\n * \n * @module contexts/ConfigContext\n */\n\nimport React, { createContext, useContext, useState, useCallback, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n// Default configuration values\nconst defaultConfig = {\n  apiUrl: '/api',\n  appName: 'TAP Integration Platform',\n  version: '1.0.0',\n  features: {\n    darkMode: true,\n    notifications: true,\n    analytics: false,\n    debugMode: false,\n  },\n  preferences: {\n    language: 'en',\n    dateFormat: 'MM/DD/YYYY',\n    timeFormat: '12h',\n  },\n  performance: {\n    pageSize: 25,\n    maxItemsPerPage: 100,\n    cacheTimeout: 5 * 60 * 1000, // 5 minutes\n  },\n  ui: {\n    animationsEnabled: true,\n    denseMode: false,\n    sidebarCollapsed: false,\n  },\n};\n\n// Create the context\nconst ConfigContext = createContext({\n  config: defaultConfig,\n  updateConfig: () => {},\n  resetConfig: () => {},\n  getConfigValue: () => {},\n  setConfigValue: () => {},\n});\n\n/**\n * Config Provider Component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Child components\n * @param {Object} [props.initialConfig={}] - Initial configuration to merge with defaults\n * @param {boolean} [props.persistConfig=true] - Whether to persist configuration in localStorage\n * @param {string} [props.storageKey='tap_app_config'] - Storage key for persisted configuration\n * @returns {JSX.Element} Config provider\n */\nexport function ConfigProvider({ \n  children, \n  initialConfig = {}, \n  persistConfig = true,\n  storageKey = 'tap_app_config'\n}) {\n  // Initialize configuration state\n  const [config, setConfig] = useState(() => {\n    // If persistence is enabled, try to load from localStorage\n    if (persistConfig) {\n      try {\n        const savedConfig = localStorage.getItem(storageKey);\n        if (savedConfig) {\n          return {\n            ...defaultConfig,\n            ...JSON.parse(savedConfig),\n            ...initialConfig,\n          };\n        }\n      } catch (error) {\n        console.error('Failed to load config from localStorage:', error);\n      }\n    }\n    \n    // Otherwise use default + initial config\n    return {\n      ...defaultConfig,\n      ...initialConfig,\n    };\n  });\n  \n  // Update configuration when initialConfig changes\n  useEffect(() => {\n    if (Object.keys(initialConfig).length > 0) {\n      setConfig(prevConfig => ({\n        ...prevConfig,\n        ...initialConfig,\n      }));\n    }\n  }, [initialConfig]);\n  \n  // Persist configuration to localStorage when it changes\n  useEffect(() => {\n    if (persistConfig) {\n      try {\n        localStorage.setItem(storageKey, JSON.stringify(config));\n      } catch (error) {\n        console.error('Failed to save config to localStorage:', error);\n      }\n    }\n  }, [config, persistConfig, storageKey]);\n  \n  // Update the entire configuration\n  const updateConfig = useCallback((newConfig) => {\n    setConfig(prevConfig => ({\n      ...prevConfig,\n      ...newConfig,\n    }));\n  }, []);\n  \n  // Reset configuration to defaults\n  const resetConfig = useCallback(() => {\n    setConfig({\n      ...defaultConfig,\n      ...initialConfig,\n    });\n  }, [initialConfig]);\n  \n  // Get a specific configuration value by path\n  const getConfigValue = useCallback((path, defaultValue) => {\n    if (!path) return config;\n    \n    const pathParts = path.split('.');\n    let value = config;\n    \n    for (let part of pathParts) {\n      if (value === undefined || value === null) {\n        return defaultValue;\n      }\n      value = value[part];\n    }\n    \n    return value !== undefined && value !== null ? value : defaultValue;\n  }, [config]);\n  \n  // Set a specific configuration value by path\n  const setConfigValue = useCallback((path, value) => {\n    if (!path) return;\n    \n    const pathParts = path.split('.');\n    \n    setConfig(prevConfig => {\n      // Clone the config to avoid direct mutation\n      const newConfig = JSON.parse(JSON.stringify(prevConfig));\n      \n      // Navigate to the target property\n      let current = newConfig;\n      const lastPart = pathParts.pop();\n      \n      for (let part of pathParts) {\n        // Create missing objects along the path\n        if (current[part] === undefined) {\n          current[part] = {};\n        }\n        current = current[part];\n      }\n      \n      // Set the value\n      current[lastPart] = value;\n      \n      return newConfig;\n    });\n  }, []);\n  \n  // Value object for the context\n  const contextValue = useMemo(() => ({\n    config,\n    updateConfig,\n    resetConfig,\n    getConfigValue,\n    setConfigValue,\n  }), [config, updateConfig, resetConfig, getConfigValue, setConfigValue]);\n  \n  return (\n    <ConfigContext.Provider value={contextValue}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n\n/**\n * Hook to use config context\n * \n * @returns {Object} Config context value\n */\nexport function useConfig() {\n  const context = useContext(ConfigContext);\n  \n  if (!context) {\n    throw new Error('useConfig must be used within a ConfigProvider');\n  }\n  \n  return context;\n}\n\nConfigProvider.propTypes = {\n  /** Child components */\n  children: PropTypes.node.isRequired,\n  \n  /** Initial configuration to merge with defaults */\n  initialConfig: PropTypes.object,\n  \n  /** Whether to persist configuration in localStorage */\n  persistConfig: PropTypes.bool,\n  \n  /** Storage key for persisted configuration */\n  storageKey: PropTypes.string,\n};\n\nexport default ConfigContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}