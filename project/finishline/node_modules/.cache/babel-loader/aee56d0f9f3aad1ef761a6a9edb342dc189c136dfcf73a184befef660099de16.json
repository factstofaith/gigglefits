{"ast":null,"code":"/**\n * Tooltip\n * \n * A standardized tooltip component for displaying informational text on hover.\n * \n * @module components/common/Tooltip\n */\n\nimport React, { forwardRef, useState, useRef, useEffect, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\n/**\n * Standardized tooltip component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - The element that triggers the tooltip\n * @param {string|node} props.title - Tooltip content\n * @param {string} [props.placement='top'] - Tooltip placement\n * @param {number} [props.enterDelay=100] - Delay before showing tooltip (ms)\n * @param {number} [props.leaveDelay=0] - Delay before hiding tooltip (ms)\n * @param {string} [props.color='default'] - Tooltip color\n * @param {string} [props.size='medium'] - Tooltip size\n * @param {boolean} [props.arrow=true] - Whether to show an arrow\n * @param {boolean} [props.interactive=false] - Whether tooltip is interactive\n * @param {string} [props.className] - Additional CSS class names\n * @param {React.Ref} ref - Forwarded ref\n * @returns {JSX.Element} The tooltip component\n */\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nconst Tooltip = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    children,\n    title,\n    placement = 'top',\n    enterDelay = 100,\n    leaveDelay = 0,\n    color = 'default',\n    size = 'medium',\n    arrow = true,\n    interactive = false,\n    className = '',\n    ...rest\n  } = _ref;\n  // State for tooltip visibility\n  const [isVisible, setIsVisible] = useState(false);\n  const [tooltipPosition, setTooltipPosition] = useState({\n    top: 0,\n    left: 0\n  });\n\n  // Refs for DOM elements\n  const childRef = useRef(null);\n  const tooltipRef = useRef(null);\n  const enterTimeout = useRef(null);\n  const leaveTimeout = useRef(null);\n\n  // Portal element\n  const tooltipContainer = document.getElementById('tooltip-root') || document.body;\n\n  // Color styles\n  const colorMap = {\n    default: {\n      background: '#616161',\n      color: '#ffffff'\n    },\n    primary: {\n      background: '#1976d2',\n      color: '#ffffff'\n    },\n    secondary: {\n      background: '#9c27b0',\n      color: '#ffffff'\n    },\n    success: {\n      background: '#4caf50',\n      color: '#ffffff'\n    },\n    warning: {\n      background: '#ff9800',\n      color: '#ffffff'\n    },\n    error: {\n      background: '#f44336',\n      color: '#ffffff'\n    },\n    info: {\n      background: '#2196f3',\n      color: '#ffffff'\n    }\n  };\n\n  // Size styles\n  const sizeMap = {\n    small: {\n      fontSize: '0.75rem',\n      padding: '4px 8px'\n    },\n    medium: {\n      fontSize: '0.875rem',\n      padding: '6px 12px'\n    },\n    large: {\n      fontSize: '1rem',\n      padding: '8px 16px'\n    }\n  };\n\n  // Clear timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (enterTimeout.current) clearTimeout(enterTimeout.current);\n      if (leaveTimeout.current) clearTimeout(leaveTimeout.current);\n    };\n  }, []);\n\n  // Update tooltip position when visible or window resizes\n  useEffect(() => {\n    if (isVisible) {\n      updateTooltipPosition();\n      window.addEventListener('resize', updateTooltipPosition);\n      window.addEventListener('scroll', updateTooltipPosition);\n      return () => {\n        window.removeEventListener('resize', updateTooltipPosition);\n        window.removeEventListener('scroll', updateTooltipPosition);\n      };\n    }\n  }, [isVisible]);\n\n  // Handle hover/focus events\n  const handleMouseEnter = e => {\n    if (enterTimeout.current) clearTimeout(enterTimeout.current);\n    if (leaveTimeout.current) clearTimeout(leaveTimeout.current);\n    enterTimeout.current = setTimeout(() => {\n      setIsVisible(true);\n    }, enterDelay);\n\n    // Call child's onMouseEnter if it exists\n    if (children.props.onMouseEnter) {\n      children.props.onMouseEnter(e);\n    }\n  };\n  const handleMouseLeave = e => {\n    if (enterTimeout.current) clearTimeout(enterTimeout.current);\n    if (leaveTimeout.current) clearTimeout(leaveTimeout.current);\n    leaveTimeout.current = setTimeout(() => {\n      setIsVisible(false);\n    }, leaveDelay);\n\n    // Call child's onMouseLeave if it exists\n    if (children.props.onMouseLeave) {\n      children.props.onMouseLeave(e);\n    }\n  };\n  const handleFocus = e => {\n    handleMouseEnter(e);\n\n    // Call child's onFocus if it exists\n    if (children.props.onFocus) {\n      children.props.onFocus(e);\n    }\n  };\n  const handleBlur = e => {\n    handleMouseLeave(e);\n\n    // Call child's onBlur if it exists\n    if (children.props.onBlur) {\n      children.props.onBlur(e);\n    }\n  };\n\n  // Handle tooltip events if interactive\n  const handleTooltipMouseEnter = () => {\n    if (interactive) {\n      if (enterTimeout.current) clearTimeout(enterTimeout.current);\n      if (leaveTimeout.current) clearTimeout(leaveTimeout.current);\n    }\n  };\n  const handleTooltipMouseLeave = () => {\n    if (interactive) {\n      handleMouseLeave({});\n    }\n  };\n\n  // Update tooltip position based on target element and placement\n  const updateTooltipPosition = () => {\n    if (!childRef.current || !tooltipRef.current) return;\n    const targetRect = childRef.current.getBoundingClientRect();\n    const tooltipRect = tooltipRef.current.getBoundingClientRect();\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n\n    // Calculate position based on placement\n    let top = 0;\n    let left = 0;\n    const gap = 8; // Gap between target and tooltip\n\n    switch (placement) {\n      case 'top':\n        top = targetRect.top + scrollTop - tooltipRect.height - gap;\n        left = targetRect.left + scrollLeft + targetRect.width / 2 - tooltipRect.width / 2;\n        break;\n      case 'bottom':\n        top = targetRect.bottom + scrollTop + gap;\n        left = targetRect.left + scrollLeft + targetRect.width / 2 - tooltipRect.width / 2;\n        break;\n      case 'left':\n        top = targetRect.top + scrollTop + targetRect.height / 2 - tooltipRect.height / 2;\n        left = targetRect.left + scrollLeft - tooltipRect.width - gap;\n        break;\n      case 'right':\n        top = targetRect.top + scrollTop + targetRect.height / 2 - tooltipRect.height / 2;\n        left = targetRect.right + scrollLeft + gap;\n        break;\n    }\n\n    // Keep tooltip within viewport\n    const padding = 8;\n    const viewportWidth = document.documentElement.clientWidth;\n    const viewportHeight = document.documentElement.clientHeight;\n    if (left < padding) {\n      left = padding;\n    } else if (left + tooltipRect.width > viewportWidth - padding) {\n      left = viewportWidth - tooltipRect.width - padding;\n    }\n    if (top < padding) {\n      top = padding;\n    } else if (top + tooltipRect.height > viewportHeight - padding) {\n      top = viewportHeight - tooltipRect.height - padding;\n    }\n    setTooltipPosition({\n      top,\n      left\n    });\n  };\n\n  // Get arrow position based on placement\n  const getArrowStyle = () => {\n    const baseStyle = {\n      position: 'absolute',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid'\n    };\n    const colorStyle = colorMap[color] || colorMap.default;\n    switch (placement) {\n      case 'top':\n        return {\n          ...baseStyle,\n          bottom: -8,\n          left: '50%',\n          transform: 'translateX(-50%)',\n          borderWidth: '8px 8px 0 8px',\n          borderColor: `${colorStyle.background} transparent transparent transparent`\n        };\n      case 'bottom':\n        return {\n          ...baseStyle,\n          top: -8,\n          left: '50%',\n          transform: 'translateX(-50%)',\n          borderWidth: '0 8px 8px 8px',\n          borderColor: `transparent transparent ${colorStyle.background} transparent`\n        };\n      case 'left':\n        return {\n          ...baseStyle,\n          right: -8,\n          top: '50%',\n          transform: 'translateY(-50%)',\n          borderWidth: '8px 0 8px 8px',\n          borderColor: `transparent transparent transparent ${colorStyle.background}`\n        };\n      case 'right':\n        return {\n          ...baseStyle,\n          left: -8,\n          top: '50%',\n          transform: 'translateY(-50%)',\n          borderWidth: '8px 8px 8px 0',\n          borderColor: `transparent ${colorStyle.background} transparent transparent`\n        };\n      default:\n        return baseStyle;\n    }\n  };\n\n  // Don't render if no title\n  if (!title) {\n    return children;\n  }\n\n  // Clone child element to add tooltip trigger props\n  const childElement = /*#__PURE__*/cloneElement(children, {\n    ref: node => {\n      childRef.current = node;\n\n      // Handle forwarded ref from child\n      const {\n        ref: childRefProp\n      } = children;\n      if (childRefProp) {\n        if (typeof childRefProp === 'function') {\n          childRefProp(node);\n        } else if (childRefProp.hasOwnProperty('current')) {\n          childRefProp.current = node;\n        }\n      }\n    },\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    'aria-describedby': isVisible ? 'tooltip' : undefined\n  });\n\n  // Tooltip styles\n  const tooltipStyle = {\n    position: 'absolute',\n    zIndex: 1500,\n    top: tooltipPosition.top,\n    left: tooltipPosition.left,\n    maxWidth: 300,\n    wordWrap: 'break-word',\n    borderRadius: 4,\n    transition: 'opacity 0.3s',\n    opacity: isVisible ? 1 : 0,\n    pointerEvents: interactive ? 'auto' : 'none',\n    ...colorMap[color],\n    ...sizeMap[size]\n  };\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [childElement, /*#__PURE__*/createPortal(/*#__PURE__*/_jsxs(\"div\", {\n      ref: node => {\n        tooltipRef.current = node;\n\n        // Forward ref to tooltip element\n        if (ref) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      },\n      role: \"tooltip\",\n      id: \"tooltip\",\n      style: tooltipStyle,\n      className: `tap-tooltip tap-tooltip--${placement} tap-tooltip--${color} tap-tooltip--${size} ${arrow ? 'tap-tooltip--arrow' : ''} ${interactive ? 'tap-tooltip--interactive' : ''} ${className}`,\n      onMouseEnter: handleTooltipMouseEnter,\n      onMouseLeave: handleTooltipMouseLeave,\n      \"data-testid\": \"tap-tooltip\",\n      ...rest,\n      children: [title, arrow && /*#__PURE__*/_jsx(\"span\", {\n        style: getArrowStyle(),\n        className: \"tap-tooltip__arrow\"\n      })]\n    }), tooltipContainer)]\n  });\n});\n\n// Display name for debugging\nTooltip.displayName = 'Tooltip';\n\n// Prop types\nTooltip.propTypes = {\n  /** The element that triggers the tooltip */\n  children: PropTypes.element.isRequired,\n  /** Tooltip content */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  /** Tooltip placement */\n  placement: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n  /** Delay before showing tooltip (ms) */\n  enterDelay: PropTypes.number,\n  /** Delay before hiding tooltip (ms) */\n  leaveDelay: PropTypes.number,\n  /** Tooltip color */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary', 'success', 'warning', 'error', 'info']),\n  /** Tooltip size */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /** Whether to show an arrow */\n  arrow: PropTypes.bool,\n  /** Whether tooltip is interactive */\n  interactive: PropTypes.bool,\n  /** Additional CSS class names */\n  className: PropTypes.string\n};\nexport default Tooltip;","map":{"version":3,"names":["React","forwardRef","useState","useRef","useEffect","cloneElement","PropTypes","createPortal","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Tooltip","_ref","ref","children","title","placement","enterDelay","leaveDelay","color","size","arrow","interactive","className","rest","isVisible","setIsVisible","tooltipPosition","setTooltipPosition","top","left","childRef","tooltipRef","enterTimeout","leaveTimeout","tooltipContainer","document","getElementById","body","colorMap","default","background","primary","secondary","success","warning","error","info","sizeMap","small","fontSize","padding","medium","large","current","clearTimeout","updateTooltipPosition","window","addEventListener","removeEventListener","handleMouseEnter","e","setTimeout","props","onMouseEnter","handleMouseLeave","onMouseLeave","handleFocus","onFocus","handleBlur","onBlur","handleTooltipMouseEnter","handleTooltipMouseLeave","targetRect","getBoundingClientRect","tooltipRect","scrollLeft","pageXOffset","documentElement","scrollTop","pageYOffset","gap","height","width","bottom","right","viewportWidth","clientWidth","viewportHeight","clientHeight","getArrowStyle","baseStyle","position","borderStyle","colorStyle","transform","borderWidth","borderColor","childElement","node","childRefProp","hasOwnProperty","undefined","tooltipStyle","zIndex","maxWidth","wordWrap","borderRadius","transition","opacity","pointerEvents","role","id","style","displayName","propTypes","element","isRequired","oneOfType","string","oneOf","number","bool"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/components/common/Tooltip.jsx"],"sourcesContent":["/**\n * Tooltip\n * \n * A standardized tooltip component for displaying informational text on hover.\n * \n * @module components/common/Tooltip\n */\n\nimport React, { forwardRef, useState, useRef, useEffect, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport { createPortal } from 'react-dom';\n\n/**\n * Standardized tooltip component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - The element that triggers the tooltip\n * @param {string|node} props.title - Tooltip content\n * @param {string} [props.placement='top'] - Tooltip placement\n * @param {number} [props.enterDelay=100] - Delay before showing tooltip (ms)\n * @param {number} [props.leaveDelay=0] - Delay before hiding tooltip (ms)\n * @param {string} [props.color='default'] - Tooltip color\n * @param {string} [props.size='medium'] - Tooltip size\n * @param {boolean} [props.arrow=true] - Whether to show an arrow\n * @param {boolean} [props.interactive=false] - Whether tooltip is interactive\n * @param {string} [props.className] - Additional CSS class names\n * @param {React.Ref} ref - Forwarded ref\n * @returns {JSX.Element} The tooltip component\n */\nconst Tooltip = forwardRef(({\n  children,\n  title,\n  placement = 'top',\n  enterDelay = 100,\n  leaveDelay = 0,\n  color = 'default',\n  size = 'medium',\n  arrow = true,\n  interactive = false,\n  className = '',\n  ...rest\n}, ref) => {\n  // State for tooltip visibility\n  const [isVisible, setIsVisible] = useState(false);\n  const [tooltipPosition, setTooltipPosition] = useState({ top: 0, left: 0 });\n  \n  // Refs for DOM elements\n  const childRef = useRef(null);\n  const tooltipRef = useRef(null);\n  const enterTimeout = useRef(null);\n  const leaveTimeout = useRef(null);\n  \n  // Portal element\n  const tooltipContainer = document.getElementById('tooltip-root') || document.body;\n  \n  // Color styles\n  const colorMap = {\n    default: { background: '#616161', color: '#ffffff' },\n    primary: { background: '#1976d2', color: '#ffffff' },\n    secondary: { background: '#9c27b0', color: '#ffffff' },\n    success: { background: '#4caf50', color: '#ffffff' },\n    warning: { background: '#ff9800', color: '#ffffff' },\n    error: { background: '#f44336', color: '#ffffff' },\n    info: { background: '#2196f3', color: '#ffffff' },\n  };\n  \n  // Size styles\n  const sizeMap = {\n    small: { fontSize: '0.75rem', padding: '4px 8px' },\n    medium: { fontSize: '0.875rem', padding: '6px 12px' },\n    large: { fontSize: '1rem', padding: '8px 16px' },\n  };\n  \n  // Clear timeouts on unmount\n  useEffect(() => {\n    return () => {\n      if (enterTimeout.current) clearTimeout(enterTimeout.current);\n      if (leaveTimeout.current) clearTimeout(leaveTimeout.current);\n    };\n  }, []);\n  \n  // Update tooltip position when visible or window resizes\n  useEffect(() => {\n    if (isVisible) {\n      updateTooltipPosition();\n      window.addEventListener('resize', updateTooltipPosition);\n      window.addEventListener('scroll', updateTooltipPosition);\n      \n      return () => {\n        window.removeEventListener('resize', updateTooltipPosition);\n        window.removeEventListener('scroll', updateTooltipPosition);\n      };\n    }\n  }, [isVisible]);\n  \n  // Handle hover/focus events\n  const handleMouseEnter = (e) => {\n    if (enterTimeout.current) clearTimeout(enterTimeout.current);\n    if (leaveTimeout.current) clearTimeout(leaveTimeout.current);\n    \n    enterTimeout.current = setTimeout(() => {\n      setIsVisible(true);\n    }, enterDelay);\n    \n    // Call child's onMouseEnter if it exists\n    if (children.props.onMouseEnter) {\n      children.props.onMouseEnter(e);\n    }\n  };\n  \n  const handleMouseLeave = (e) => {\n    if (enterTimeout.current) clearTimeout(enterTimeout.current);\n    if (leaveTimeout.current) clearTimeout(leaveTimeout.current);\n    \n    leaveTimeout.current = setTimeout(() => {\n      setIsVisible(false);\n    }, leaveDelay);\n    \n    // Call child's onMouseLeave if it exists\n    if (children.props.onMouseLeave) {\n      children.props.onMouseLeave(e);\n    }\n  };\n  \n  const handleFocus = (e) => {\n    handleMouseEnter(e);\n    \n    // Call child's onFocus if it exists\n    if (children.props.onFocus) {\n      children.props.onFocus(e);\n    }\n  };\n  \n  const handleBlur = (e) => {\n    handleMouseLeave(e);\n    \n    // Call child's onBlur if it exists\n    if (children.props.onBlur) {\n      children.props.onBlur(e);\n    }\n  };\n  \n  // Handle tooltip events if interactive\n  const handleTooltipMouseEnter = () => {\n    if (interactive) {\n      if (enterTimeout.current) clearTimeout(enterTimeout.current);\n      if (leaveTimeout.current) clearTimeout(leaveTimeout.current);\n    }\n  };\n  \n  const handleTooltipMouseLeave = () => {\n    if (interactive) {\n      handleMouseLeave({});\n    }\n  };\n  \n  // Update tooltip position based on target element and placement\n  const updateTooltipPosition = () => {\n    if (!childRef.current || !tooltipRef.current) return;\n    \n    const targetRect = childRef.current.getBoundingClientRect();\n    const tooltipRect = tooltipRef.current.getBoundingClientRect();\n    \n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n    \n    // Calculate position based on placement\n    let top = 0;\n    let left = 0;\n    \n    const gap = 8; // Gap between target and tooltip\n    \n    switch (placement) {\n      case 'top':\n        top = targetRect.top + scrollTop - tooltipRect.height - gap;\n        left = targetRect.left + scrollLeft + (targetRect.width / 2) - (tooltipRect.width / 2);\n        break;\n      case 'bottom':\n        top = targetRect.bottom + scrollTop + gap;\n        left = targetRect.left + scrollLeft + (targetRect.width / 2) - (tooltipRect.width / 2);\n        break;\n      case 'left':\n        top = targetRect.top + scrollTop + (targetRect.height / 2) - (tooltipRect.height / 2);\n        left = targetRect.left + scrollLeft - tooltipRect.width - gap;\n        break;\n      case 'right':\n        top = targetRect.top + scrollTop + (targetRect.height / 2) - (tooltipRect.height / 2);\n        left = targetRect.right + scrollLeft + gap;\n        break;\n    }\n    \n    // Keep tooltip within viewport\n    const padding = 8;\n    const viewportWidth = document.documentElement.clientWidth;\n    const viewportHeight = document.documentElement.clientHeight;\n    \n    if (left < padding) {\n      left = padding;\n    } else if (left + tooltipRect.width > viewportWidth - padding) {\n      left = viewportWidth - tooltipRect.width - padding;\n    }\n    \n    if (top < padding) {\n      top = padding;\n    } else if (top + tooltipRect.height > viewportHeight - padding) {\n      top = viewportHeight - tooltipRect.height - padding;\n    }\n    \n    setTooltipPosition({ top, left });\n  };\n  \n  // Get arrow position based on placement\n  const getArrowStyle = () => {\n    const baseStyle = {\n      position: 'absolute',\n      width: 0,\n      height: 0,\n      borderStyle: 'solid',\n    };\n    \n    const colorStyle = colorMap[color] || colorMap.default;\n    \n    switch (placement) {\n      case 'top':\n        return {\n          ...baseStyle,\n          bottom: -8,\n          left: '50%',\n          transform: 'translateX(-50%)',\n          borderWidth: '8px 8px 0 8px',\n          borderColor: `${colorStyle.background} transparent transparent transparent`,\n        };\n      case 'bottom':\n        return {\n          ...baseStyle,\n          top: -8,\n          left: '50%',\n          transform: 'translateX(-50%)',\n          borderWidth: '0 8px 8px 8px',\n          borderColor: `transparent transparent ${colorStyle.background} transparent`,\n        };\n      case 'left':\n        return {\n          ...baseStyle,\n          right: -8,\n          top: '50%',\n          transform: 'translateY(-50%)',\n          borderWidth: '8px 0 8px 8px',\n          borderColor: `transparent transparent transparent ${colorStyle.background}`,\n        };\n      case 'right':\n        return {\n          ...baseStyle,\n          left: -8,\n          top: '50%',\n          transform: 'translateY(-50%)',\n          borderWidth: '8px 8px 8px 0',\n          borderColor: `transparent ${colorStyle.background} transparent transparent`,\n        };\n      default:\n        return baseStyle;\n    }\n  };\n  \n  // Don't render if no title\n  if (!title) {\n    return children;\n  }\n  \n  // Clone child element to add tooltip trigger props\n  const childElement = cloneElement(children, {\n    ref: (node) => {\n      childRef.current = node;\n      \n      // Handle forwarded ref from child\n      const { ref: childRefProp } = children;\n      if (childRefProp) {\n        if (typeof childRefProp === 'function') {\n          childRefProp(node);\n        } else if (childRefProp.hasOwnProperty('current')) {\n          childRefProp.current = node;\n        }\n      }\n    },\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: handleMouseLeave,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    'aria-describedby': isVisible ? 'tooltip' : undefined,\n  });\n  \n  // Tooltip styles\n  const tooltipStyle = {\n    position: 'absolute',\n    zIndex: 1500,\n    top: tooltipPosition.top,\n    left: tooltipPosition.left,\n    maxWidth: 300,\n    wordWrap: 'break-word',\n    borderRadius: 4,\n    transition: 'opacity 0.3s',\n    opacity: isVisible ? 1 : 0,\n    pointerEvents: interactive ? 'auto' : 'none',\n    ...colorMap[color],\n    ...sizeMap[size],\n  };\n  \n  return (\n    <>\n      {childElement}\n      \n      {createPortal(\n        <div\n          ref={(node) => {\n            tooltipRef.current = node;\n            \n            // Forward ref to tooltip element\n            if (ref) {\n              if (typeof ref === 'function') {\n                ref(node);\n              } else {\n                ref.current = node;\n              }\n            }\n          }}\n          role=\"tooltip\"\n          id=\"tooltip\"\n          style={tooltipStyle}\n          className={`tap-tooltip tap-tooltip--${placement} tap-tooltip--${color} tap-tooltip--${size} ${arrow ? 'tap-tooltip--arrow' : ''} ${interactive ? 'tap-tooltip--interactive' : ''} ${className}`}\n          onMouseEnter={handleTooltipMouseEnter}\n          onMouseLeave={handleTooltipMouseLeave}\n          data-testid=\"tap-tooltip\"\n          {...rest}\n        >\n          {title}\n          {arrow && <span style={getArrowStyle()} className=\"tap-tooltip__arrow\" />}\n        </div>,\n        tooltipContainer\n      )}\n    </>\n  );\n});\n\n// Display name for debugging\nTooltip.displayName = 'Tooltip';\n\n// Prop types\nTooltip.propTypes = {\n  /** The element that triggers the tooltip */\n  children: PropTypes.element.isRequired,\n  \n  /** Tooltip content */\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  \n  /** Tooltip placement */\n  placement: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n  \n  /** Delay before showing tooltip (ms) */\n  enterDelay: PropTypes.number,\n  \n  /** Delay before hiding tooltip (ms) */\n  leaveDelay: PropTypes.number,\n  \n  /** Tooltip color */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary', 'success', 'warning', 'error', 'info']),\n  \n  /** Tooltip size */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  \n  /** Whether to show an arrow */\n  arrow: PropTypes.bool,\n  \n  /** Whether tooltip is interactive */\n  interactive: PropTypes.bool,\n  \n  /** Additional CSS class names */\n  className: PropTypes.string,\n};\n\nexport default Tooltip;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}