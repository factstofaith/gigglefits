{"ast":null,"code":"/**\n * DialogContext\n * \n * Context provider for managing modal dialogs across the application.\n * \n * @module contexts/DialogContext\n */\n\nimport React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n// Create the context\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DialogContext = /*#__PURE__*/createContext({\n  dialogs: {},\n  openDialog: () => {},\n  closeDialog: () => {},\n  updateDialog: () => {}\n});\n\n/**\n * Dialog Provider Component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Child components\n * @returns {JSX.Element} Dialog provider\n */\nexport function DialogProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  // State for tracking open dialogs\n  const [dialogs, setDialogs] = useState({});\n\n  // Open a dialog with given id and props\n  const openDialog = useCallback(function (id) {\n    let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    setDialogs(prevDialogs => ({\n      ...prevDialogs,\n      [id]: {\n        isOpen: true,\n        props\n      }\n    }));\n  }, []);\n\n  // Close a dialog by id\n  const closeDialog = useCallback(id => {\n    setDialogs(prevDialogs => {\n      // If dialog doesn't exist, do nothing\n      if (!prevDialogs[id]) return prevDialogs;\n\n      // Create a shallow copy of the state\n      const newDialogs = {\n        ...prevDialogs\n      };\n\n      // Update the dialog's isOpen state\n      newDialogs[id] = {\n        ...newDialogs[id],\n        isOpen: false\n      };\n      return newDialogs;\n    });\n  }, []);\n\n  // Update dialog props\n  const updateDialog = useCallback((id, newProps) => {\n    setDialogs(prevDialogs => {\n      // If dialog doesn't exist, do nothing\n      if (!prevDialogs[id]) return prevDialogs;\n      return {\n        ...prevDialogs,\n        [id]: {\n          ...prevDialogs[id],\n          props: {\n            ...prevDialogs[id].props,\n            ...newProps\n          }\n        }\n      };\n    });\n  }, []);\n\n  // Value object for the context\n  const contextValue = useMemo(() => ({\n    dialogs,\n    openDialog,\n    closeDialog,\n    updateDialog\n  }), [dialogs, openDialog, closeDialog, updateDialog]);\n  return /*#__PURE__*/_jsx(DialogContext.Provider, {\n    value: contextValue,\n    children: children\n  });\n}\n\n/**\n * Hook to use dialog context\n * \n * @returns {Object} Dialog context value\n */\nexport function useDialog() {\n  const context = useContext(DialogContext);\n  if (!context) {\n    throw new Error('useDialog must be used within a DialogProvider');\n  }\n  return context;\n}\n\n/**\n * Hook to use a specific dialog\n * \n * @param {string} id - ID of the dialog to manage\n * @returns {Object} Methods to control the specific dialog\n */\nexport function useSpecificDialog(id) {\n  const {\n    dialogs,\n    openDialog,\n    closeDialog,\n    updateDialog\n  } = useDialog();\n  const isOpen = useMemo(() => {\n    return dialogs[id]?.isOpen || false;\n  }, [dialogs, id]);\n  const props = useMemo(() => {\n    return dialogs[id]?.props || {};\n  }, [dialogs, id]);\n  const open = useCallback(function () {\n    let dialogProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    openDialog(id, dialogProps);\n  }, [openDialog, id]);\n  const close = useCallback(() => {\n    closeDialog(id);\n  }, [closeDialog, id]);\n  const update = useCallback(newProps => {\n    updateDialog(id, newProps);\n  }, [updateDialog, id]);\n  return {\n    isOpen,\n    props,\n    open,\n    close,\n    update\n  };\n}\nDialogProvider.propTypes = {\n  /** Child components */\n  children: PropTypes.node.isRequired\n};\nexport default DialogContext;","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","PropTypes","jsx","_jsx","DialogContext","dialogs","openDialog","closeDialog","updateDialog","DialogProvider","_ref","children","setDialogs","id","props","arguments","length","undefined","prevDialogs","isOpen","newDialogs","newProps","contextValue","Provider","value","useDialog","context","Error","useSpecificDialog","open","dialogProps","close","update","propTypes","node","isRequired"],"sources":["/home/ai-dev/Desktop/tap-integration-platform/project/finishline/src/contexts/DialogContext.jsx"],"sourcesContent":["/**\n * DialogContext\n * \n * Context provider for managing modal dialogs across the application.\n * \n * @module contexts/DialogContext\n */\n\nimport React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\n// Create the context\nconst DialogContext = createContext({\n  dialogs: {},\n  openDialog: () => {},\n  closeDialog: () => {},\n  updateDialog: () => {},\n});\n\n/**\n * Dialog Provider Component\n * \n * @param {Object} props - Component props\n * @param {node} props.children - Child components\n * @returns {JSX.Element} Dialog provider\n */\nexport function DialogProvider({ children }) {\n  // State for tracking open dialogs\n  const [dialogs, setDialogs] = useState({});\n  \n  // Open a dialog with given id and props\n  const openDialog = useCallback((id, props = {}) => {\n    setDialogs(prevDialogs => ({\n      ...prevDialogs,\n      [id]: {\n        isOpen: true,\n        props,\n      },\n    }));\n  }, []);\n  \n  // Close a dialog by id\n  const closeDialog = useCallback((id) => {\n    setDialogs(prevDialogs => {\n      // If dialog doesn't exist, do nothing\n      if (!prevDialogs[id]) return prevDialogs;\n      \n      // Create a shallow copy of the state\n      const newDialogs = { ...prevDialogs };\n      \n      // Update the dialog's isOpen state\n      newDialogs[id] = {\n        ...newDialogs[id],\n        isOpen: false,\n      };\n      \n      return newDialogs;\n    });\n  }, []);\n  \n  // Update dialog props\n  const updateDialog = useCallback((id, newProps) => {\n    setDialogs(prevDialogs => {\n      // If dialog doesn't exist, do nothing\n      if (!prevDialogs[id]) return prevDialogs;\n      \n      return {\n        ...prevDialogs,\n        [id]: {\n          ...prevDialogs[id],\n          props: {\n            ...prevDialogs[id].props,\n            ...newProps,\n          },\n        },\n      };\n    });\n  }, []);\n  \n  // Value object for the context\n  const contextValue = useMemo(() => ({\n    dialogs,\n    openDialog,\n    closeDialog,\n    updateDialog,\n  }), [dialogs, openDialog, closeDialog, updateDialog]);\n  \n  return (\n    <DialogContext.Provider value={contextValue}>\n      {children}\n    </DialogContext.Provider>\n  );\n}\n\n/**\n * Hook to use dialog context\n * \n * @returns {Object} Dialog context value\n */\nexport function useDialog() {\n  const context = useContext(DialogContext);\n  \n  if (!context) {\n    throw new Error('useDialog must be used within a DialogProvider');\n  }\n  \n  return context;\n}\n\n/**\n * Hook to use a specific dialog\n * \n * @param {string} id - ID of the dialog to manage\n * @returns {Object} Methods to control the specific dialog\n */\nexport function useSpecificDialog(id) {\n  const { dialogs, openDialog, closeDialog, updateDialog } = useDialog();\n  \n  const isOpen = useMemo(() => {\n    return dialogs[id]?.isOpen || false;\n  }, [dialogs, id]);\n  \n  const props = useMemo(() => {\n    return dialogs[id]?.props || {};\n  }, [dialogs, id]);\n  \n  const open = useCallback((dialogProps = {}) => {\n    openDialog(id, dialogProps);\n  }, [openDialog, id]);\n  \n  const close = useCallback(() => {\n    closeDialog(id);\n  }, [closeDialog, id]);\n  \n  const update = useCallback((newProps) => {\n    updateDialog(id, newProps);\n  }, [updateDialog, id]);\n  \n  return {\n    isOpen,\n    props,\n    open,\n    close,\n    update,\n  };\n}\n\nDialogProvider.propTypes = {\n  /** Child components */\n  children: PropTypes.node.isRequired,\n};\n\nexport default DialogContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}