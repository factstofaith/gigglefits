import { matcherHint } from 'jest-matcher-utils';

const isNotMounted = () => ({
    pass: false,
    message: () => 'Specified component could not be found. It is possible to be not mounted or to be a typo.',
});

function toBeUpdatedWithin(received, expected) {
    if (!received) {
        return isNotMounted();
    }
    if (!received.updates) {
        return {
            pass: false,
            message: () => 'You need to pass Component property like `expect(renderTime.current.Component).toBeUpdatedWithin(...)`',
        };
    }
    const { updates } = received;
    const formattedExpected = Array.isArray(expected)
        ? expected
        : Array(updates.length).fill(expected);
    const pass = updates.every((num, i) => num < formattedExpected[i]);
    const message = () => {
        return [
            matcherHint('toBeUpdatedWithin', undefined, undefined, {
                isNot: this.isNot,
            }),
            `Expected: [${formattedExpected.join(', ')}]`,
            `Received: [${updates.join(', ')}]`,
        ].join('\n');
    };
    return { pass, message };
}

function toBeMounted(received) {
    if (!received) {
        return isNotMounted();
    }
    return {
        pass: true,
        message: () => 'Specified component could be found.',
    };
}

function toBeMountedWithin(received, expected) {
    if (!received) {
        return isNotMounted();
    }
    const pass = received.mount < expected;
    const message = () => {
        return [
            matcherHint('toBeMountedWithin', undefined, undefined, {
                isNot: this.isNot,
            }),
            `Expected: ${expected}`,
            `Received: ${received.mount}`,
        ].join('\n');
    };
    return {
        pass,
        message,
    };
}

function toBeRenderedTimes(received, expected) {
    if (!received) {
        return isNotMounted();
    }
    const pass = received.value === expected;
    const message = () => {
        return [
            matcherHint('toBeRenderedTimes', undefined, undefined, {
                isNot: this.isNot,
            }),
            `Expected: ${expected}`,
            `Received: ${received.value}`,
        ].join('\n');
    };
    return {
        pass,
        message,
    };
}

var extensions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  toBeUpdatedWithin: toBeUpdatedWithin,
  toBeMounted: toBeMounted,
  toBeMountedWithin: toBeMountedWithin,
  toBeRenderedTimes: toBeRenderedTimes
});

expect.extend(extensions);
