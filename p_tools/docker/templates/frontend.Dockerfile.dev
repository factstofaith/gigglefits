FROM node:18-alpine

WORKDIR /app

# Install development dependencies
RUN apk add --no-cache wget curl bash

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies properly with clean install for consistent builds
ARG NPM_INSTALL_FLAGS=""
RUN npm ci ${NPM_INSTALL_FLAGS}

# Install webpack and webpack-dev-server globally
RUN npm install -g webpack webpack-cli webpack-dev-server

# Install dev server dependencies
RUN npm install --save-dev webpack webpack-cli webpack-dev-server babel-loader @babel/core @babel/preset-env @babel/preset-react html-webpack-plugin style-loader css-loader mini-css-extract-plugin css-minimizer-webpack-plugin terser-webpack-plugin

# Application code will be mounted as a volume
# This prevents having to rebuild the image when code changes

# Create dev server startup script that uses the project's webpack configuration
RUN echo '#!/usr/bin/env node

/**
 * Development server for TAP Integration Platform frontend
 * 
 * This script starts the webpack dev server with the appropriate configuration.
 */

const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const path = require("path");
const fs = require("fs");

// Use project webpack config if available, otherwise use default config
let config;
try {
  if (fs.existsSync("./config/webpack.dev.js")) {
    console.log("Using project webpack.dev.js configuration");
    config = require("./config/webpack.dev.js");
  } else if (fs.existsSync("./config/webpack.config.js")) {
    console.log("Using project webpack.config.js configuration");
    config = require("./config/webpack.config.js");
  } else {
    throw new Error("No webpack configuration found");
  }
} catch (error) {
  console.warn(`Warning: ${error.message}. Using default webpack configuration.`);
  
  // Default configuration if project config is not available
  config = {
    mode: "development",
    entry: "./src/index.js",
    output: {
      path: path.resolve(__dirname, "./build"),
      filename: "bundle.js",
      publicPath: "/"
    },
    module: {
      rules: [
        {
          test: /\\.(js|jsx)$/,
          exclude: /node_modules/,
          use: {
            loader: "babel-loader",
            options: {
              presets: ["@babel/preset-env", "@babel/preset-react"]
            }
          }
        },
        {
          test: /\\.css$/,
          use: ["style-loader", "css-loader"]
        },
        {
          test: /\\.(png|svg|jpg|jpeg|gif)$/i,
          type: "asset/resource"
        }
      ]
    },
    resolve: {
      extensions: [".js", ".jsx"]
    },
    plugins: [
      new webpack.HotModuleReplacementPlugin()
    ],
    devServer: {
      static: {
        directory: path.join(__dirname, "./public"),
      },
      hot: true,
      port: 3000,
      host: "0.0.0.0",
      historyApiFallback: true,
      allowedHosts: "all",
      headers: {
        "Access-Control-Allow-Origin": "*"
      }
    }
  };
}

console.log("Starting webpack dev server...");

// Check if the webpack-dev-server version supports the new API
const webpackDevServerMajorVersion = parseInt(require("webpack-dev-server/package.json").version.split(".")[0], 10);

if (webpackDevServerMajorVersion >= 4) {
  // Webpack Dev Server v4+ API
  const server = new WebpackDevServer(config.devServer, webpack(config));
  server.start().catch(err => {
    console.error(err);
    process.exit(1);
  });
} else {
  // Legacy Webpack Dev Server API
  const compiler = webpack(config);
  const server = new WebpackDevServer(compiler, config.devServer);
  server.listen(config.devServer.port, config.devServer.host, (err) => {
    if (err) {
      console.error(err);
      process.exit(1);
    }
  });
}' > /app/dev-server.js && chmod +x /app/dev-server.js

# Create proper webpack configuration directory structure if it doesn't exist
RUN mkdir -p /app/config

# Create development webpack configuration
RUN echo 'const path = require("path");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  mode: "development",
  entry: "./src/index.js",
  output: {
    path: path.resolve(__dirname, "../build"),
    filename: "bundle.js",
    publicPath: "/"
  },
  devtool: "inline-source-map",
  module: {
    rules: [
      {
        test: /\\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ["@babel/preset-env", "@babel/preset-react"]
          }
        }
      },
      {
        test: /\\.css$/,
        use: ["style-loader", "css-loader"]
      },
      {
        test: /\\.(png|svg|jpg|jpeg|gif)$/i,
        type: "asset/resource",
      }
    ]
  },
  resolve: {
    extensions: [".js", ".jsx"],
    alias: {
      "@": path.resolve(__dirname, "../src")
    }
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./public/index.html",
      filename: "index.html"
    }),
    new webpack.DefinePlugin({
      "process.env": {
        NODE_ENV: JSON.stringify("development"),
        REACT_APP_API_URL: JSON.stringify(process.env.REACT_APP_API_URL || "http://localhost:8000")
      }
    }),
    new webpack.HotModuleReplacementPlugin()
  ],
  devServer: {
    static: {
      directory: path.join(__dirname, "../public"),
    },
    historyApiFallback: true,
    hot: true,
    port: 3000,
    host: "0.0.0.0",
    allowedHosts: "all",
    headers: {
      "Access-Control-Allow-Origin": "*"
    }
  }
};' > /app/config/webpack.dev.js

# Create production webpack configuration
RUN echo 'const path = require("path");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const TerserPlugin = require("terser-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");

module.exports = {
  mode: "production",
  entry: "./src/index.js",
  output: {
    path: path.resolve(__dirname, "../build"),
    filename: "static/js/[name].[contenthash:8].js",
    chunkFilename: "static/js/[name].[contenthash:8].chunk.js",
    publicPath: "/",
    clean: true
  },
  module: {
    rules: [
      {
        test: /\\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ["@babel/preset-env", "@babel/preset-react"]
          }
        }
      },
      {
        test: /\\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          "css-loader"
        ]
      },
      {
        test: /\\.(png|svg|jpg|jpeg|gif)$/i,
        type: "asset/resource",
        generator: {
          filename: "static/media/[name].[hash:8][ext]"
        }
      }
    ]
  },
  resolve: {
    extensions: [".js", ".jsx"],
    alias: {
      "@": path.resolve(__dirname, "../src")
    }
  },
  optimization: {
    minimize: true,
    minimizer: [
      new TerserPlugin({
        terserOptions: {
          compress: {
            ecma: 5,
            warnings: false,
            comparisons: false,
            inline: 2,
            drop_console: true
          },
          mangle: {
            safari10: true,
          },
          output: {
            ecma: 5,
            comments: false,
            ascii_only: true,
          },
        },
        parallel: true,
        extractComments: false,
      }),
      new CssMinimizerPlugin()
    ],
    splitChunks: {
      chunks: "all",
      name: false
    }
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: "./public/index.html",
      filename: "index.html",
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true
      }
    }),
    new MiniCssExtractPlugin({
      filename: "static/css/[name].[contenthash:8].css",
      chunkFilename: "static/css/[name].[contenthash:8].chunk.css"
    }),
    new webpack.DefinePlugin({
      "process.env": {
        NODE_ENV: JSON.stringify("production"),
        REACT_APP_API_URL: JSON.stringify(process.env.REACT_APP_API_URL || "http://localhost:8000")
      }
    })
  ]
};' > /app/config/webpack.prod.js

# Create webpack.config.js that selects the right configuration based on NODE_ENV
RUN echo 'const path = require("path");
const env = process.env.NODE_ENV || "development";

module.exports = require(`./webpack.${env}.js`);' > /app/config/webpack.config.js

# Create directory for public files if it doesn't exist
RUN mkdir -p /app/public

# Create proper standardized index.html template for React
RUN echo '<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#000000">
  <meta name="description" content="TAP Integration Platform - Enterprise-ready integration workflows">
  <title>TAP Integration Platform</title>
  <script>
    // Environment variable injection point for runtime configuration
    window.env = {
      REACT_APP_VERSION: "1.0.0",
      REACT_APP_API_URL: "http://localhost:8000",
      REACT_APP_ENVIRONMENT: "development",
      REACT_APP_MOCK_API: "false",
      REACT_APP_AUTH_ENABLED: "true"
    };
  </script>
</head>
<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <div id="modal-root"></div>
</body>
</html>' > /app/public/index.html

# Expose webpack dev server port
EXPOSE 3000

# Create directories needed for webpack
RUN mkdir -p /app/src /app/build

# Add a health check script for container orchestration
RUN echo '#!/bin/sh
wget -q --spider http://localhost:3000 || exit 1
' > /app/healthcheck.sh && chmod +x /app/healthcheck.sh

# Add Docker HEALTHCHECK instruction
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 CMD ["/app/healthcheck.sh"]

# Start webpack dev server
CMD ["node", "dev-server.js"]