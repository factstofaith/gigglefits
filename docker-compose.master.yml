# Standardized Docker Compose for TAP Integration Platform
# Simplified and unified for development environment
# Modern Docker Compose format (no version attribute needed)

services:
  # Frontend service
  tap-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.master
      args:
        - NPM_INSTALL_FLAGS=--legacy-peer-deps
    image: tap-frontend:local-dev
    container_name: tap-frontend-dev
    ports:
      - "3456:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/config:/app/config
      # Additional files that should be mounted
      - ./frontend/package.master.json:/app/package.json
      - ./frontend/package-lock.json:/app/package-lock.json
      - ./frontend/docker:/app/docker
      # Mount master environment configuration
      - ./frontend/.env.master:/app/.env.master
      # Named volume for node_modules to prevent overwriting
      - frontend_node_modules:/app/node_modules
    environment:
      # Service identification - environment variables loaded from .env.master
      - ENV_MASTER_FILE=/app/.env.master
      - RUNTIME_ENV_FILE=/app/public/runtime-env.js
      - USE_MASTER_ENV=true
      - SERVICE_USE_MASTER_CONFIG=true
      # Hot reload configuration
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3456
      - FRONTEND_PORT=3456
      - SERVICE_HOT_RELOAD=true
      - SERVICE_HOT_RELOAD_HOST=localhost
      - SERVICE_HOT_RELOAD_PORT=3456
      # DNS resolution fix - explicitly set backend hostname
      - TAP_BACKEND_HOST=tap-backend
      - TAP_BACKEND_PORT=8000
      - TAP_BACKEND_URL=http://tap-backend:8000
      - SERVICE_API_URL=http://tap-backend:8000
      - REACT_APP_API_URL=http://tap-backend:8000
      # Authentication configuration
      - SERVICE_AUTH_COOKIES_ENABLED=true
      - SERVICE_AUTH_COOKIES_SECURE=false
      - SERVICE_AUTH_COOKIES_SAMESITE=lax
      - SERVICE_AUTH_COOKIES_HTTP_ONLY=true
      - SERVICE_AUTH_URL=http://tap-backend:8000/api/v1/auth
      - REACT_APP_AUTH_URL=http://tap-backend:8000/api/v1/auth
    depends_on:
      tap-backend:
        condition: service_healthy
    # Use Docker DNS for inter-container communication (more reliable than fixed IPs)
    # This also enables Docker's built-in DNS resolution
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - tap-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 500M
    entrypoint: ["/bin/sh", "-c", "cp -f /app/docker/healthcheck.master.sh /app/healthcheck.sh && chmod +x /app/healthcheck.sh && cp -f /app/docker/generate-runtime-env.master.sh /app/generate-runtime-env.sh && chmod +x /app/generate-runtime-env.sh && cp -f /app/docker/inject-env.master.sh /app/inject-env.sh && chmod +x /app/inject-env.sh && cp -f /app/docker/webpack.master.js /app/webpack.config.js && cp -f /app/docker/dev-server.js /app/dev-server.js && chmod +x /app/dev-server.js && /app/docker-entrypoint.sh"]

  # Backend service
  tap-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.master
      args:
        - EXTRA_PACKAGES=pydantic-settings psutil httpx
    image: tap-backend:local-dev
    container_name: tap-backend-dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_data:/app/data
    environment:
      # Service identification
      - SERVICE_NAME=backend
      - SERVICE_ENV=development
      - SERVICE_VERSION=1.0.0
      
      # Python configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Legacy environment variables for backward compatibility
      - DEBUG=true
      - DEBUG_MODE=true
      - LOG_LEVEL=debug
      - ENVIRONMENT=development
      - APP_ENVIRONMENT=development
      - DB_SSL_REQUIRED=false
      - RUNNING_IN_DOCKER=true
      
      # Application configuration
      - SERVICE_CORS_ORIGINS=["http://localhost:3456","http://tap-frontend:3000","http://localhost:3000"]
      - SERVICE_CORS_ALLOW_CREDENTIALS=true
      - SERVICE_CORS_ALLOW_METHODS=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"]
      - SERVICE_CORS_ALLOW_HEADERS=["Content-Type", "Authorization", "X-Requested-With"]
      - SERVICE_DATABASE_URL=sqlite:///data/local_dev.sqlite
      - SERVICE_SECRET_KEY=local_development_secret_change_in_production
      - SERVICE_LOG_LEVEL=debug
      - SERVICE_DEBUG=true
      
      # Feature flags
      - SERVICE_ENABLE_INVITATIONS=false
      - SERVICE_ENABLE_MFA=false
      
      # Database configuration
      - SERVICE_DB_SSL_REQUIRED=false
      - SERVICE_DB_AUTOMIGRATE=true
      - SERVICE_DB_AUTOSEED=true
      
      # Authentication settings
      - SERVICE_AUTH_TOKEN_EXPIRY=86400
      - SERVICE_AUTH_REFRESH_TOKEN_EXPIRY=604800
      - SERVICE_AUTH_COOKIE_DOMAIN=localhost
      - SERVICE_AUTH_COOKIE_PATH=/
      - SERVICE_AUTH_COOKIE_SECURE=false
      - SERVICE_AUTH_COOKIE_HTTPONLY=true
      - SERVICE_AUTH_COOKIE_SAMESITE=lax
      
      # Performance tuning
      - SERVICE_WORKERS=1
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - tap-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    entrypoint: ["/bin/sh", "-c", "cp -f /app/entrypoint.master.sh /app/entrypoint.sh && chmod +x /app/entrypoint.sh && cp -f /app/healthcheck.master.sh /app/healthcheck.sh && chmod +x /app/healthcheck.sh && /app/entrypoint.sh"]

# Network configuration
networks:
  tap-network:
    name: tap-network-dev
    driver: bridge
    # Explicitly set DNS configuration for more reliable container name resolution
    ipam:
      config:
        - subnet: 172.22.0.0/16
    # Network configuration to ensure reliable name resolution
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"

# Volume configuration
volumes:
  frontend_node_modules:
    name: tap-frontend-node-modules-dev
  backend_data:
    name: tap-backend-data-dev