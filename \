# Role-Based Access Control for Node Types

This document outlines the design for implementing a comprehensive role-based access control (RBAC) system for node types in the TAP Integration Platform, enabling fine-grained permission management for different user roles.

## Architecture Overview

The RBAC system follows a hierarchical approach with roles, permissions, and capabilities:

```
┌───────────────────────────────────────────────────────────┐
│                    RBAC System                            │
├───────────────────────────────────────────────────────────┤
│                    Access Control Manager                 │
├─────────────┬──────────────┬───────────────┬──────────────┤
│ Role        │ Permission   │ Capability    │ Policy       │
│ Registry    │ Registry     │ Registry      │ Enforcement  │
└─────────────┴──────────────┴───────────────┴──────────────┘
         ▲              ▲              ▲             ▲
         │              │              │             │
┌────────┴──────────────┴──────────────┴─────────────┴─────┐
│                   Integration Platform                    │
├─────────────┬──────────────┬───────────────┬─────────────┤
│ Users &     │ Node         │ Integration   │ Application │
│ Tenants     │ Registry     │ Execution     │ Management  │
└─────────────┴──────────────┴───────────────┴─────────────┘
```

## Core Concepts

### 1. Roles

Roles define what a user can do in the system and are organized hierarchically:

#### System-level Roles

- **Super Admin**: Full system access
- **Admin**: Tenant-wide administration
- **Power User**: Advanced features and management
- **Standard User**: Basic integration features
- **Read-only User**: View-only access

#### Custom Roles

- **Integration Developer**: Create and modify integrations
- **Integration Operator**: Monitor and troubleshoot integrations
- **Data Administrator**: Manage datasets and data connections
- **Application Publisher**: Create and publish applications
- **Security Auditor**: Monitor security and access

### 2. Permissions

Permissions are specific actions users can perform:

- **Node Type Permissions**
  - `node:use:<node_type_id>`: Use a specific node type
  - `node:create:<node_type_id>`: Create a node of a specific type
  - `node:edit:<node_type_id>`: Modify a node's configuration
  - `node:view:<node_type_id>`: View a node's configuration
  - `node:delete:<node_type_id>`: Delete a node
  - `node:execute:<node_type_id>`: Execute/run a node

- **Integration Permissions**
  - `integration:create`: Create integrations
  - `integration:edit`: Modify integrations
  - `integration:delete`: Delete integrations
  - `integration:execute`: Run integrations
  - `integration:schedule`: Schedule integrations
  - `integration:view`: View integrations
  - `integration:share`: Share integrations

- **Administrative Permissions**
  - `admin:user`: Manage users
  - `admin:role`: Manage roles
  - `admin:tenant`: Manage tenants
  - `admin:application`: Manage applications
  - `admin:system`: Manage system settings

### 3. Permission Policies

Policies define rules for granting or denying permissions:

- **Allow Policies**: Explicitly grant permissions
- **Deny Policies**: Explicitly deny permissions (override allows)
- **Conditional Policies**: Apply rules based on conditions
- **Resource-Scoped Policies**: Apply to specific resources

### 4. Node Categories

Node types are organized into categories with different access control requirements:

- **Infrastructure Nodes**: System-level integration components
- **Data Source Nodes**: Connections to external data sources
- **Transformation Nodes**: Data manipulation components
- **Destination Nodes**: Output targets for data
- **Processing Nodes**: Flow control and business logic
- **Custom Nodes**: User-defined components

## Implementation Details

### Data Models

#### Role Model

```python
from enum import Enum
from typing import List, Dict, Optional, Set, Any
from pydantic import BaseModel, Field, validator
from datetime import datetime

class SystemRoleType(str, Enum):
    """Built-in system roles"""
    SUPER_ADMIN = "super_admin"
    ADMIN = "admin"
    POWER_USER = "power_user"
    STANDARD_USER = "standard_user"
    READ_ONLY = "read_only"
    
class RoleScope(str, Enum):
    """Scope of a role"""
    SYSTEM = "system"        # System-wide
    TENANT = "tenant"        # Tenant-specific
    GROUP = "group"          # User group specific

class Role(BaseModel):
    """Role definition"""
    id: str = Field(
        ..., 
        description="Unique identifier for the role",
        example="role_f83c724a-8b34-4f35-b531-58434fa6a569"
    )
    name: str = Field(
        ..., 
        description="Human-readable name",
        example="Integration Developer"
    )
    description: str = Field(
        ..., 
        description="Detailed description of the role",
        example="Can create and modify integrations but cannot publish applications"
    )
    system_role_type: Optional[SystemRoleType] = Field(
        None, 
        description="Built-in system role type, if applicable",
        example=SystemRoleType.POWER_USER
    )
    scope: RoleScope = Field(
        RoleScope.TENANT, 
        description="Scope of the role",
        example=RoleScope.TENANT
    )
    tenant_id: Optional[str] = Field(
        None, 
        description="Tenant ID, required for tenant-scoped roles",
        example="tenant-123456"
    )
    group_id: Optional[str] = Field(
        None, 
        description="Group ID, required for group-scoped roles",
        example="group-789012"
    )
    permissions: List[str] = Field(
        default_factory=list, 
        description="List of permission strings assigned to this role",
        example=["node:use:*", "integration:create", "integration:edit"]
    )
    is_custom: bool = Field(
        False, 
        description="Whether this is a custom role",
        example=True
    )
    created_at: datetime = Field(
        ..., 
        description="When the role was created",
        example="2025-03-15T10:30:00Z"
    )
    updated_at: datetime = Field(
        ..., 
        description="When the role was last updated",
        example="2025-03-30T14:45:00Z"
    )
    created_by: Optional[str] = Field(
        None, 
        description="ID of the user who created this role",
        example="user-uuid-12345"
    )
    
    @validator('tenant_id')
    def validate_tenant_id(cls, v, values):
        """Validate tenant_id is present for tenant-scoped roles"""
        if values.get('scope') == RoleScope.TENANT and not v:
            raise ValueError("tenant_id is required for tenant-scoped roles")
        return v
    
    @validator('group_id')
    def validate_group_id(cls, v, values):
        """Validate group_id is present for group-scoped roles"""
        if values.get('scope') == RoleScope.GROUP and not v:
            raise ValueError("group_id is required for group-scoped roles")
        return v
```

#### Permission Model

```python
class PermissionType(str, Enum):
    """Types of permissions"""
    NODE = "node"
    INTEGRATION = "integration"
    ADMIN = "admin"
    DATA = "data"
    APPLICATION = "application"
    USER = "user"
    SYSTEM = "system"

class PermissionActionType(str, Enum):
    """Actions permitted by permissions"""
    CREATE = "create"
    READ = "read"
    USE = "use"
    EDIT = "edit"
    DELETE = "delete"
    EXECUTE = "execute"
    SHARE = "share"
    MANAGE = "manage"
    VIEW = "view"
    PUBLISH = "publish"
    SCHEDULE = "schedule"

class Permission(BaseModel):
    """Permission definition"""
    id: str = Field(
        ..., 
        description="Unique identifier for the permission",
        example="perm_d3c5a1b2-7e9f-4f8d-9e1c-2f3a4b5c6d7e"
    )
    name: str = Field(
        ..., 
        description="Human-readable name",
        example="Use JSON Transform Node"
    )
    description: str = Field(
        ..., 
        description="Detailed description of the permission",
        example="Allows using the JSON Transform node in integrations"
    )
    type: PermissionType = Field(
        ..., 
        description="Permission type",
        example=PermissionType.NODE
    )
    action: PermissionActionType = Field(
        ..., 
        description="Action allowed by this permission",
        example=PermissionActionType.USE
    )
    resource: str = Field(
        ..., 
        description="Resource identifier this permission applies to",
        example="json_transform"
    )
    permission_string: str = Field(
        ..., 
        description="String representation of the permission",
        example="node:use:json_transform"
    )
    created_at: datetime = Field(
        ..., 
        description="When the permission was created",
        example="2025-03-15T10:30:00Z"
    )
```

#### User Role Assignment

```python
class UserRoleAssignment(BaseModel):
    """User role assignment record"""
    id: str = Field(
        ..., 
        description="Unique identifier for the assignment",
        example="assignment_a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d"
    )
    user_id: str = Field(
        ..., 
        description="ID of the user",
        example="user-uuid-12345"
    )
    role_id: str = Field(
        ..., 
        description="ID of the assigned role",
        example="role_f83c724a-8b34-4f35-b531-58434fa6a569"
    )
    tenant_id: Optional[str] = Field(
        None, 
        description="Tenant ID if the role is tenant-scoped",
        example="tenant-123456"
    )
    assigned_at: datetime = Field(
        ..., 
        description="When the role was assigned",
        example="2025-03-30T15:00:00Z"
    )
    assigned_by: str = Field(
        ..., 
        description="ID of the user who assigned the role",
        example="admin-user-uuid-67890"
    )
    expires_at: Optional[datetime] = Field(
        None, 
        description="When the role assignment expires (if temporary)",
        example="2025-06-30T23:59:59Z"
    )
```

#### Node Permission Configuration

```python
class NodePermissionLevel(str, Enum):
    """Permission levels for node types"""
    UNRESTRICTED = "unrestricted"  # Anyone can use
    STANDARD = "standard"          # Standard users and above
    POWER = "power"                # Power users and above
    ADMIN = "admin"                # Admin users only
    SUPER_ADMIN = "super_admin"    # Super admin users only
    CUSTOM = "custom"              # Custom role assignments

class NodePermissionConfig(BaseModel):
    """Permission configuration for a node type"""
    id: str = Field(
        ..., 
        description="Unique identifier for the config",
        example="node_perm_7b8c9d0e-1f2a-3b4c-5d6e-7f8a9b0c1d2e"
    )
    node_type_id: str = Field(
        ..., 
        description="ID of the node type",
        example="json_transform"
    )
    use_level: NodePermissionLevel = Field(
        NodePermissionLevel.STANDARD, 
        description="Permission level required to use this node",
        example=NodePermissionLevel.STANDARD
    )
    edit_level: NodePermissionLevel = Field(
        NodePermissionLevel.STANDARD, 
        description="Permission level required to edit this node's config",
        example=NodePermissionLevel.STANDARD
    )
    custom_role_ids: Optional[List[str]] = Field(
        None, 
        description="Custom role IDs with access to this node (for CUSTOM level)",
        example=["role_f83c724a-8b34-4f35-b531-58434fa6a569"]
    )
    tenant_restrictions: Optional[List[str]] = Field(
        None, 
        description="Tenant IDs this node is restricted to",
        example=["tenant-123456", "tenant-789012"]
    )
    reason: Optional[str] = Field(
        None, 
        description="Reason for the permission configuration",
        example="Contains sensitive data transformation capabilities"
    )
    updated_at: datetime = Field(
        ..., 
        description="When the configuration was last updated",
        example="2025-03-30T15:15:00Z"
    )
    updated_by: str = Field(
        ..., 
        description="ID of the user who updated the configuration",
        example="admin-user-uuid-67890"
    )
```

### API Endpoints

#### 1. Role Management

##### GET /api/admin/roles

Retrieves all roles with optional filtering.

###### Query Parameters
- `scope`: Filter by role scope (system, tenant, group)
- `tenant_id`: Filter by tenant ID
- `system_role`: Filter by system role type
- `custom_only`: Only return custom roles (true/false)

###### Response (200 OK)
```json
{
  "items": [
    {
      "id": "role_f83c724a-8b34-4f35-b531-58434fa6a569",
      "name": "Integration Developer",
      "description": "Can create and modify integrations but cannot publish applications",
      "scope": "tenant",
      "tenant_id": "tenant-123456",
      "permissions": [
        "node:use:json_transform",
        "node:use:filter",
        "integration:create",
        "integration:edit"
      ],
      "is_custom": true,
      "created_at": "2025-03-15T10:30:00Z",
      "updated_at": "2025-03-30T14:45:00Z"
    }
  ],
  "total": 1,
  "page": 1,
  "page_size": 20,
  "total_pages": 1
}
```

##### POST /api/admin/roles

Creates a new role.

###### Request Body
```json
{
  "name": "Data Analyst",
  "description": "Can create and run data transformations but not modify integrations",
  "scope": "tenant",
  "tenant_id": "tenant-123456",
  "permissions": [
    "node:use:json_transform",
    "node:use:filter",
    "node:use:aggregation",
    "integration:view",
    "integration:execute"
  ]
}
```

###### Response (201 Created)
```json
{
  "id": "role_e7a9b2c5-1d4e-5f6a-7b8c-9d0e1f2a3b4c",
  "name": "Data Analyst",
  "description": "Can create and run data transformations but not modify integrations",
  "scope": "tenant",
  "tenant_id": "tenant-123456",
  "permissions": [
    "node:use:json_transform",
    "node:use:filter",
    "node:use:aggregation",
    "integration:view",
    "integration:execute"
  ],
  "is_custom": true,
  "created_at": "2025-03-30T16:00:00Z",
  "updated_at": "2025-03-30T16:00:00Z",
  "created_by": "admin-user-uuid-67890"
}
```

##### GET /api/admin/roles/{role_id}

Retrieves details for a specific role.

###### Response (200 OK)
```json
{
  "id": "role_e7a9b2c5-1d4e-5f6a-7b8c-9d0e1f2a3b4c",
  "name": "Data Analyst",
  "description": "Can create and run data transformations but not modify integrations",
  "scope": "tenant",
  "tenant_id": "tenant-123456",
  "permissions": [
    "node:use:json_transform",
    "node:use:filter",
    "node:use:aggregation",
    "integration:view",
    "integration:execute"
  ],
  "is_custom": true,
  "created_at": "2025-03-30T16:00:00Z",
  "updated_at": "2025-03-30T16:00:00Z",
  "created_by": "admin-user-uuid-67890",
  "assigned_users": [
    {
      "user_id": "user-uuid-12345",
      "username": "john.doe",
      "email": "john.doe@example.com",
      "assigned_at": "2025-03-30T16:15:00Z"
    }
  ]
}
```

##### PUT /api/admin/roles/{role_id}

Updates an existing role.

###### Request Body
```json
{
  "name": "Senior Data Analyst",
  "description": "Can create, run, and modify data transformations",
  "permissions": [
    "node:use:json_transform",
    "node:use:filter",
    "node:use:aggregation",
    "integration:view",
    "integration:execute",
    "integration:edit"
  ]
}
```

###### Response (200 OK)
```json
{
  "id": "role_e7a9b2c5-1d4e-5f6a-7b8c-9d0e1f2a3b4c",
  "name": "Senior Data Analyst",
  "description": "Can create, run, and modify data transformations",
  "scope": "tenant",
  "tenant_id": "tenant-123456",
  "permissions": [
    "node:use:json_transform",
    "node:use:filter",
    "node:use:aggregation",
    "integration:view",
    "integration:execute",
    "integration:edit"
  ],
  "is_custom": true,
  "updated_at": "2025-03-30T16:30:00Z"
}
```

##### DELETE /api/admin/roles/{role_id}

Deletes a role.

###### Response (204 No Content)

#### 2. User Role Assignments

##### GET /api/admin/users/{user_id}/roles

Retrieves roles assigned to a user.

###### Response (200 OK)
```json
{
  "user_id": "user-uuid-12345",
  "username": "john.doe",
  "effective_permissions": [
    "node:use:json_transform",
    "node:use:filter",
    "node:use:aggregation",
    "integration:view",
    "integration:execute",
    "integration:edit"
  ],
  "role_assignments": [
    {
      "id": "assignment_a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d",
      "role_id": "role_e7a9b2c5-1d4e-5f6a-7b8c-9d0e1f2a3b4c",
      "role_name": "Senior Data Analyst",
      "tenant_id": "tenant-123456",
      "assigned_at": "2025-03-30T16:15:00Z",
      "assigned_by": "admin-user-uuid-67890",
      "expires_at": null
    }
  ]
}
```

##### POST /api/admin/users/{user_id}/roles

Assigns a role to a user.

###### Request Body
```json
{
  "role_id": "role_f83c724a-8b34-4f35-b531-58434fa6a569",
  "tenant_id": "tenant-123456",
  "expires_at": "2025-12-31T23:59:59Z"
}
```

###### Response (201 Created)
```json
{
  "id": "assignment_b2c3d4e5-f6a7-8b9c-0d1e-2f3a4b5c6d7e",
  "user_id": "user-uuid-12345",
  "role_id": "role_f83c724a-8b34-4f35-b531-58434fa6a569",
  "role_name": "Integration Developer",
  "tenant_id": "tenant-123456",
  "assigned_at": "2025-03-30T16:45:00Z",
  "assigned_by": "admin-user-uuid-67890",
  "expires_at": "2025-12-31T23:59:59Z"
}
```

##### DELETE /api/admin/users/{user_id}/roles/{assignment_id}

Removes a role assignment from a user.

###### Response (204 No Content)

#### 3. Permissions Management

##### GET /api/admin/permissions

Retrieves all available permissions with optional filtering.

###### Query Parameters
- `type`: Filter by permission type
- `action`: Filter by action type
- `resource`: Filter by resource identifier

###### Response (200 OK)
```json
{
  "items": [
    {
      "id": "perm_d3c5a1b2-7e9f-4f8d-9e1c-2f3a4b5c6d7e",
      "name": "Use JSON Transform Node",
      "description": "Allows using the JSON Transform node in integrations",
      "type": "node",
      "action": "use",
      "resource": "json_transform",
      "permission_string": "node:use:json_transform",
      "created_at": "2025-03-15T10:30:00Z"
    },
    {
      "id": "perm_e4f6a8b0-c2d4-6e8f-0a2c-4d6e8f0a2c4d",
      "name": "Create Integration",
      "description": "Allows creating new integrations",
      "type": "integration",
      "action": "create",
      "resource": "*",
      "permission_string": "integration:create",
      "created_at": "2025-03-15T10:30:00Z"
    }
  ],
  "total": 2,
  "page": 1,
  "page_size": 20,
  "total_pages": 1
}
```

#### 4. Node Permission Configuration

##### GET /api/admin/nodes/permissions

Retrieves permission configurations for node types.

###### Query Parameters
- `node_type_id`: Filter by node type ID
- `permission_level`: Filter by permission level

###### Response (200 OK)
```json
{
  "items": [
    {
      "id": "node_perm_7b8c9d0e-1f2a-3b4c-5d6e-7f8a9b0c1d2e",
      "node_type_id": "json_transform",
      "node_display_name": "JSON Transformation",
      "use_level": "standard",
      "edit_level": "standard",
      "tenant_restrictions": null,
      "updated_at": "2025-03-30T15:15:00Z"
    },
    {
      "id": "node_perm_9d0e1f2a-3b4c-5d6e-7f8a-9b0c1d2e3f4a",
      "node_type_id": "code_execution",
      "node_display_name": "Custom Code Execution",
      "use_level": "admin",
      "edit_level": "admin",
      "reason": "Contains execution capabilities that require administrative review",
      "tenant_restrictions": null,
      "updated_at": "2025-03-30T15:15:00Z"
    }
  ],
  "total": 2,
  "page": 1,
  "page_size": 20,
  "total_pages": 1
}
```

##### PUT /api/admin/nodes/{node_type_id}/permissions

Updates permission configuration for a node type.

###### Request Body
```json
{
  "use_level": "power",
  "edit_level": "admin",
  "tenant_restrictions": [
    "tenant-123456", 
    "tenant-789012"
  ],
  "reason": "Contains sensitive data transformation capabilities"
}
```

###### Response (200 OK)
```json
{
  "id": "node_perm_7b8c9d0e-1f2a-3b4c-5d6e-7f8a9b0c1d2e",
  "node_type_id": "json_transform",
  "node_display_name": "JSON Transformation",
  "use_level": "power",
  "edit_level": "admin",
  "tenant_restrictions": [
    "tenant-123456", 
    "tenant-789012"
  ],
  "reason": "Contains sensitive data transformation capabilities",
  "updated_at": "2025-03-30T17:00:00Z",
  "updated_by": "admin-user-uuid-67890"
}
```

##### GET /api/admin/nodes/{node_type_id}/permissions/audit

Retrieves audit history of permission changes for a node type.

###### Response (200 OK)
```json
{
  "node_type_id": "json_transform",
  "node_display_name": "JSON Transformation",
  "current_config": {
    "use_level": "power",
    "edit_level": "admin",
    "tenant_restrictions": [
      "tenant-123456", 
      "tenant-789012"
    ],
    "updated_at": "2025-03-30T17:00:00Z"
  },
  "history": [
    {
      "use_level": "power",
      "edit_level": "admin",
      "tenant_restrictions": [
        "tenant-123456", 
        "tenant-789012"
      ],
      "reason": "Contains sensitive data transformation capabilities",
      "updated_at": "2025-03-30T17:00:00Z",
      "updated_by": {
        "user_id": "admin-user-uuid-67890",
        "username": "admin.user"
      }
    },
    {
      "use_level": "standard",
      "edit_level": "standard",
      "tenant_restrictions": null,
      "updated_at": "2025-03-30T15:15:00Z",
      "updated_by": {
        "user_id": "admin-user-uuid-67890",
        "username": "admin.user"
      }
    }
  ]
}
```

##### GET /api/admin/nodes/{node_type_id}/access

Checks if current user can access a node type.

###### Response (200 OK)
```json
{
  "node_type_id": "json_transform",
  "node_display_name": "JSON Transformation",
  "can_use": true,
  "can_edit": false,
  "access_details": {
    "required_level_for_use": "power",
    "required_level_for_edit": "admin",
    "user_level": "power",
    "user_roles": [
      "role_e7a9b2c5-1d4e-5f6a-7b8c-9d0e1f2a3b4c"
    ]
  }
}
```

#### 5. Bulk Operations

##### POST /api/admin/nodes/permissions/bulk

Updates permissions for multiple node types at once.

###### Request Body
```json
{
  "node_type_ids": [
    "json_transform",
    "string_manipulation",
    "number_operations"
  ],
  "use_level": "power",
  "edit_level": "power",
  "reason": "Standardizing transformation node permissions"
}
```

###### Response (200 OK)
```json
{
  "updated": [
    "json_transform",
    "string_manipulation",
    "number_operations"
  ],
  "use_level": "power",
  "edit_level": "power",
  "updated_at": "2025-03-30T17:15:00Z",
  "updated_by": "admin-user-uuid-67890"
}
```

##### POST /api/admin/roles/bulk-assign

Assigns roles to multiple users.

###### Request Body
```json
{
  "role_id": "role_e7a9b2c5-1d4e-5f6a-7b8c-9d0e1f2a3b4c",
  "user_ids": [
    "user-uuid-12345",
    "user-uuid-67890",
    "user-uuid-abcdef"
  ],
  "tenant_id": "tenant-123456"
}
```

###### Response (200 OK)
```json
{
  "role_id": "role_e7a9b2c5-1d4e-5f6a-7b8c-9d0e1f2a3b4c",
  "role_name": "Senior Data Analyst",
  "assigned": [
    "user-uuid-12345",
    "user-uuid-67890",
    "user-uuid-abcdef"
  ],
  "tenant_id": "tenant-123456",
  "assigned_at": "2025-03-30T17:30:00Z",
  "assigned_by": "admin-user-uuid-67890"
}
```

### Database Schema

#### 1. roles
Table for role definitions:
- `id`: Primary key
- `name`: Role name
- `description`: Role description
- `system_role_type`: System role type (nullable)
- `scope`: Role scope (system, tenant, group)
- `tenant_id`: Tenant ID for tenant-scoped roles (nullable)
- `group_id`: Group ID for group-scoped roles (nullable)
- `is_custom`: Whether this is a custom role
- `created_at`: Creation timestamp
- `updated_at`: Last update timestamp
- `created_by`: User ID who created the role

#### 2. permissions
Table for permission definitions:
- `id`: Primary key
- `name`: Permission name
- `description`: Permission description
- `type`: Permission type
- `action`: Action type
- `resource`: Resource identifier
- `permission_string`: String representation
- `created_at`: Creation timestamp

#### 3. role_permissions
Join table for roles and permissions:
- `id`: Primary key
- `role_id`: Foreign key to roles table
- `permission_id`: Foreign key to permissions table
- `granted_at`: When the permission was granted to the role
- `granted_by`: User ID who granted the permission

#### 4. user_role_assignments
Table for user role assignments:
- `id`: Primary key
- `user_id`: Foreign key to users table
- `role_id`: Foreign key to roles table
- `tenant_id`: Tenant ID for tenant-scoped roles (nullable)
- `assigned_at`: Assignment timestamp
- `assigned_by`: User ID who assigned the role
- `expires_at`: Expiration timestamp (nullable)

#### 5. node_permission_configs
Table for node permission configurations:
- `id`: Primary key
- `node_type_id`: Foreign key to node_types table
- `use_level`: Permission level required to use the node
- `edit_level`: Permission level required to edit the node
- `custom_roles`: Array of role IDs with access (for custom level)
- `tenant_restrictions`: Array of tenant IDs the node is restricted to (nullable)
- `reason`: Reason for the permission configuration (nullable)
- `updated_at`: Last update timestamp
- `updated_by`: User ID who updated the configuration

#### 6. node_permission_audit
Table for auditing permission changes:
- `id`: Primary key
- `node_type_id`: Foreign key to node_types table
- `previous_config`: Previous configuration (JSONB)
- `new_config`: New configuration (JSONB)
- `changed_at`: Timestamp of the change
- `changed_by`: User ID who made the change
- `reason`: Reason for the change (nullable)

## Implementation Process

The implementation will follow these steps:

1. **Core RBAC Framework**
   - Implement role and permission data models
   - Create database tables and relationships
   - Develop core access control manager

2. **Node Type Permission Configuration**
   - Implement permission level assignment for node types
   - Create tenant restriction functionality
   - Develop audit trail for permission changes

3. **User Role Management**
   - Implement role assignment and management
   - Create temporary role functionality
   - Develop user permission calculation

4. **API Implementation**
   - Create RESTful endpoints for all RBAC functions
   - Implement permission checking middleware
   - Develop bulk operation capabilities

5. **UI Integration**
   - Build role management interface
   - Create node permission configuration screens
   - Implement user role assignment interface

## Benefits of This Approach

1. **Fine-Grained Control**
   - Detailed permissions for every node type
   - Customizable roles for different user types
   - Tenant-specific permission management

2. **Scalable Access Control**
   - Hierarchical role structure
   - Permission inheritance
   - Bulk operations for efficient management

3. **Comprehensive Audit Trail**
   - Track all permission changes
   - Document reasons for changes
   - Monitor access patterns

4. **Flexible Authorization**
   - Support for custom roles
   - Temporary access capabilities
   - Progressive access levels

5. **Strong Security Model**
   - Defense in depth with layered permissions
   - Tenant isolation enforcement
   - Explicit deny capability for sensitive nodes

6. **Usability Improvements**
   - Role-based node visibility
   - Simplified node panel organization
   - Context-specific permission guidance

This RBAC system provides a robust foundation for controlling access to node types in the integration platform, enabling administrators to finely control which users can access specific integration capabilities while providing a scalable and auditable permission model.