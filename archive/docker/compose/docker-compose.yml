# Standardized Docker Compose for TAP Integration Platform
# Follows consistent naming pattern and organization

services:
  # Frontend service
  tap-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NPM_INSTALL_FLAGS=--legacy-peer-deps
    image: tap-frontend:${SERVICE_ENV:-dev}
    container_name: tap-frontend-${SERVICE_ENV:-dev}
    ports:
      - "${SERVICE_FRONTEND_PORT:-3456}:80"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      # Service identification
      - SERVICE_NAME=frontend
      - SERVICE_ENV=${SERVICE_ENV:-development}
      - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
      
      # API configuration
      - SERVICE_API_URL=${SERVICE_API_URL:-http://tap-backend:8000}
      
      # Development configuration
      - SERVICE_DEV_MODE=${SERVICE_DEV_MODE:-true}
      - SERVICE_HOT_RELOAD=${SERVICE_HOT_RELOAD:-true}
      - SERVICE_HOT_RELOAD_HOST=${SERVICE_HOT_RELOAD_HOST:-localhost}
      - SERVICE_HOT_RELOAD_PORT=${SERVICE_FRONTEND_PORT:-3456}
      
      # Health monitoring
      - SERVICE_HEALTH_CHECK_INTERVAL=60000
      - SERVICE_HEALTH_CHECK_PATH=/health
      
      # Error handling
      - SERVICE_ERROR_REPORTING=${SERVICE_ERROR_REPORTING:-true}
      - SERVICE_ERROR_LEVEL=${SERVICE_ERROR_LEVEL:-warn}
      - SERVICE_MAX_ERRORS=${SERVICE_MAX_ERRORS:-100}
    depends_on:
      tap-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - tap-network
    restart: ${SERVICE_RESTART_POLICY:-unless-stopped}

  # Backend service
  tap-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - EXTRA_PACKAGES=${SERVICE_BACKEND_EXTRA_PACKAGES:-pydantic-settings psutil httpx}
    image: tap-backend:${SERVICE_ENV:-dev}
    container_name: tap-backend-${SERVICE_ENV:-dev}
    ports:
      - "${SERVICE_BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
      - backend_venv:/app/.venv
      - backend_data:/app/data
    environment:
      # Service identification
      - SERVICE_NAME=backend
      - SERVICE_ENV=${SERVICE_ENV:-development}
      - SERVICE_VERSION=${SERVICE_VERSION:-1.0.0}
      
      # Python configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      
      # Application configuration
      - SERVICE_CORS_ORIGINS=${SERVICE_CORS_ORIGINS:-["http://localhost:3456","http://tap-frontend"]}
      - SERVICE_DATABASE_URL=${SERVICE_DATABASE_URL:-sqlite:///data/local_dev.sqlite}
      - SERVICE_SECRET_KEY=${SERVICE_SECRET_KEY:-local_development_secret_change_in_production}
      - SERVICE_LOG_LEVEL=${SERVICE_LOG_LEVEL:-debug}
      - SERVICE_DEBUG=${SERVICE_DEBUG:-true}
      
      # Feature flags
      - SERVICE_ENABLE_INVITATIONS=${SERVICE_ENABLE_INVITATIONS:-false}
      - SERVICE_ENABLE_MFA=${SERVICE_ENABLE_MFA:-false}
      
      # Database configuration
      - SERVICE_DB_SSL_REQUIRED=${SERVICE_DB_SSL_REQUIRED:-false}
      - SERVICE_DB_AUTOMIGRATE=${SERVICE_DB_AUTOMIGRATE:-true}
      - SERVICE_DB_AUTOSEED=${SERVICE_DB_AUTOSEED:-true}
      
      # Performance tuning
      - SERVICE_WORKERS=${SERVICE_WORKERS:-1}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - tap-network
    restart: ${SERVICE_RESTART_POLICY:-unless-stopped}

# Network configuration
networks:
  tap-network:
    name: tap-network-${SERVICE_ENV:-dev}
    driver: bridge

# Volume configuration
volumes:
  frontend_node_modules:
    name: tap-frontend-node-modules-${SERVICE_ENV:-dev}
  backend_venv:
    name: tap-backend-venv-${SERVICE_ENV:-dev}
  backend_data:
    name: tap-backend-data-${SERVICE_ENV:-dev}