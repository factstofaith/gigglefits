# Standardized Test Container for TAP Integration Platform Backend
# This container is specifically designed for running tests in a consistent environment

FROM python:3.10-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    TEST_MODE=true \
    LOG_LEVEL=DEBUG \
    APP_ENVIRONMENT=test

# Install Python dependencies
COPY requirements.txt /app/
COPY test/test_requirements.txt /app/

# Install test dependencies first (includes pytest and related packages)
RUN pip install --no-cache-dir -r test_requirements.txt

# Install application dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Install additional testing utilities
RUN pip install --no-cache-dir \
    pytest-cov \
    pytest-xdist \
    pytest-timeout \
    pytest-mock \
    pytest-env \
    faker

# Create test results directory
RUN mkdir -p /app/test_results /app/coverage

# Copy test configuration files
COPY pytest.ini .coveragerc /app/

# Copy application code
COPY . .

# Create a health check script
RUN echo '#!/bin/bash\n\
if [ -f "/app/test_status.txt" ]; then\n\
  exit 0\n\
else\n\
  exit 1\n\
fi\n\
' > /app/healthcheck.sh && chmod +x /app/healthcheck.sh

# Create entrypoint script
RUN echo '#!/bin/bash\n\
echo "Starting TAP Integration Platform Test Suite"\n\
echo "Test environment: $APP_ENVIRONMENT"\n\
\n\
# Create test status file for healthcheck\n\
touch /app/test_status.txt\n\
\n\
# Set default test path if not specified\n\
TEST_PATH=${TEST_PATH:-tests/}\n\
\n\
# Run tests with coverage\n\
echo "Running tests in $TEST_PATH..."\n\
pytest $TEST_PATH $PYTEST_ARGS --cov=. --cov-report=xml:/app/coverage/coverage.xml --cov-report=html:/app/coverage/html\n\
\n\
TEST_EXIT_CODE=$?\n\
\n\
# Store test results\n\
echo "Tests completed with exit code: $TEST_EXIT_CODE"\n\
echo $TEST_EXIT_CODE > /app/test_results/exit_code.txt\n\
\n\
# Remove test status file if tests failed\n\
if [ $TEST_EXIT_CODE -ne 0 ]; then\n\
  rm /app/test_status.txt\n\
fi\n\
\n\
exit $TEST_EXIT_CODE\n\
' > /app/test_entrypoint.sh && chmod +x /app/test_entrypoint.sh

# Add Docker healthcheck
HEALTHCHECK --interval=10s --timeout=5s --start-period=5s --retries=1 CMD [ "/app/healthcheck.sh" ]

# Default command runs all tests
ENTRYPOINT ["/app/test_entrypoint.sh"]

# Default arguments can be overridden when running the container
CMD ["tests/"]