# Optimized Frontend Production Dockerfile for TAP Integration Platform
# Generated by docker-layer-optimizer-enhanced.js

# Stage 1: Build the application
FROM node:18-alpine AS builder

WORKDIR /app
RUN chown -R node:node /app
USER node

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files for dependency caching
COPY --chown=node:node package.json package-lock.json* ./

# Install dependencies with clean npm ci for more consistent builds
RUN npm ci

# Copy application code
COPY --chown=node:node . .

# Ensure webpack config directory exists
RUN mkdir -p /app/config

# Set production environment
ENV NODE_ENV=production

# Create a production build using webpack
RUN npm run build

# Stage 2: Create the production image with NGINX
FROM nginx:alpine AS production

# Add metadata labels
LABEL \
    org.opencontainers.image.vendor="TAP Integration Platform" \
    org.opencontainers.image.authors="TAP Platform Team <tap-team@example.com>" \
    org.opencontainers.image.licenses="Proprietary" \
    org.label-schema.schema-version="1.0" \
    org.label-schema.vendor="TAP Integration Platform" \
    com.tap.component.version="1.0.0" \
    com.tap.image.environment="production" \
    com.tap.maintainer="TAP Platform Team" \
    com.tap.component.type="frontend" \
    org.opencontainers.image.created="2025-04-03T02:06:45.333Z"


# Copy compiled app from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY ./nginx.conf /etc/nginx/conf.d/default.conf

# Setup runtime environment variable support
RUN echo '#!/bin/sh
# Generate runtime environment variables for frontend
cat > /usr/share/nginx/html/runtime-env.js << EOF
window.runtimeEnv = {
  BACKEND_URL: "${BACKEND_URL:-http://backend:8000}",
  API_URL: "${API_URL:-http://backend:8000/api/v1}",
  NODE_ENV: "production",
  ENVIRONMENT: "production"
};
EOF
' > /docker-entrypoint.d/30-runtime-env.sh && chmod +x /docker-entrypoint.d/30-runtime-env.sh

# Add health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 CMD curl -f http://localhost/ || exit 1

# Expose the NGINX port
EXPOSE 80

# NGINX container automatically starts nginx when the container is run